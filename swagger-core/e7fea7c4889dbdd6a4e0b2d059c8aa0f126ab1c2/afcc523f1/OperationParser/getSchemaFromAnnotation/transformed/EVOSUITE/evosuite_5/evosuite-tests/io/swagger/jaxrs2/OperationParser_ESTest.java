/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 13:10:50 GMT 2021
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.OAuthFlows;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(0, serverArray0.length);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "no description";
      String string1 = "`TgR8ZP";
      String string2 = "y}H]-L*p%:%#t1sU8{;";
      String string3 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      assertSame(optional3, optional0);
      assertNotNull(optional3);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      String string4 = "java.langio.swagger.oas.models.media.MediaType";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      boolean boolean0 = true;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      String string5 = "A<t#w{^<Q`Uv#^N\"";
      boolean boolean1 = true;
      String string6 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Components components0 = new Components();
      assertNotNull(components0);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "yl7[?<y1eF$[zYN";
      String string1 = "java.langjava.lang.Integer";
      ServerVariable[] serverVariableArray0 = new ServerVariable[7];
      String string2 = "java.lang";
      String string3 = "Z-*_apm+<wTBJ";
      String string4 = "";
      String string5 = "8x\"9p!-}0v";
      String string6 = "R#vKDx";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, string3, string1, string3).when(serverVariable0).description();
      doReturn(string4, string3, string4, string5, string6).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      assertEquals(1, serverArray0.length);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[7];
      String string7 = "Y~}CB";
      String string8 = null;
      String string9 = null;
      String string10 = "Invalid UTF-8 start byte 0x";
      String string11 = "java.langjava.lang.Integer";
      String string12 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string7, string8, string6, string7).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string4, string4, string1, string9, string1).when(link0).operationId();
      doReturn(string10, string1, string11, string8, string12).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(7, linkArray0.length);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(7, linkArray0.length);
      
      String string13 = "#/components/schemas/";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      
      Components components2 = components1.addHeaders(string13, header0);
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string12);
      assertNotSame(string13, string1);
      assertNotSame(string13, string5);
      assertNotSame(string13, string6);
      assertNotSame(string13, string0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string3);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertEquals(7, linkArray0.length);
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      String string0 = "-oz.kDEFBZ\"K;F5$^R>";
      String string1 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      Content[] contentArray0 = null;
      String string2 = "";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string2).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components2 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Map<String, Header> map1 = apiResponse0.getHeaders();
      assertNull(map1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components3 = components2.headers(map1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components4 = components3.securitySchemes(hashMap1);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertNotNull(components4);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Map<String, io.swagger.oas.models.links.Link> map2 = apiResponse0.getLinks();
      assertNull(map2);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components5 = components4.links(map2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertNotNull(components5);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertNotSame(string2, string0);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertNotNull(optional1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      LinkParameters linkParameters0 = null;
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map3);
      assertTrue(map3.isEmpty());
      assertEquals(0, map3.size());
      
      String string3 = "java.lang";
      String string4 = null;
      License license0 = null;
      String string5 = "+.>{ji<nTyT\\:<p=-";
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      assertNotNull(schema0);
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      
      HashMap<String, Encoding> hashMap2 = new HashMap<String, Encoding>();
      assertNotNull(hashMap2);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      
      String string6 = null;
      String string7 = "";
      String string8 = "W[X4@";
      Boolean boolean1 = null;
      String string9 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string10 = "'SFqnn|F";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[24];
      stringArray0[0] = string3;
      stringArray0[2] = string8;
      stringArray0[3] = string1;
      stringArray0[4] = string3;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string3;
      String string11 = "G;x8H";
      String string12 = "";
      String string13 = "No _valueDeserializer assigned";
      boolean boolean2 = true;
      String string14 = "java.lang";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string14, stringArray0[3]).when(externalDocumentation1).description();
      doReturn(string0, string2).when(externalDocumentation1).url();
      int int0 = 0;
      int int1 = 2350;
      boolean boolean3 = true;
      String string15 = "java.langio.swagger.oas.models.info.Contact";
      int int2 = 7;
      String string16 = "x=F;V2#oO,7GkyP";
      String string17 = "qK~N";
      String string18 = "java.langio.swagger.jaxrs2.OperationParser";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean0, boolean0).when(schema1).deprecated();
      doReturn(string11, stringArray0[7]).when(schema1).description();
      doReturn(string12, string13, string15).when(schema1).example();
      doReturn(boolean0, boolean0).when(schema1).exclusiveMaximum();
      doReturn(boolean2, boolean2).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string0, stringArray0[7]).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(string3).when(schema1).maximum();
      doReturn(int1, int2).when(schema1).minProperties();
      doReturn(string6).when(schema1).minimum();
      doReturn(string13, string16).when(schema1).pattern();
      doReturn(boolean3, boolean0).when(schema1).readOnly();
      doReturn(string11, string17).when(schema1).ref();
      doReturn(stringArray0[5], string18).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string16));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string17));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string18));
      assertFalse(string2.equals((Object)string17));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string16));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string18));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string16));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string18));
      assertFalse(string11.equals((Object)string17));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string12.equals((Object)string18));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string16));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string17));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string15));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string17));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string18));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string18));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string7));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string18));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string18));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string17));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string16));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string15));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string18));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string17));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string17.equals((Object)string18));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string9));
      assertNotSame(string0, string5);
      assertNotSame(string0, string13);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string11);
      assertNotSame(string0, string15);
      assertNotSame(string0, string14);
      assertNotSame(string0, string10);
      assertNotSame(string0, string16);
      assertNotSame(string0, string12);
      assertNotSame(string0, string9);
      assertNotSame(string0, string17);
      assertNotSame(string0, string8);
      assertNotSame(string0, string18);
      assertNotSame(string2, string17);
      assertNotSame(string2, string0);
      assertNotSame(string2, string9);
      assertNotSame(string2, string16);
      assertNotSame(string2, string14);
      assertNotSame(string2, string11);
      assertNotSame(string2, string3);
      assertNotSame(string2, string15);
      assertSame(string2, string12);
      assertNotSame(string2, string5);
      assertNotSame(string2, string18);
      assertNotSame(string2, string10);
      assertNotSame(string2, string13);
      assertNotSame(string2, string8);
      assertSame(string2, string7);
      assertNotSame(string11, string15);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertNotSame(string11, string13);
      assertNotSame(string11, string2);
      assertNotSame(string11, string9);
      assertNotSame(string11, string16);
      assertNotSame(string11, string3);
      assertNotSame(string11, string12);
      assertNotSame(string11, string0);
      assertNotSame(string11, string14);
      assertNotSame(string11, string7);
      assertNotSame(string11, string18);
      assertNotSame(string11, string17);
      assertNotSame(string11, string10);
      assertNotSame(string12, string18);
      assertNotSame(string12, string10);
      assertNotSame(string12, string16);
      assertNotSame(string12, string9);
      assertNotSame(string12, string11);
      assertSame(string12, string2);
      assertNotSame(string12, string14);
      assertSame(string12, string7);
      assertNotSame(string12, string17);
      assertNotSame(string12, string5);
      assertNotSame(string12, string13);
      assertNotSame(string12, string15);
      assertNotSame(string12, string8);
      assertNotSame(string12, string3);
      assertNotSame(string12, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string7);
      assertNotSame(string13, string2);
      assertNotSame(string13, string17);
      assertNotSame(string13, string8);
      assertNotSame(string13, string18);
      assertNotSame(string13, string12);
      assertNotSame(string13, string10);
      assertNotSame(string13, string16);
      assertNotSame(string13, string3);
      assertNotSame(string13, string0);
      assertNotSame(string13, string9);
      assertNotSame(string13, string15);
      assertNotSame(string13, string14);
      assertNotSame(string13, string11);
      assertNotSame(string14, string5);
      assertNotSame(string14, string13);
      assertSame(string14, string3);
      assertNotSame(string14, string15);
      assertNotSame(string14, string16);
      assertNotSame(string14, string0);
      assertNotSame(string14, string2);
      assertNotSame(string14, string9);
      assertNotSame(string14, string12);
      assertNotSame(string14, string10);
      assertNotSame(string14, string11);
      assertNotSame(string14, string18);
      assertNotSame(string14, string8);
      assertNotSame(string14, string17);
      assertNotSame(string14, string7);
      assertNotSame(string15, string5);
      assertNotSame(string15, string13);
      assertNotSame(string15, string8);
      assertNotSame(string15, string7);
      assertNotSame(string15, string17);
      assertNotSame(string15, string18);
      assertNotSame(string15, string10);
      assertNotSame(string15, string14);
      assertNotSame(string15, string11);
      assertNotSame(string15, string3);
      assertNotSame(string15, string16);
      assertNotSame(string15, string12);
      assertNotSame(string15, string0);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string3, string11);
      assertNotSame(string3, string18);
      assertNotSame(string3, string0);
      assertNotSame(string3, string9);
      assertNotSame(string3, string17);
      assertNotSame(string3, string10);
      assertNotSame(string3, string16);
      assertNotSame(string3, string12);
      assertNotSame(string3, string7);
      assertSame(string3, string14);
      assertNotSame(string3, string5);
      assertNotSame(string3, string15);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string13);
      assertNotSame(string16, string11);
      assertNotSame(string16, string18);
      assertNotSame(string16, string0);
      assertNotSame(string16, string7);
      assertNotSame(string16, string17);
      assertNotSame(string16, string8);
      assertNotSame(string16, string10);
      assertNotSame(string16, string13);
      assertNotSame(string16, string5);
      assertNotSame(string16, string3);
      assertNotSame(string16, string2);
      assertNotSame(string16, string9);
      assertNotSame(string16, string12);
      assertNotSame(string16, string15);
      assertNotSame(string16, string14);
      assertNotSame(string17, string18);
      assertNotSame(string17, string10);
      assertNotSame(string17, string14);
      assertNotSame(string17, string0);
      assertNotSame(string17, string12);
      assertNotSame(string17, string16);
      assertNotSame(string17, string9);
      assertNotSame(string17, string3);
      assertNotSame(string17, string7);
      assertNotSame(string17, string11);
      assertNotSame(string17, string15);
      assertNotSame(string17, string5);
      assertNotSame(string17, string2);
      assertNotSame(string17, string8);
      assertNotSame(string17, string13);
      assertNotSame(string18, string8);
      assertNotSame(string18, string15);
      assertNotSame(string18, string13);
      assertNotSame(string18, string10);
      assertNotSame(string18, string7);
      assertNotSame(string18, string17);
      assertNotSame(string18, string11);
      assertNotSame(string18, string5);
      assertNotSame(string18, string14);
      assertNotSame(string18, string16);
      assertNotSame(string18, string3);
      assertNotSame(string18, string0);
      assertNotSame(string18, string2);
      assertNotSame(string18, string12);
      assertNotSame(string18, string9);
      assertNotNull(optional2);
      assertEquals(24, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "";
      String string1 = ",*u-1";
      String string2 = "com.fasterxml.jackson.databind.ser.impl.StringArraySerializer";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(contact0).email();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(contact0).name();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(contact0).url();
      String string3 = "java.langio.swagger.jaxrs2.OperationParser";
      String string4 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string4).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1, operationParser0.COMPONENTS_REF).when(info0).title();
      doReturn(string2, string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotNull(optional0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[2];
      assertFalse(exampleObjectArray1.equals((Object)exampleObjectArray0));
      
      String string5 = "was expecting a colon to separate field name and value";
      String string6 = "class OAuthFlows {\n";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string5, string6, operationParser0.COMMA, string5, operationParser0.MEDIA_TYPE).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObjectArray1[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string7 = "";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      String string8 = "Missing generic type information for ";
      PathItem pathItem0 = new PathItem();
      assertNotNull(pathItem0);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      
      Callback callback1 = callback0.addPathItem(string8, pathItem0);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertSame(callback1, callback0);
      assertSame(callback0, callback1);
      assertNotNull(callback1);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      
      Components components1 = components0.addCallbacks(string7, callback1);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertSame(callback1, callback0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertSame(string7, string0);
      assertSame(callback0, callback1);
      assertNotNull(components1);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components1);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertSame(callback1, callback0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertSame(string7, string0);
      assertSame(callback0, callback1);
      assertNotNull(optional2);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(8, contentArray0.length);
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      int int0 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string0 = "`R";
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      
      String string1 = "    type: ";
      Example example1 = example0.$ref(string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(example0, example1);
      assertNotSame(string1, string0);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("    type: ", example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("    type: ", example1.get$ref());
      
      MediaType mediaType1 = mediaType0.addExamples(operationParser0.MEDIA_TYPE, example1);
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertNotSame(string1, string0);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("    type: ", example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("    type: ", example1.get$ref());
      assertNull(mediaType1.getExample());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      assertNotNull(schema1);
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      
      MediaType mediaType2 = mediaType1.schema(schema1);
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(example0, example1);
      assertNotSame(string1, string0);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("    type: ", example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("    type: ", example1.get$ref());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(mediaType2.getExample());
      
      String string2 = "#/components/schemas/";
      String string3 = "JcM";
      String string4 = "";
      String string5 = "java.lang";
      String string6 = "dH08A";
      String string7 = "    anyOf: ";
      Integer integer0 = Integer.getInteger(string7, int0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      schema1.setMinItems(integer0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNull(schema1.getExclusiveMinimum());
      assertEquals(Integer.MAX_VALUE, (int)schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      
      String string8 = "java.lang";
      String string9 = "LgTY\\tPiC";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string8).when(exampleObject0).externalValue();
      doReturn(operationParser0.MEDIA_TYPE, string3, string4, operationParser0.COMPONENTS_REF).when(exampleObject0).name();
      doReturn(string5, operationParser0.DEFAULT_DESCRIPTION).when(exampleObject0).summary();
      doReturn(string6, operationParser0.DEFAULT_DESCRIPTION, string9).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(example0, example1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string9);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string9);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string8);
      assertNotSame(string3, string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string7);
      assertNotSame(string4, string9);
      assertNotSame(string4, string8);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string9);
      assertSame(string5, string8);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string4);
      assertNotNull(optional0);
      assertNull(mediaType0.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("    type: ", example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("    type: ", example1.get$ref());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getExclusiveMinimum());
      assertEquals(Integer.MAX_VALUE, (int)schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(mediaType2.getExample());
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(operationParser0.COMPONENTS_REF, string7).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string7);
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      
      String string10 = "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer";
      String string11 = "";
      String string12 = "*O8x~AC!A&,kXnVK~0";
      String string13 = "java.langjava.util.L-cale$LanguageRange";
      String string14 = "class Server {\n";
      String string15 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      String string16 = "no description";
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      String string0 = "no description";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = false;
      String string1 = "f6quLh#;|+$(v{T@P=g";
      String string2 = "*/*";
      String string3 = "java.langio.swagger.oas.models.media.Content";
      boolean boolean1 = false;
      String string4 = "gn*,C`=@8Q$+\"EvoYZ";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string2).when(externalDocumentation0).description();
      doReturn(stringArray0[2], string4).when(externalDocumentation0).url();
      int int0 = 57343;
      String string5 = "+deEzOsS);i(f:r^6VJ";
      String string6 = "8n6V3X\\s,-x% w%fW.";
      String string7 = "io.swagge";
      String string8 = "p\"PL3Jy_";
      String string9 = null;
      int int1 = 1917;
      int int2 = 6;
      String string10 = "java.lang";
      int int3 = 128;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, string9).when(schema0).description();
      doReturn(string2, string3, stringArray0[0], string7).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0], string9).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int3).when(schema0).maxProperties();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0, int2).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string0, string2).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string6, stringArray0[2]).when(schema0).ref();
      doReturn(string7, string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string10);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string10, string0);
      assertNotSame(string10, string6);
      assertNotSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string8);
      assertNotSame(string10, string5);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string8);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string10);
      assertNotSame(string1, string6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string10);
      assertNotSame(string2, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string10);
      assertNotSame(string4, string10);
      assertNotSame(string4, string2);
      assertNotSame(string4, string8);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string10);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string10);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string10);
      assertNotSame(string7, string1);
      assertNotNull(optional0);
      assertEquals(3, stringArray0.length);
      
      Link[] linkArray0 = new Link[3];
      String string11 = "^'LJ:Pv";
      String string12 = "java.lang";
      String string13 = "    head: ";
      String string14 = "00NhwgP;,gD(";
      String string15 = ", although was supposed to have one";
      String string16 = "oHU2)+]<GeH ?Z.v\"";
      String string17 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).expression();
      doReturn(string16, string17, stringArray0[0], (String) null, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string11, string12, stringArray0[2], string3).when(link0).description();
      doReturn(string11, string15, string13).when(link0).name();
      doReturn(string11, string13, string14, string10, string5).when(link0).operationId();
      doReturn(string14, string2, string12).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(3, linkArray0.length);
      
      String string18 = ",";
      boolean boolean2 = true;
      String string19 = "*/*";
      String string20 = "$!";
      boolean boolean3 = true;
      boolean boolean4 = false;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation1).description();
      doReturn((String) null).when(externalDocumentation1).url();
      String string21 = " .Q{";
      String string22 = "sAp:&h<NRa";
      boolean boolean5 = false;
      String string23 = "*/*";
      String string24 = ":[";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string18, (String) null).when(schema1)._default();
      doReturn(stringArray0).when(schema1)._enum();
      doReturn(boolean2, false).when(schema1).deprecated();
      doReturn(string3, (String) null).when(schema1).description();
      doReturn(string19, string20, (String) null).when(schema1).example();
      doReturn(boolean3, false).when(schema1).exclusiveMaximum();
      doReturn(boolean4).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema1).externalDocs();
      doReturn(string21, (String) null).when(schema1).format();
      doReturn(int1).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(string21).when(schema1).maximum();
      doReturn(int2, 0).when(schema1).minProperties();
      doReturn(string22).when(schema1).minimum();
      doReturn(string1, (String) null).when(schema1).pattern();
      doReturn(boolean5).when(schema1).readOnly();
      doReturn(string23, (String) null).when(schema1).ref();
      doReturn(string24, (String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string19));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string21));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string24));
      assertFalse(string18.equals((Object)string20));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string22));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string23));
      assertFalse(string1.equals((Object)string17));
      assertFalse(string1.equals((Object)string14));
      assertFalse(string1.equals((Object)string22));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string20));
      assertFalse(string1.equals((Object)string24));
      assertFalse(string1.equals((Object)string15));
      assertFalse(string1.equals((Object)string21));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string18));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string1.equals((Object)string16));
      assertFalse(string1.equals((Object)string23));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string19));
      assertFalse(string1.equals((Object)string6));
      assertFalse(boolean2 == boolean5);
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string22));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string24));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string14));
      assertFalse(string3.equals((Object)string22));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string17));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string20));
      assertFalse(string3.equals((Object)string19));
      assertFalse(string3.equals((Object)string16));
      assertFalse(string3.equals((Object)string18));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string21));
      assertFalse(string3.equals((Object)string15));
      assertFalse(string3.equals((Object)string23));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string3.equals((Object)string24));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string22));
      assertFalse(string20.equals((Object)string24));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string21));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string23));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(boolean3 == boolean5);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(string21.equals((Object)string3));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string23));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string10));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string16));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string22));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string24));
      assertFalse(string21.equals((Object)string13));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string22.equals((Object)string24));
      assertFalse(string22.equals((Object)string11));
      assertFalse(string22.equals((Object)string5));
      assertFalse(string22.equals((Object)string1));
      assertFalse(string22.equals((Object)string17));
      assertFalse(string22.equals((Object)string12));
      assertFalse(string22.equals((Object)string7));
      assertFalse(string22.equals((Object)string0));
      assertFalse(string22.equals((Object)string3));
      assertFalse(string22.equals((Object)string23));
      assertFalse(string22.equals((Object)string14));
      assertFalse(string22.equals((Object)string15));
      assertFalse(string22.equals((Object)string13));
      assertFalse(string22.equals((Object)string10));
      assertFalse(string22.equals((Object)string2));
      assertFalse(string22.equals((Object)string8));
      assertFalse(string22.equals((Object)string19));
      assertFalse(string22.equals((Object)string6));
      assertFalse(string22.equals((Object)string21));
      assertFalse(string22.equals((Object)string16));
      assertFalse(string22.equals((Object)string18));
      assertFalse(string22.equals((Object)string4));
      assertFalse(string22.equals((Object)string20));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(string23.equals((Object)string15));
      assertFalse(string23.equals((Object)string14));
      assertFalse(string23.equals((Object)string22));
      assertFalse(string23.equals((Object)string4));
      assertFalse(string23.equals((Object)string17));
      assertFalse(string23.equals((Object)string5));
      assertFalse(string23.equals((Object)string20));
      assertFalse(string23.equals((Object)string11));
      assertFalse(string23.equals((Object)string24));
      assertFalse(string23.equals((Object)string0));
      assertFalse(string23.equals((Object)string12));
      assertFalse(string23.equals((Object)string6));
      assertFalse(string23.equals((Object)string7));
      assertFalse(string23.equals((Object)string10));
      assertFalse(string23.equals((Object)string1));
      assertFalse(string23.equals((Object)string13));
      assertFalse(string23.equals((Object)string3));
      assertFalse(string23.equals((Object)string18));
      assertFalse(string23.equals((Object)string16));
      assertFalse(string23.equals((Object)string8));
      assertFalse(string23.equals((Object)string21));
      assertFalse(string24.equals((Object)string10));
      assertFalse(string24.equals((Object)string2));
      assertFalse(string24.equals((Object)string16));
      assertFalse(string24.equals((Object)string13));
      assertFalse(string24.equals((Object)string3));
      assertFalse(string24.equals((Object)string8));
      assertFalse(string24.equals((Object)string21));
      assertFalse(string24.equals((Object)string17));
      assertFalse(string24.equals((Object)string15));
      assertFalse(string24.equals((Object)string11));
      assertFalse(string24.equals((Object)string4));
      assertFalse(string24.equals((Object)string23));
      assertFalse(string24.equals((Object)string14));
      assertFalse(string24.equals((Object)string22));
      assertFalse(string24.equals((Object)string20));
      assertFalse(string24.equals((Object)string18));
      assertFalse(string24.equals((Object)string0));
      assertFalse(string24.equals((Object)string7));
      assertFalse(string24.equals((Object)string12));
      assertFalse(string24.equals((Object)string5));
      assertFalse(string24.equals((Object)string1));
      assertFalse(string24.equals((Object)string6));
      assertFalse(string24.equals((Object)string19));
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(optional1.equals((Object)optional0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertNotSame(string23, string15);
      assertNotSame(string23, string14);
      assertNotSame(string23, string22);
      assertNotSame(string23, string4);
      assertNotSame(string23, string17);
      assertNotSame(string23, string5);
      assertNotSame(string23, string20);
      assertNotSame(string23, string11);
      assertNotSame(string23, string24);
      assertSame(string23, string19);
      assertNotSame(string23, string0);
      assertNotSame(string23, string12);
      assertNotSame(string23, string6);
      assertNotSame(string23, string7);
      assertNotSame(string23, string10);
      assertNotSame(string23, string1);
      assertNotSame(string23, string13);
      assertNotSame(string23, string3);
      assertNotSame(string23, string18);
      assertSame(string23, string2);
      assertNotSame(string23, string16);
      assertNotSame(string23, string8);
      assertNotSame(string23, string21);
      assertNotSame(string24, string10);
      assertNotSame(string24, string2);
      assertNotSame(string24, string16);
      assertNotSame(string24, string13);
      assertNotSame(string24, string3);
      assertNotSame(string24, string8);
      assertNotSame(string24, string21);
      assertNotSame(string24, string17);
      assertNotSame(string24, string15);
      assertNotSame(string24, string11);
      assertNotSame(string24, string4);
      assertNotSame(string24, string23);
      assertNotSame(string24, string14);
      assertNotSame(string24, string22);
      assertNotSame(string24, string20);
      assertNotSame(string24, string18);
      assertNotSame(string24, string0);
      assertNotSame(string24, string7);
      assertNotSame(string24, string12);
      assertNotSame(string24, string5);
      assertNotSame(string24, string1);
      assertNotSame(string24, string6);
      assertNotSame(string24, string19);
      assertNotSame(optional1, optional0);
      assertNotSame(string18, string10);
      assertNotSame(string18, string19);
      assertNotSame(string18, string13);
      assertNotSame(string18, string21);
      assertNotSame(string18, string6);
      assertNotSame(string18, string16);
      assertNotSame(string18, string4);
      assertNotSame(string18, string8);
      assertNotSame(string18, string11);
      assertNotSame(string18, string24);
      assertNotSame(string18, string20);
      assertNotSame(string18, string15);
      assertNotSame(string18, string17);
      assertNotSame(string18, string5);
      assertNotSame(string18, string7);
      assertNotSame(string18, string3);
      assertNotSame(string18, string0);
      assertNotSame(string18, string1);
      assertNotSame(string18, string14);
      assertNotSame(string18, string22);
      assertNotSame(string18, string2);
      assertNotSame(string18, string12);
      assertNotSame(string18, string23);
      assertNotSame(string1, string17);
      assertNotSame(string1, string14);
      assertNotSame(string1, string22);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string11);
      assertNotSame(string1, string20);
      assertNotSame(string1, string24);
      assertNotSame(string1, string15);
      assertNotSame(string1, string21);
      assertNotSame(string1, string2);
      assertNotSame(string1, string8);
      assertNotSame(string1, string3);
      assertNotSame(string1, string18);
      assertNotSame(string1, string13);
      assertNotSame(string1, string16);
      assertNotSame(string1, string23);
      assertNotSame(string1, string12);
      assertNotSame(string1, string0);
      assertNotSame(string1, string10);
      assertNotSame(string1, string19);
      assertNotSame(string1, string6);
      assertNotSame(string19, string17);
      assertNotSame(string19, string14);
      assertNotSame(string19, string5);
      assertNotSame(string19, string4);
      assertNotSame(string19, string1);
      assertNotSame(string19, string22);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string0);
      assertNotSame(string19, string16);
      assertNotSame(string19, string6);
      assertNotSame(string19, string11);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string13);
      assertNotSame(string19, string10);
      assertNotSame(string19, string8);
      assertNotSame(string19, string12);
      assertNotSame(string19, string21);
      assertNotSame(string19, string24);
      assertSame(string19, string2);
      assertSame(string19, string23);
      assertNotSame(string19, string3);
      assertNotSame(string3, string7);
      assertNotSame(string3, string14);
      assertNotSame(string3, string22);
      assertNotSame(string3, string4);
      assertNotSame(string3, string17);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string12);
      assertNotSame(string3, string1);
      assertNotSame(string3, string20);
      assertNotSame(string3, string19);
      assertNotSame(string3, string16);
      assertNotSame(string3, string18);
      assertNotSame(string3, string11);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string10);
      assertNotSame(string3, string21);
      assertNotSame(string3, string15);
      assertNotSame(string3, string23);
      assertNotSame(string3, string13);
      assertNotSame(string3, string24);
      assertNotSame(string20, string4);
      assertNotSame(string20, string5);
      assertNotSame(string20, string15);
      assertNotSame(string20, string17);
      assertNotSame(string20, string14);
      assertNotSame(string20, string22);
      assertNotSame(string20, string24);
      assertNotSame(string20, string11);
      assertNotSame(string20, string16);
      assertNotSame(string20, string21);
      assertNotSame(string20, string8);
      assertNotSame(string20, string2);
      assertNotSame(string20, string13);
      assertNotSame(string20, string3);
      assertNotSame(string20, string18);
      assertNotSame(string20, string6);
      assertNotSame(string20, string0);
      assertNotSame(string20, string12);
      assertNotSame(string20, string23);
      assertNotSame(string20, string7);
      assertNotSame(string20, string19);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string21, string3);
      assertNotSame(string21, string2);
      assertNotSame(string21, string8);
      assertNotSame(string21, string23);
      assertNotSame(string21, string11);
      assertNotSame(string21, string10);
      assertNotSame(string21, string20);
      assertNotSame(string21, string19);
      assertNotSame(string21, string6);
      assertNotSame(string21, string16);
      assertNotSame(string21, string5);
      assertNotSame(string21, string18);
      assertNotSame(string21, string1);
      assertNotSame(string21, string0);
      assertNotSame(string21, string12);
      assertNotSame(string21, string14);
      assertNotSame(string21, string22);
      assertNotSame(string21, string4);
      assertNotSame(string21, string7);
      assertNotSame(string21, string15);
      assertNotSame(string21, string24);
      assertNotSame(string21, string13);
      assertNotSame(string21, string17);
      assertNotSame(string22, string24);
      assertNotSame(string22, string11);
      assertNotSame(string22, string5);
      assertNotSame(string22, string1);
      assertNotSame(string22, string17);
      assertNotSame(string22, string12);
      assertNotSame(string22, string7);
      assertNotSame(string22, string0);
      assertNotSame(string22, string3);
      assertNotSame(string22, string23);
      assertNotSame(string22, string14);
      assertNotSame(string22, string15);
      assertNotSame(string22, string13);
      assertNotSame(string22, string10);
      assertNotSame(string22, string2);
      assertNotSame(string22, string8);
      assertNotSame(string22, string19);
      assertNotSame(string22, string6);
      assertNotSame(string22, string21);
      assertNotSame(string22, string16);
      assertNotSame(string22, string18);
      assertNotSame(string22, string4);
      assertNotSame(string22, string20);
      assertNotNull(optional1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Server[] serverArray0 = new Server[7];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(7, serverArray0.length);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      assertNotNull(optional3);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional4);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.links(hashMap0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = null;
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      
      Components components2 = components1.addParameters(string0, parameter0);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = null;
      Components components3 = components2.requestBodies(map1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotNull(components3);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, SecurityScheme> map2 = components3.getSecuritySchemes();
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNull(map2);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.securitySchemes(map2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotNull(components4);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Optional<ApiResponses> optional5 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotNull(optional5);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8, apiResponseArray0.length);
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<io.swagger.oas.models.info.Contact> class1 = io.swagger.oas.models.info.Contact.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      String string0 = "java.langjava.lang.Integer";
      String string1 = "java.langjava.lang.Integer";
      String string2 = "x=";
      String string3 = "; line: ";
      String string4 = "";
      String string5 = "java.langio.swagger.oas.models.servers.Server";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string3, string5).when(info0).termsOfService();
      doReturn(string4).when(info0).title();
      doReturn(string5, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotNull(optional1);
      
      Class<String> class2 = String.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema2).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema2).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string6 = "r~T=ObHE";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl(string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(securityScheme1);
      assertNull(securityScheme0.getName());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getType());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      
      Components components3 = components2.addSecuritySchemes(string6, securityScheme1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getName());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getType());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      
      String string7 = "Qi@kfNa%fN@/";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      
      Components components4 = components2.addRequestBodies(string7, requestBody0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotNull(components4);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components4.getSchemas();
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNull(map1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components5 = components3.schemas(map1);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components5);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getName());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getType());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      String string0 = "Z";
      String string1 = "Sw,&\\g`~{q";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      String string2 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      String string3 = "Uu\"swQ";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false, false).when(parameter0).allowReserved();
      doReturn(arraySchema0, (ArraySchema) null).when(parameter0).array();
      doReturn((Object) contentArray0, (Object) null).when(parameter0).content();
      doReturn(boolean0, false, false).when(parameter0).deprecated();
      doReturn(string2, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode1, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn(string0, (String) null, (String) null).when(parameter0).in();
      doReturn(string3, (String) null, (String) null).when(parameter0).name();
      doReturn(boolean0, false, false).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string2, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[0];
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      
      Map<String, Callback> map1 = components1.getCallbacks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      
      Components components2 = components1.callbacks(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      
      String string4 = "#/components/schemas/";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema1);
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getFormat());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxLength());
      
      Components components3 = components2.addSchemas(string4, arraySchema1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotNull(components3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getFormat());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxLength());
      assertEquals(0, linkArray0.length);
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components2.getRequestBodies();
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNull(map2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      
      Components components4 = components3.requestBodies(map2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotNull(components4);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getFormat());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxLength());
      assertEquals(0, linkArray0.length);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      String string0 = "Y[VL}K~Esut[q3-}d6";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(license0).name();
      doReturn(string0, string0).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = null;
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string2 = "Nw+!vRW\\NfMaorn";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = ": Q+if[w={6";
      String string4 = null;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema1);
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMaxProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getWriteOnly());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)arraySchema1.getProperties();
      assertNull(map0);
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMaxProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getWriteOnly());
      
      String string5 = "Zk";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertNull(map1);
      assertNull(mediaType0.getExample());
      
      Components components1 = components0.examples(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(mediaType0.getExample());
      
      Map<String, Callback> map2 = components1.getCallbacks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map2);
      assertNull(mediaType0.getExample());
      
      Components components2 = components1.callbacks(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(mediaType0.getExample());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components2);
      assertFalse(boolean1 == boolean0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(optional1);
      assertNull(mediaType0.getExample());
      
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components3 = new Components();
      assertTrue(components3.equals((Object)components2));
      assertTrue(components3.equals((Object)components0));
      assertTrue(components3.equals((Object)components1));
      assertNotNull(components3);
      
      String string6 = "#/components/schemas/";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = new io.swagger.oas.models.media.ArraySchema();
      assertTrue(arraySchema2.equals((Object)arraySchema1));
      assertNotNull(arraySchema2);
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMaximum());
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      Class<Parameter> class0 = Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[22];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Operation operation1 = operation0.deprecated(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNotNull(operation1);
      assertNull(operation1.getDescription());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getOperationId());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertFalse(operation0.getDeprecated());
      
      Map<String, Callback> map0 = operation1.getCallbacks();
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNull(map0);
      assertNull(operation1.getDescription());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getOperationId());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertFalse(operation0.getDeprecated());
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(content0, produces0, produces0, components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(optional1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(22, exampleObjectArray0.length);
      
      String[] stringArray0 = new String[2];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(2, stringArray0.length);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string1 = "H&l";
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      Class<Parameter> class0 = Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      String string0 = "java.lang";
      String string1 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string2 = null;
      String string3 = ";";
      String string4 = "io.swagge";
      String string5 = "it3[";
      String string6 = null;
      String string7 = "Multiple back-reference properties with name '";
      String string8 = "java.langio.swagger.oas.models.headers.Header";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string7).when(exampleObject0).externalValue();
      doReturn(string0, string2, string3).when(exampleObject0).name();
      doReturn(string5, string8).when(exampleObject0).summary();
      doReturn(string6).when(exampleObject0).value();
      exampleObjectArray0[1] = exampleObject0;
      String string9 = null;
      String string10 = "java.langio.swagger.oas.models.media.MediaType";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string9, string10).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      License license0 = null;
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(map0);
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      
      Components components4 = components3.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNotNull(components4);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertNotSame(string10, string1);
      assertNotSame(string10, string5);
      assertNotSame(string10, string0);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNotNull(optional0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertEquals(5, exampleObjectArray0.length);
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      String string0 = "java.langio.swagger.oas.models.headers.Header";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "TCU2%h]";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      String string2 = "ey3E,";
      PathItem pathItem0 = new PathItem();
      assertNotNull(pathItem0);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      
      Components components1 = components0.addCallbacks(string1, callback1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.securitySchemes(map0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      
      Map<String, Example> map1 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string3 = "com.fasterxml.jackson.databind.ser.std.NumberSerializer";
      ApiResponse apiResponse1 = apiResponse0.description(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(apiResponse1);
      assertNull(apiResponse1.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse1.getDescription());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNotNull(link1);
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      
      ApiResponse apiResponse2 = apiResponse1.link(string3, link1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(apiResponse2);
      assertNull(apiResponse1.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse1.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(apiResponse2.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse2.getDescription());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Header header0 = null;
      ApiResponse apiResponse3 = apiResponse2.addHeaderObject(string3, header0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(apiResponse3);
      assertNull(apiResponse1.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse1.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(apiResponse2.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse2.getDescription());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Map<String, Header> map2 = apiResponse3.getHeaders();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(map2);
      assertNull(apiResponse1.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse1.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(apiResponse2.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse2.getDescription());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      components0.setHeaders(map2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertNull(apiResponse1.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse1.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(apiResponse2.get$ref());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse2.getDescription());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertEquals("com.fasterxml.jackson.databind.ser.std.NumberSerializer", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string4 = pathItem0.toString();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotNull(string4);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertEquals("class PathItem {\n    summary: null\n    description: null\n    get: null\n    put: null\n    post: null\n    delete: null\n    options: null\n    head: null\n    patch: null\n    trace: null\n    servers: null\n    parameters: null\n    $ref: null\n}", string4);
      
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      assertNotNull(content0);
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.content(content0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNotNull(requestBody1);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      
      MediaType mediaType0 = content0.get(callback0);
      assertSame(callback0, callback1);
      assertNull(mediaType0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      
      Components components3 = components1.addRequestBodies(string2, requestBody1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(requestBody0, requestBody1);
      assertSame(callback1, callback0);
      assertSame(requestBody1, requestBody0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map3 = components2.getRequestBodies();
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(map3);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertEquals(1, map3.size());
      assertFalse(map3.isEmpty());
      
      components3.setRequestBodies(map3);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertEquals(1, map3.size());
      assertFalse(map3.isEmpty());
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(requestBody0, requestBody1);
      assertSame(callback1, callback0);
      assertSame(requestBody1, requestBody0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(optional1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertTrue(content0.isEmpty());
      assertEquals(0, content0.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      String string0 = "J'tf 9r-\".R";
      String string1 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "java.langio.swagger.oas.models.media.ArraySchema";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      
      Components components1 = components0.addSecuritySchemes(string2, securityScheme0);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      Map<String, Header> map1 = link0.getHeaders();
      assertNull(map1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      Components components2 = components1.headers(map1);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string2, apiResponse0);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      
      String string3 = "Can not deserialize a Map.Entry out of empty JSON Object";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      
      Parameter parameter1 = parameter0.addExamples(string3, example0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(parameter1, parameter0);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(parameter1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      
      Map<String, Example> map2 = parameter1.getExamples();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(parameter1, parameter0);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(map2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      
      Components components4 = components3.examples(map2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(parameter1, parameter0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(parameter1, parameter0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertNotNull(optional0);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertEquals(0, parameterArray0.length);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      Content content0 = null;
      String string4 = null;
      String string5 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Link[] linkArray0 = new Link[2];
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link1).description();
      doReturn((String) null, (String) null).when(link1).operationId();
      doReturn((String) null, (String) null).when(link1).operationRef();
      linkArray0[0] = link1;
      linkArray0[1] = linkArray0[0];
      String string6 = "com.fasterxml.jackson.core.JsonProcessingException";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse1 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse1).content();
      doReturn(string4, string2, string2).when(apiResponse1).description();
      doReturn(linkArray0).when(apiResponse1).links();
      doReturn(string6, (String) null).when(apiResponse1).responseCode();
      apiResponseArray0[0] = apiResponse1;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      Server[] serverArray0 = new Server[2];
      String string0 = null;
      String string1 = "Mb";
      String string2 = "was expecting double-quote to start field name";
      String string3 = "java.langio.swagger.oas.models.info.Contact";
      ServerVariable[] serverVariableArray0 = new ServerVariable[9];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      assertNotNull(schema0);
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      MediaType mediaType2 = mediaType1.schema(schema0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(mediaType2.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(optional0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(mediaType2.getExample());
      
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      serverVariableArray0[7] = serverVariableArray0[6];
      serverVariableArray0[8] = serverVariableArray0[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string1).when(server0).description();
      doReturn(string0, string2, string3).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(2, serverArray0.length);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      
      String string4 = "java.langio.swagger.oas.models.media.Content";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      String string0 = "&@|{|n^Z|9;Z kxK";
      String string1 = "tL[A";
      String string2 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(contact0).email();
      doReturn(string0, string1).when(contact0).name();
      doReturn(string1, string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      Content content0 = null;
      String string3 = null;
      String string4 = "#/components/schemas/";
      String string5 = "+7aQ=Z;";
      Link[] linkArray0 = new Link[4];
      String string6 = "^^Q1dLx-";
      String string7 = "4J8y7y>t\"";
      String string8 = "-P=$";
      String string9 = "W8f(r";
      String string10 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string11 = "GDl&a=E";
      String string12 = "java.langjava.lang.Integer";
      String string13 = "f+P[^";
      String string14 = "io.swagger.jaxrs2.OperationParser";
      String string15 = "J5g!";
      String string16 = ",";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string8, string11, string0, string16).when(linkParameters0).expression();
      doReturn(string14, string15, string7, string14, string12).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0, string6, string7, string10).when(link0).description();
      doReturn(string11, string5, string12, string0).when(link0).name();
      doReturn(string0, string1, string3, string8, string13).when(link0).operationId();
      doReturn(string9, string2, string9, string4).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0).when(apiResponse0).content();
      doReturn(string3, string3, string4, string5).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string3).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertNotNull(optional1);
      assertEquals(3, apiResponseArray0.length);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      RequestBody requestBody0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      String string0 = ", static serializer of type ";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      String string1 = "java.langio.swagger.oas.models.parameters.RequestBody";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Components components0 = null;
      Optional<List<Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      assertNotNull(optional2);
      
      String string2 = "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer";
      String string3 = " *kn4N5";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(link0).description();
      doReturn(string2, (String) null).when(link0).operationId();
      doReturn(string3).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(optional3);
      
      io.swagger.oas.annotations.Parameter[] parameterArray1 = new io.swagger.oas.annotations.Parameter[0];
      Components components1 = new Components();
      assertNotNull(components1);
      
      String string4 = "java.langjava.util.Locale$LanguageRange";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema>();
      assertNotNull(schema0);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getName());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinItems());
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNotNull(link1);
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      
      io.swagger.oas.models.links.Link link2 = link1.addHeaderObject(string4, header0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotNull(link2);
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationRef());
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      String string0 = "java.langjava.lang.Integer";
      String string1 = "java.langjava.util.Locale$LanguageRange";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(contact0).email();
      doReturn(string0, string0).when(contact0).name();
      doReturn(string0, string1).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional1);
      
      String string2 = "}>Q:+d?X*a[$\"\\}C";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      String string3 = "java.langjava.lang.Ob+ect";
      stringArray0[0] = string1;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[6];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(6, linkArray0.length);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(6, linkArray0.length);
      
      String string0 = "";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      
      Components components2 = components1.addExamples(string0, example0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertEquals(6, linkArray0.length);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>(apiResponses0);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Components components3 = components2.responses(hashMap0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotNull(components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(6, linkArray0.length);
      
      String string1 = null;
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      
      Components components4 = components3.addSecuritySchemes(string1, securityScheme0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotNull(components4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(6, linkArray0.length);
      
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNotNull(optional0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(6, linkArray0.length);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = false;
      String string0 = "!&`a[H)K";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string1 = "^4+W#$;UxKl";
      String string2 = " $\\N^)`vQ";
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      boolean boolean3 = false;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string3 = "";
      String string4 = null;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string0, string4).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1, string2).when(parameter0).in();
      doReturn(string2, string2).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      String string5 = "_!0`";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      
      Components components2 = components1.addLinks(string5, link0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotNull(components2);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      
      Example example1 = example0.summary(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotNull(example1);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      
      Components components3 = components2.addExamples(string5, example1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotNull(components3);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components4 = components3.callbacks(hashMap0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotNull(components4);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowReserved());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[2];
      String string0 = "(Eu";
      String string1 = "*/*";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      boolean boolean0 = true;
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[7];
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string0 = "@vTOnc:q\\wjV?^D1";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      boolean boolean2 = true;
      Class<io.swagger.oas.models.servers.Server> class0 = io.swagger.oas.models.servers.Server.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string1 = null;
      boolean boolean3 = true;
      String string2 = null;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean3).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string0, string1).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(string0, string1).when(parameter0).in();
      doReturn(string0, string2).when(parameter0).name();
      doReturn(boolean2, boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      String string0 = "Z";
      String string1 = "Sw,&\\g`~{q";
      String string2 = "D>-->mh zY0W%7";
      String string3 = "java.langio.swagger.oas.models.responses.ApiResponses";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(license0).name();
      doReturn(string1, string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = true;
      int int0 = (-33);
      int int1 = Integer.MAX_VALUE;
      int int2 = 10;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, schema0).when(arraySchema0).schema();
      doReturn(boolean1).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = new Content[0];
      String string4 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      String string5 = "Uu\"swQ";
      Class<Parameter> class0 = Parameter.class;
      Class<ApiResponses> class1 = ApiResponses.class;
      Class<OperationParser> class2 = OperationParser.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class0).when(schema2).implementation();
      boolean boolean2 = true;
      boolean boolean3 = true;
      boolean boolean4 = true;
      boolean boolean5 = true;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      boolean boolean6 = true;
      String string6 = "io.swagger.jaxrs2.OperationParser";
      String string7 = "[V";
      String string8 = "#/components/schemas/";
      String string9 = "io.swagge";
      String string10 = "Can not construct AnnotatedMethod with null Method";
      String string11 = "R\\M";
      String string12 = "v&+=L,N)Z:^'";
      String string13 = "%3;UTL";
      boolean boolean7 = false;
      boolean boolean8 = false;
      boolean boolean9 = true;
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema4 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string14 = "#/components/schemas/";
      String string15 = "}BcLPm";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0, boolean2, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean2, boolean4, boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0, boolean3, boolean1).when(parameter0).deprecated();
      doReturn(string4, string4).when(parameter0).description();
      doReturn(explode0, explode1, explode1).when(parameter0).explode();
      doReturn(string0, string8, string9, string10).when(parameter0).in();
      doReturn(string5, string11, string6, string12).when(parameter0).name();
      doReturn(boolean0, boolean7, boolean0, boolean8).when(parameter0).required();
      doReturn(schema2, schema2).when(parameter0).schema();
      doReturn(string4, string5, string3).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[0];
      String string16 = "sourceRef";
      String string17 = "S7|2VL\"umWolSY/yt";
      String string18 = "=[";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string16, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string17, (String) null).when(info0).termsOfService();
      doReturn(string18, (String) null).when(info0).title();
      doReturn(string17, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string18));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string17));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string18));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string12));
      assertNotSame(string16, string0);
      assertNotSame(string16, string5);
      assertNotSame(string16, string8);
      assertNotSame(string16, string18);
      assertNotSame(string16, string7);
      assertNotSame(string16, string15);
      assertNotSame(string16, string2);
      assertNotSame(string16, string10);
      assertNotSame(string16, string17);
      assertNotSame(string16, string9);
      assertNotSame(string16, string12);
      assertNotSame(string16, string3);
      assertNotSame(string16, string14);
      assertNotSame(string16, string13);
      assertNotSame(string16, string11);
      assertNotSame(string16, string1);
      assertNotSame(string16, string6);
      assertNotSame(string17, string0);
      assertNotSame(string17, string5);
      assertNotSame(string17, string8);
      assertNotSame(string17, string16);
      assertNotSame(string17, string1);
      assertNotSame(string17, string2);
      assertNotSame(string17, string6);
      assertNotSame(string17, string13);
      assertNotSame(string17, string7);
      assertNotSame(string17, string11);
      assertNotSame(string17, string10);
      assertNotSame(string17, string14);
      assertNotSame(string17, string15);
      assertNotSame(string17, string9);
      assertNotSame(string17, string12);
      assertNotSame(string17, string18);
      assertNotSame(string17, string3);
      assertNotSame(string18, string9);
      assertNotSame(string18, string2);
      assertNotSame(string18, string14);
      assertNotSame(string18, string16);
      assertNotSame(string18, string6);
      assertNotSame(string18, string17);
      assertNotSame(string18, string7);
      assertNotSame(string18, string13);
      assertNotSame(string18, string0);
      assertNotSame(string18, string5);
      assertNotSame(string18, string1);
      assertNotSame(string18, string11);
      assertNotSame(string18, string3);
      assertNotSame(string18, string10);
      assertNotSame(string18, string8);
      assertNotSame(string18, string15);
      assertNotSame(string18, string12);
      assertNotNull(optional1);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Map<String, Callback> map1 = components1.getCallbacks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Components components2 = components1.callbacks(map1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      String string19 = "#/components/schemas/";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema2);
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getName());
      
      Components components3 = components2.addSchemas(string19, arraySchema2);
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string16));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string19, string10);
      assertNotSame(string19, string17);
      assertNotSame(string19, string12);
      assertNotSame(string19, string11);
      assertNotSame(string19, string15);
      assertNotSame(string19, string3);
      assertNotSame(string19, string18);
      assertSame(string19, string8);
      assertNotSame(string19, string9);
      assertNotSame(string19, string1);
      assertSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string0);
      assertNotSame(string19, string5);
      assertNotSame(string19, string7);
      assertNotSame(string19, string2);
      assertNotSame(string19, string13);
      assertNotSame(string19, string16);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotNull(components3);
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components2.getRequestBodies();
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNull(map2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Components components4 = components3.requestBodies(map2);
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string16));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertNotSame(string19, string10);
      assertNotSame(string19, string17);
      assertNotSame(string19, string12);
      assertNotSame(string19, string11);
      assertNotSame(string19, string15);
      assertNotSame(string19, string3);
      assertNotSame(string19, string18);
      assertSame(string19, string8);
      assertNotSame(string19, string9);
      assertNotSame(string19, string1);
      assertSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string0);
      assertNotSame(string19, string5);
      assertNotSame(string19, string7);
      assertNotSame(string19, string2);
      assertNotSame(string19, string13);
      assertNotSame(string19, string16);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotNull(components4);
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.JAVA.LANGIO.SWAGGER.OAS.MODELS.RESPONSES.APIRESPONSES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      int int0 = 1122;
      Class<Void> class0 = Void.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      Class<ApiResponses> class1 = ApiResponses.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema2).implementation();
      String string0 = "T_>";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema2).when(content0).schema();
      String[] stringArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "no description";
      components0.addExtension(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      
      boolean boolean1 = true;
      Boolean boolean2 = new Boolean(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components0);
      assertNotSame(string0, string1);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Components components2 = components1.addCallbacks(string0, callback0);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotNull(components2);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      boolean boolean3 = components2.equals(optional0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(boolean3);
      
      String string2 = "QiBY";
      io.swagger.oas.models.links.Link link0 = null;
      Components components3 = components2.addLinks(string2, link0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotNull(components3);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Map<String, Example> map0 = null;
      Components components4 = components3.examples(map0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotNull(components4);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "c,~]&I";
      stringArray0[0] = string0;
      String string1 = "N}qXw$G";
      stringArray0[1] = string1;
      String string2 = "no description";
      stringArray0[2] = string2;
      String string3 = "IC.,TJKff):|z0G>fOF";
      stringArray0[3] = string3;
      String string4 = "%w$O";
      stringArray0[4] = string4;
      String string5 = "0sp";
      stringArray0[5] = string5;
      String string6 = "(/b]pnJ+okUDJMxm]^t";
      stringArray0[6] = string6;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.callbacks(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertNotNull(apiResponses1);
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      
      Components components3 = components2.responses(apiResponses1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      
      Map<String, Parameter> map0 = components3.getParameters();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      
      Components components4 = components3.parameters(map0);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(components4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(optional0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      Link[] linkArray0 = new Link[5];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(5, linkArray0.length);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = null;
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      String string1 = "'`V0&@,\\+bg0oO'j={@";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      
      String string2 = null;
      Header header1 = header0.example(string2);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      
      Components components3 = components2.addHeaders(string1, header1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      
      Map<String, Callback> map0 = null;
      Components components4 = components3.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(components4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(optional1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertEquals(0, contentArray0.length);
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema0);
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxLength());
      
      MediaType mediaType1 = mediaType0.schema(arraySchema0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxLength());
      assertNull(mediaType1.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(optional0);
      assertNull(mediaType0.getExample());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxLength());
      assertNull(mediaType1.getExample());
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "O,{y]9l";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string1 = null;
      ApiResponse apiResponse1 = apiResponse0.description(string1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      
      Map<String, Header> map0 = null;
      ApiResponse apiResponse2 = apiResponse1.headers(map0);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotNull(apiResponse2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      
      Components components1 = components0.addResponses(string0, apiResponse2);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(2, linkArray0.length);
      
      String[] stringArray0 = new String[8];
      String string0 = "/Ek6t7";
      stringArray0[0] = string0;
      String string1 = "rWw+ ji,0q";
      stringArray0[1] = string1;
      String string2 = "*p2>laO#9MZ.N['";
      stringArray0[2] = string2;
      String string3 = "&Ed-89S%[ky";
      stringArray0[3] = string3;
      String string4 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      stringArray0[4] = string4;
      String string5 = "]myI8^;";
      stringArray0[5] = string5;
      String string6 = "not a valid Byte value";
      stringArray0[6] = string6;
      String string7 = "";
      stringArray0[7] = string7;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(8, stringArray0.length);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(linkArray0[1]);
      assertNotNull(optional3);
      assertEquals(2, linkArray0.length);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional4);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[1];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "wzDfC:wVoU!pm; ";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components1 = components0.addResponses(string0, apiResponse0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      
      Components components2 = components1.addParameters(string0, parameter1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components3 = components2.headers(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components4 = components3.securitySchemes(hashMap1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(components4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      assertNotNull(schema0);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      String string0 = "";
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      assertSame(callback1, callback0);
      assertSame(callback0, callback1);
      assertNotNull(callback1);
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      
      String string1 = "io.swagger.jaxrs2.OperationParser";
      Callback callback2 = callback1.addPathItem(string1, pathItem0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string1);
      assertNotNull(callback2);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      
      Callback callback3 = callback2.addPathItem(operationParser0.COMPONENTS_REF, pathItem0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string1);
      assertNotNull(callback3);
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      
      Components components2 = components1.addCallbacks(operationParser0.MEDIA_TYPE, callback3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string1);
      assertNotNull(components2);
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Header header1 = header0.allowEmptyValue(boolean1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertFalse(header1.getAllowEmptyValue());
      
      Components components3 = components2.addHeaders(operationParser0.MEDIA_TYPE, header1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string1);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertFalse(header1.getAllowEmptyValue());
      
      Map<String, Callback> map1 = components0.getCallbacks();
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(map1);
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      String string2 = "SecurityScheme type %s not allowed";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      String string3 = "uXSl!Qd";
      Example example1 = example0.summary(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example0, example1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("uXSl!Qd", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("uXSl!Qd", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      
      Example example2 = example1.$ref(string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertNotNull(example2);
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertEquals("uXSl!Qd", example2.getSummary());
      assertEquals("SecurityScheme type %s not allowed", example2.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example0.get$ref());
      assertEquals("uXSl!Qd", example0.getSummary());
      assertNull(example1.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example1.get$ref());
      assertEquals("uXSl!Qd", example1.getSummary());
      assertNull(example1.getExternalValue());
      
      Example example3 = example2.value(operationParser0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(example2, example3);
      assertSame(example3, example2);
      assertSame(example3, example0);
      assertSame(example3, example1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example0, example3);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example1, example3);
      assertNotNull(example3);
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertEquals("uXSl!Qd", example2.getSummary());
      assertEquals("SecurityScheme type %s not allowed", example2.get$ref());
      assertEquals("SecurityScheme type %s not allowed", example3.get$ref());
      assertNull(example3.getExternalValue());
      assertEquals("uXSl!Qd", example3.getSummary());
      assertNull(example3.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example0.get$ref());
      assertEquals("uXSl!Qd", example0.getSummary());
      assertNull(example1.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example1.get$ref());
      assertEquals("uXSl!Qd", example1.getSummary());
      assertNull(example1.getExternalValue());
      
      Example example4 = example3.externalValue(string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(example2, example4);
      assertSame(example2, example3);
      assertSame(example3, example2);
      assertSame(example3, example4);
      assertSame(example3, example0);
      assertSame(example3, example1);
      assertSame(example4, example1);
      assertSame(example4, example2);
      assertSame(example4, example0);
      assertSame(example4, example3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example0, example4);
      assertSame(example0, example3);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example1, example3);
      assertSame(example1, example4);
      assertNotNull(example4);
      assertNull(example2.getDescription());
      assertEquals("io.swagger.jaxrs2.OperationParser", example2.getExternalValue());
      assertEquals("uXSl!Qd", example2.getSummary());
      assertEquals("SecurityScheme type %s not allowed", example2.get$ref());
      assertEquals("io.swagger.jaxrs2.OperationParser", example3.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example3.get$ref());
      assertEquals("uXSl!Qd", example3.getSummary());
      assertNull(example3.getDescription());
      assertEquals("uXSl!Qd", example4.getSummary());
      assertEquals("io.swagger.jaxrs2.OperationParser", example4.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example4.get$ref());
      assertNull(example4.getDescription());
      assertNull(example0.getDescription());
      assertEquals("io.swagger.jaxrs2.OperationParser", example0.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example0.get$ref());
      assertEquals("uXSl!Qd", example0.getSummary());
      assertEquals("io.swagger.jaxrs2.OperationParser", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example1.get$ref());
      assertEquals("uXSl!Qd", example1.getSummary());
      
      Components components4 = components3.addExamples(string2, example4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(example2, example4);
      assertSame(example2, example3);
      assertSame(example3, example2);
      assertSame(example3, example4);
      assertSame(example3, example0);
      assertSame(example3, example1);
      assertSame(example4, example1);
      assertSame(example4, example2);
      assertSame(example4, example0);
      assertSame(example4, example3);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example0, example4);
      assertSame(example0, example3);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example1, example3);
      assertSame(example1, example4);
      assertNotNull(components4);
      assertNull(example2.getDescription());
      assertEquals("io.swagger.jaxrs2.OperationParser", example2.getExternalValue());
      assertEquals("uXSl!Qd", example2.getSummary());
      assertEquals("SecurityScheme type %s not allowed", example2.get$ref());
      assertEquals("io.swagger.jaxrs2.OperationParser", example3.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example3.get$ref());
      assertEquals("uXSl!Qd", example3.getSummary());
      assertNull(example3.getDescription());
      assertEquals("uXSl!Qd", example4.getSummary());
      assertEquals("io.swagger.jaxrs2.OperationParser", example4.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example4.get$ref());
      assertNull(example4.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(example0.getDescription());
      assertEquals("io.swagger.jaxrs2.OperationParser", example0.getExternalValue());
      assertEquals("SecurityScheme type %s not allowed", example0.get$ref());
      assertEquals("uXSl!Qd", example0.getSummary());
      assertEquals("io.swagger.jaxrs2.OperationParser", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("SecurityScheme type %s not allowed", example1.get$ref());
      assertEquals("uXSl!Qd", example1.getSummary());
      
      Components components5 = components3.callbacks(map1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotNull(components5);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertFalse(header1.getAllowEmptyValue());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotNull(optional0);
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(3, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertEquals(3, callback3.size());
      assertFalse(callback3.isEmpty());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertFalse(header1.getAllowEmptyValue());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(6, apiResponseArray0.length);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = null;
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(optional1);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "columnNr";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      
      Components components1 = components0.addSecuritySchemes(string0, securityScheme0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      
      Map<String, Callback> map0 = components1.getCallbacks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      
      Components components2 = components1.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      
      String string1 = null;
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Components components3 = components2.addCallbacks(string1, callback0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SecurityScheme securityScheme1 = hashMap0.put(string1, securityScheme0);
      assertNull(securityScheme1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      
      String string2 = "";
      Boolean boolean0 = Boolean.valueOf(string2);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Header header1 = header0.required(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(header1, header0);
      assertSame(header0, header1);
      assertNotNull(header1);
      assertFalse(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.get$ref());
      assertNull(header1.getDeprecated());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      
      ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string1, header1);
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(header1, header0);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertSame(header0, header1);
      assertNotNull(apiResponse1);
      assertFalse(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.get$ref());
      assertNull(header1.getDeprecated());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      assertNotNull(content0);
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      
      String string3 = "Exponent indicator not followed by a digit";
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(string3, mediaType0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(content0, content1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(content1, content0);
      assertNotNull(content1);
      assertEquals(1, content0.size());
      assertFalse(content0.isEmpty());
      assertNull(mediaType0.getExample());
      assertEquals(1, content1.size());
      assertFalse(content1.isEmpty());
      
      String string4 = "type";
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string4, mediaType0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertSame(content0, content1);
      assertSame(content0, content2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(content1, content0);
      assertSame(content1, content2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(content2, content1);
      assertSame(content2, content0);
      assertNotNull(content2);
      assertEquals(2, content0.size());
      assertFalse(content0.isEmpty());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertEquals(2, content2.size());
      assertFalse(content2.isEmpty());
      
      ApiResponse apiResponse2 = apiResponse1.content(content2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(header0, header1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(header1, header0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(content0, content1);
      assertSame(content0, content2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(content1, content0);
      assertSame(content1, content2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(content2, content1);
      assertSame(content2, content0);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotNull(apiResponse2);
      assertFalse(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.get$ref());
      assertNull(header1.getDeprecated());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(2, content0.size());
      assertFalse(content0.isEmpty());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertEquals(2, content2.size());
      assertFalse(content2.isEmpty());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      
      Components components4 = components2.addResponses(string0, apiResponse2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(header0, header1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(header1, header0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(content0, content1);
      assertSame(content0, content2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(content1, content0);
      assertSame(content1, content2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(content2, content1);
      assertSame(content2, content0);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.get$ref());
      assertNull(header1.getDeprecated());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(2, content0.size());
      assertFalse(content0.isEmpty());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertEquals(2, content2.size());
      assertFalse(content2.isEmpty());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      
      Components components5 = components3.securitySchemes(hashMap0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(components1, components5);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertNotNull(components5);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(components1, components5);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertNotNull(optional1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Content content3 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content3).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(content3, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      String string0 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, (String) null).when(link0).description();
      doReturn(operationParser0.COMMA, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[4];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, SecurityScheme> map0 = null;
      Components components1 = components0.securitySchemes(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Components components2 = components1.addExamples(string0, example0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Map<String, Parameter> map1 = components2.getParameters();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(map1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Components components3 = components2.parameters(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      PathItem pathItem0 = new PathItem();
      assertNotNull(pathItem0);
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      
      Callback callback1 = callback0.addPathItem(string0, pathItem0);
      assertSame(callback1, callback0);
      assertSame(callback0, callback1);
      assertNotNull(callback1);
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      
      String string1 = "com.fasterxml.jackson.databind.exc.PropertyBindingException";
      Callback callback2 = callback1.addPathItem(string1, pathItem0);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotNull(callback2);
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      
      String string2 = "Tf";
      Callback callback3 = callback2.addPathItem(string2, pathItem0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertNotSame(string1, string2);
      assertSame(callback2, callback1);
      assertSame(callback2, callback3);
      assertSame(callback2, callback0);
      assertNotSame(string2, string1);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotNull(callback3);
      assertFalse(callback1.isEmpty());
      assertEquals(3, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(3, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(3, callback3.size());
      assertEquals(3, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      
      String string3 = "#/components/schemas/";
      Callback callback4 = callback3.addPathItem(string3, pathItem0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback3);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(callback3, callback4);
      assertSame(callback3, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback4, callback1);
      assertSame(callback4, callback3);
      assertSame(callback4, callback2);
      assertSame(callback4, callback0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertNotNull(callback4);
      assertFalse(callback1.isEmpty());
      assertEquals(4, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(4, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(4, callback3.size());
      assertEquals(4, callback4.size());
      assertFalse(callback4.isEmpty());
      assertEquals(4, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      
      Components components4 = components3.addCallbacks(string0, callback4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback3);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(callback3, callback1);
      assertSame(callback3, callback2);
      assertSame(callback3, callback4);
      assertSame(callback3, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback4, callback1);
      assertSame(callback4, callback3);
      assertSame(callback4, callback2);
      assertSame(callback4, callback0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotNull(components4);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertEquals(4, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(4, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(4, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(4, callback3.size());
      assertEquals(4, callback4.size());
      assertFalse(callback4.isEmpty());
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      assertSame(optional1, optional0);
      assertNotNull(optional1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      assertNotNull(optional2);
      assertEquals(8, apiResponseArray0.length);
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(0, linkArray0.length);
      
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      assertNotNull(schema0);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      
      Components components1 = components0.addSchemas(string0, schema0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      
      Map<String, Example> map2 = null;
      Components components2 = components1.examples(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      
      String string1 = "o=d";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Example example1 = example0.externalValue(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals("", example1.getExternalValue());
      
      Components components3 = components2.addExamples(string1, example1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(components3);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals("", example1.getExternalValue());
      
      String string2 = "lWqE^Ryc ";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      
      Header header1 = header0.schema(schema0);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      
      String string3 = "!/n)5gR's";
      Boolean boolean0 = Boolean.valueOf(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Header header2 = header1.allowEmptyValue(boolean0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertNotNull(header2);
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getExplode());
      assertNull(header2.getDescription());
      assertNull(header2.getExample());
      assertNull(header2.getStyle());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDeprecated());
      assertNull(header2.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      
      Components components4 = components3.addHeaders(string2, header2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getExplode());
      assertNull(header2.getDescription());
      assertNull(header2.getExample());
      assertNull(header2.getStyle());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDeprecated());
      assertNull(header2.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals("", example1.getExternalValue());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(optional1);
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getRequired());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getExplode());
      assertNull(header2.getDescription());
      assertNull(header2.getExample());
      assertNull(header2.getStyle());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDeprecated());
      assertNull(header2.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals("", example1.getExternalValue());
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[1] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      String string0 = "`R";
      stringArray0[3] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(6, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      assertEquals(3, serverArray0.length);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      assertNotNull(optional2);
      
      String[] stringArray0 = new String[1];
      String string0 = "ZG";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional3 = OperationParser.getTags(stringArray0);
      assertNotNull(optional3);
      assertEquals(1, stringArray0.length);
      
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      assertSame(optional4, optional0);
      assertNotNull(optional4);
      assertEquals(3, serverArray0.length);
      
      Optional<io.swagger.oas.models.servers.Server> optional5 = OperationParser.getServer(serverArray0[1]);
      assertNotNull(optional5);
      assertEquals(3, serverArray0.length);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional6 = OperationParser.getInfo(info0);
      assertNotNull(optional6);
      
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.responses(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components2 = components1.securitySchemes(hashMap1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map2 = components0.getRequestBodies();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map2);
      
      Components components3 = components2.requestBodies(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNotNull(link1);
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      
      ApiResponse apiResponse1 = apiResponse0.link(stringArray0[0], link1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(1, stringArray0.length);
      
      Map<String, io.swagger.oas.models.links.Link> map3 = apiResponse1.getLinks();
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(map3);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(1, map3.size());
      assertFalse(map3.isEmpty());
      assertEquals(1, stringArray0.length);
      
      Components components4 = components3.links(map3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNotNull(components4);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(1, map3.size());
      assertFalse(map3.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema1);
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      
      String string0 = "com.fasterxml.jackson.core.util.DefaultPrettyPrinter";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema1.getType());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getFormat());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema2.getType());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getReadOnly());
      
      MediaType mediaType2 = mediaType1.schema(arraySchema2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema1.getType());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getFormat());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema2.getType());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getReadOnly());
      assertNull(mediaType2.getExample());
      
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(optional1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema1.getType());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getFormat());
      assertEquals("com.fasterxml.jackson.core.util.DefaultPrettyPrinter", arraySchema2.getType());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getReadOnly());
      assertNull(mediaType2.getExample());
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(7, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "";
      OperationParser.DEFAULT_DESCRIPTION = string0;
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "]EQV1VP=0qifbn7Z5B";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      
      Components components1 = components0.addLinks(string1, link0);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components1);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(optional0);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string2 = "#/components/schemas/";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      
      MediaType mediaType1 = mediaType0.addEncoding(string2, encoding0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType2 = mediaType1.encoding(hashMap0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string3 = "java.lang";
      MediaType mediaType3 = mediaType2.example(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(mediaType3);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      MediaType mediaType4 = mediaType3.examples(hashMap1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(mediaType4);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("java.lang", mediaType4.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(optional1);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("java.lang", mediaType4.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Callback> map0 = components0.getCallbacks();
      assertNull(map0);
      
      Components components1 = components0.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components3 = components2.links(hashMap0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      String string1 = "3_8*d@sSEzs";
      PathItem pathItem0 = new PathItem();
      assertNotNull(pathItem0);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      
      List<Parameter> list0 = pathItem0.getParameters();
      assertNull(list0);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      
      PathItem pathItem1 = pathItem0.parameters(list0);
      assertSame(pathItem0, pathItem1);
      assertSame(pathItem1, pathItem0);
      assertNotNull(pathItem1);
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem1.get$ref());
      assertNull(pathItem1.getDescription());
      assertNull(pathItem1.getSummary());
      
      Callback callback1 = callback0.addPathItem(string1, pathItem1);
      assertFalse(string1.equals((Object)string0));
      assertSame(callback1, callback0);
      assertSame(callback0, callback1);
      assertNotSame(string1, string0);
      assertSame(pathItem0, pathItem1);
      assertSame(pathItem1, pathItem0);
      assertNotNull(callback1);
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem1.get$ref());
      assertNull(pathItem1.getDescription());
      assertNull(pathItem1.getSummary());
      
      Callback callback2 = callback1.addPathItem(string1, pathItem0);
      assertFalse(string1.equals((Object)string0));
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string1, string0);
      assertSame(pathItem0, pathItem1);
      assertSame(pathItem1, pathItem0);
      assertNotNull(callback2);
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(1, callback2.size());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem1.get$ref());
      assertNull(pathItem1.getDescription());
      assertNull(pathItem1.getSummary());
      
      Components components4 = components1.addCallbacks(string0, callback2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string0, string1);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string1, string0);
      assertSame(pathItem0, pathItem1);
      assertSame(pathItem1, pathItem0);
      assertNotNull(components4);
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(1, callback2.size());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem1.get$ref());
      assertNull(pathItem1.getDescription());
      assertNull(pathItem1.getSummary());
      
      Components components5 = components3.securitySchemes(hashMap1);
      assertFalse(string0.equals((Object)string1));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components5);
      assertSame(components3, components0);
      assertNotNull(components5);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertFalse(string0.equals((Object)string1));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components5);
      assertSame(components3, components0);
      assertNotNull(optional0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      io.swagger.oas.models.info.Info info0 = new io.swagger.oas.models.info.Info();
      assertNotNull(info0);
      assertNull(info0.getTitle());
      assertNull(info0.getDescription());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      
      String string2 = "KX+4V(o9y[F";
      io.swagger.oas.models.info.Info info1 = info0.title(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(info0, info1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(info1, info0);
      assertNotNull(info1);
      assertNull(info0.getDescription());
      assertEquals("KX+4V(o9y[F", info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info1.getVersion());
      assertEquals("KX+4V(o9y[F", info1.getTitle());
      assertNull(info1.getDescription());
      assertNull(info1.getTermsOfService());
      
      io.swagger.oas.models.info.License license0 = new io.swagger.oas.models.info.License();
      assertNotNull(license0);
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      
      io.swagger.oas.models.info.Info info2 = info1.license(license0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(info0, info1);
      assertSame(info0, info2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertSame(info2, info0);
      assertSame(info2, info1);
      assertNotNull(info2);
      assertNull(info0.getDescription());
      assertEquals("KX+4V(o9y[F", info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info1.getVersion());
      assertEquals("KX+4V(o9y[F", info1.getTitle());
      assertNull(info1.getDescription());
      assertNull(info1.getTermsOfService());
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      assertNull(info2.getVersion());
      assertEquals("KX+4V(o9y[F", info2.getTitle());
      assertNull(info2.getDescription());
      assertNull(info2.getTermsOfService());
      
      String string3 = "";
      io.swagger.oas.models.info.Info info3 = info2.description(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(info0, info1);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertSame(info1, info3);
      assertSame(info2, info0);
      assertSame(info2, info3);
      assertSame(info2, info1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(info3, info1);
      assertSame(info3, info0);
      assertSame(info3, info2);
      assertNotNull(info3);
      assertEquals("", info0.getDescription());
      assertEquals("KX+4V(o9y[F", info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info1.getVersion());
      assertEquals("KX+4V(o9y[F", info1.getTitle());
      assertEquals("", info1.getDescription());
      assertNull(info1.getTermsOfService());
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      assertNull(info2.getVersion());
      assertEquals("KX+4V(o9y[F", info2.getTitle());
      assertEquals("", info2.getDescription());
      assertNull(info2.getTermsOfService());
      assertEquals("", info3.getDescription());
      assertNull(info3.getVersion());
      assertNull(info3.getTermsOfService());
      assertEquals("KX+4V(o9y[F", info3.getTitle());
      
      io.swagger.oas.models.info.Contact contact0 = new io.swagger.oas.models.info.Contact();
      assertNotNull(contact0);
      assertNull(contact0.getName());
      assertNull(contact0.getEmail());
      assertNull(contact0.getUrl());
      
      io.swagger.oas.models.info.Info info4 = info3.contact(contact0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(info0, info1);
      assertSame(info0, info4);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertSame(info1, info3);
      assertSame(info1, info4);
      assertSame(info2, info0);
      assertSame(info2, info4);
      assertSame(info2, info3);
      assertSame(info2, info1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(info3, info1);
      assertSame(info3, info4);
      assertSame(info3, info0);
      assertSame(info3, info2);
      assertSame(info4, info2);
      assertSame(info4, info3);
      assertSame(info4, info1);
      assertSame(info4, info0);
      assertNotNull(info4);
      assertEquals("", info0.getDescription());
      assertEquals("KX+4V(o9y[F", info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info1.getVersion());
      assertEquals("KX+4V(o9y[F", info1.getTitle());
      assertEquals("", info1.getDescription());
      assertNull(info1.getTermsOfService());
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      assertNull(info2.getVersion());
      assertEquals("KX+4V(o9y[F", info2.getTitle());
      assertEquals("", info2.getDescription());
      assertNull(info2.getTermsOfService());
      assertEquals("", info3.getDescription());
      assertNull(info3.getVersion());
      assertNull(info3.getTermsOfService());
      assertEquals("KX+4V(o9y[F", info3.getTitle());
      assertNull(contact0.getName());
      assertNull(contact0.getEmail());
      assertNull(contact0.getUrl());
      assertEquals("", info4.getDescription());
      assertNull(info4.getVersion());
      assertNull(info4.getTermsOfService());
      assertEquals("KX+4V(o9y[F", info4.getTitle());
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      
      SecurityScheme.Type securityScheme_Type0 = SecurityScheme.Type.HTTP;
      SecurityScheme securityScheme1 = securityScheme0.type(securityScheme_Type0);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme0, securityScheme1);
      assertNotNull(securityScheme1);
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme1.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      
      String string4 = "y";
      SecurityScheme securityScheme2 = securityScheme1.scheme(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertNotNull(securityScheme2);
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals("y", securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme1.getType());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("y", securityScheme2.getScheme());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertNull(securityScheme2.getDescription());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme2.getType());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertEquals("y", securityScheme0.getScheme());
      
      SecurityScheme securityScheme3 = securityScheme2.description(string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertSame(securityScheme1, securityScheme3);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(securityScheme2, securityScheme3);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme3, securityScheme2);
      assertSame(securityScheme3, securityScheme0);
      assertSame(securityScheme3, securityScheme1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme3);
      assertSame(securityScheme0, securityScheme2);
      assertNotNull(securityScheme3);
      assertNull(securityScheme1.getName());
      assertEquals("", securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals("y", securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme1.getType());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("y", securityScheme2.getScheme());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertEquals("", securityScheme2.getDescription());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme2.getType());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme3.getBearerFormat());
      assertEquals("y", securityScheme3.getScheme());
      assertNull(securityScheme3.getOpenIdConnectUrl());
      assertNull(securityScheme3.get$ref());
      assertNull(securityScheme3.getName());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme3.getType());
      assertNull(securityScheme3.getIn());
      assertEquals("", securityScheme3.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme0.getType());
      assertEquals("", securityScheme0.getDescription());
      assertEquals("y", securityScheme0.getScheme());
      
      SecurityScheme securityScheme4 = securityScheme3.openIdConnectUrl(string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertSame(securityScheme1, securityScheme3);
      assertSame(securityScheme1, securityScheme4);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(securityScheme2, securityScheme4);
      assertSame(securityScheme2, securityScheme3);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme3, securityScheme2);
      assertSame(securityScheme3, securityScheme0);
      assertSame(securityScheme3, securityScheme4);
      assertSame(securityScheme3, securityScheme1);
      assertSame(securityScheme4, securityScheme0);
      assertSame(securityScheme4, securityScheme1);
      assertSame(securityScheme4, securityScheme3);
      assertSame(securityScheme4, securityScheme2);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme4);
      assertSame(securityScheme0, securityScheme3);
      assertSame(securityScheme0, securityScheme2);
      assertNotNull(securityScheme4);
      assertNull(securityScheme1.getName());
      assertEquals("", securityScheme1.getDescription());
      assertEquals("", securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals("y", securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme1.getType());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("y", securityScheme2.getScheme());
      assertEquals("", securityScheme2.getOpenIdConnectUrl());
      assertEquals("", securityScheme2.getDescription());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme2.getType());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme3.getBearerFormat());
      assertEquals("y", securityScheme3.getScheme());
      assertEquals("", securityScheme3.getOpenIdConnectUrl());
      assertNull(securityScheme3.get$ref());
      assertNull(securityScheme3.getName());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme3.getType());
      assertNull(securityScheme3.getIn());
      assertEquals("", securityScheme3.getDescription());
      assertNull(securityScheme4.getBearerFormat());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme4.getType());
      assertNull(securityScheme4.get$ref());
      assertEquals("", securityScheme4.getOpenIdConnectUrl());
      assertNull(securityScheme4.getName());
      assertNull(securityScheme4.getIn());
      assertEquals("y", securityScheme4.getScheme());
      assertEquals("", securityScheme4.getDescription());
      assertEquals("", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme0.getType());
      assertEquals("", securityScheme0.getDescription());
      assertEquals("y", securityScheme0.getScheme());
      
      SecurityScheme securityScheme5 = hashMap1.getOrDefault(info4, securityScheme4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertSame(securityScheme1, securityScheme3);
      assertSame(securityScheme1, securityScheme4);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme1, securityScheme5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(securityScheme2, securityScheme4);
      assertSame(securityScheme2, securityScheme3);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme5);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme3, securityScheme2);
      assertSame(securityScheme3, securityScheme0);
      assertSame(securityScheme3, securityScheme4);
      assertSame(securityScheme3, securityScheme5);
      assertSame(securityScheme3, securityScheme1);
      assertSame(securityScheme4, securityScheme5);
      assertSame(securityScheme4, securityScheme0);
      assertSame(securityScheme4, securityScheme1);
      assertSame(securityScheme4, securityScheme3);
      assertSame(securityScheme4, securityScheme2);
      assertSame(securityScheme5, securityScheme3);
      assertSame(securityScheme5, securityScheme0);
      assertSame(securityScheme5, securityScheme1);
      assertSame(securityScheme5, securityScheme4);
      assertSame(securityScheme5, securityScheme2);
      assertSame(info0, info1);
      assertSame(info0, info4);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertSame(info1, info3);
      assertSame(info1, info4);
      assertSame(info2, info0);
      assertSame(info2, info4);
      assertSame(info2, info3);
      assertSame(info2, info1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(info3, info1);
      assertSame(info3, info4);
      assertSame(info3, info0);
      assertSame(info3, info2);
      assertSame(info4, info2);
      assertSame(info4, info3);
      assertSame(info4, info1);
      assertSame(info4, info0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme4);
      assertSame(securityScheme0, securityScheme5);
      assertSame(securityScheme0, securityScheme3);
      assertSame(securityScheme0, securityScheme2);
      assertNotNull(securityScheme5);
      assertNull(securityScheme1.getName());
      assertEquals("", securityScheme1.getDescription());
      assertEquals("", securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals("y", securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme1.getType());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("y", securityScheme2.getScheme());
      assertEquals("", securityScheme2.getOpenIdConnectUrl());
      assertEquals("", securityScheme2.getDescription());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme2.getType());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme3.getBearerFormat());
      assertEquals("y", securityScheme3.getScheme());
      assertEquals("", securityScheme3.getOpenIdConnectUrl());
      assertNull(securityScheme3.get$ref());
      assertNull(securityScheme3.getName());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme3.getType());
      assertNull(securityScheme3.getIn());
      assertEquals("", securityScheme3.getDescription());
      assertNull(securityScheme4.getBearerFormat());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme4.getType());
      assertNull(securityScheme4.get$ref());
      assertEquals("", securityScheme4.getOpenIdConnectUrl());
      assertNull(securityScheme4.getName());
      assertNull(securityScheme4.getIn());
      assertEquals("y", securityScheme4.getScheme());
      assertEquals("", securityScheme4.getDescription());
      assertNull(securityScheme5.get$ref());
      assertNull(securityScheme5.getIn());
      assertNull(securityScheme5.getBearerFormat());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme5.getType());
      assertNull(securityScheme5.getName());
      assertEquals("", securityScheme5.getDescription());
      assertEquals("", securityScheme5.getOpenIdConnectUrl());
      assertEquals("y", securityScheme5.getScheme());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals("", info0.getDescription());
      assertEquals("KX+4V(o9y[F", info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info1.getVersion());
      assertEquals("KX+4V(o9y[F", info1.getTitle());
      assertEquals("", info1.getDescription());
      assertNull(info1.getTermsOfService());
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      assertNull(info2.getVersion());
      assertEquals("KX+4V(o9y[F", info2.getTitle());
      assertEquals("", info2.getDescription());
      assertNull(info2.getTermsOfService());
      assertEquals("", info3.getDescription());
      assertNull(info3.getVersion());
      assertNull(info3.getTermsOfService());
      assertEquals("KX+4V(o9y[F", info3.getTitle());
      assertNull(contact0.getName());
      assertNull(contact0.getEmail());
      assertNull(contact0.getUrl());
      assertEquals("", info4.getDescription());
      assertNull(info4.getVersion());
      assertNull(info4.getTermsOfService());
      assertEquals("KX+4V(o9y[F", info4.getTitle());
      assertEquals("", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.HTTP, securityScheme0.getType());
      assertEquals("", securityScheme0.getDescription());
      assertEquals("y", securityScheme0.getScheme());
      
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Callback callback3 = new Callback();
      assertFalse(callback3.equals((Object)callback1));
      assertFalse(callback3.equals((Object)callback0));
      assertFalse(callback3.equals((Object)callback2));
      assertNotNull(callback3);
      assertTrue(callback3.isEmpty());
      assertEquals(0, callback3.size());
      
      Components components6 = components5.addCallbacks(string0, callback3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(callback3.equals((Object)callback1));
      assertFalse(callback3.equals((Object)callback0));
      assertFalse(callback3.equals((Object)callback2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components6);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components6);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components6);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components6);
      assertSame(components2, components5);
      assertSame(components2, components1);
      assertNotSame(callback3, callback1);
      assertNotSame(callback3, callback0);
      assertNotSame(callback3, callback2);
      assertSame(components6, components0);
      assertSame(components6, components3);
      assertSame(components6, components5);
      assertSame(components6, components1);
      assertSame(components6, components4);
      assertSame(components6, components2);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components6);
      assertSame(components3, components0);
      assertNotNull(components6);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertTrue(callback3.isEmpty());
      assertEquals(0, callback3.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces1, produces1, components6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      
      String string0 = "_!0`";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      
      Example example1 = example0.summary(string0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      
      Components components3 = components2.addExamples(string0, example1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.callbacks(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNotNull(components4);
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("_!0`", example0.getSummary());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "#CaOh&c^\"N.MFi";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      
      Components components1 = components0.addHeaders(string0, header0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Components components3 = components2.addCallbacks(string0, callback0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      String string1 = ") as a Bean";
      io.swagger.oas.models.parameters.RequestBody requestBody1 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody1);
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.$ref(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertNotNull(requestBody2);
      assertNull(requestBody1.getDescription());
      assertEquals(") as a Bean", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals(") as a Bean", requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.getRequired());
      
      Components components4 = components3.addRequestBodies(string1, requestBody2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotSame(string1, string0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(requestBody1.getDescription());
      assertEquals(") as a Bean", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals(") as a Bean", requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.getRequired());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotSame(string1, string0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(optional1);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(requestBody1.getDescription());
      assertEquals(") as a Bean", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals(") as a Bean", requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.getRequired());
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(0, stringArray0.length);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      assertNotNull(optional2);
      
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      Link[] linkArray0 = new Link[9];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(9, linkArray0.length);
      
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(linkArray0[7]);
      assertNotNull(optional0);
      assertEquals(9, linkArray0.length);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "java.lang";
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      String string1 = "java.lang";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components2 = components1.addResponses(string1, apiResponse0);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(string0, string1);
      assertNotNull(components2);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components1.getRequestBodies();
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(string0, string1);
      assertNull(map1);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      Components components3 = components2.requestBodies(map1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(string0, string1);
      assertNotNull(components3);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components4 = components3.examples(hashMap0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(string0, string1);
      assertNotNull(components4);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Optional<List<Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(string0, string1);
      assertNotNull(optional1);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, parameterArray0.length);
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(3, serverArray0.length);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[3];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "io.swagger.oas.models.headers.Header$StyleEnum";
      Header header0 = null;
      Components components1 = components0.addHeaders(string0, header0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(optional3);
      assertEquals(3, apiResponseArray0.length);
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components0);
      assertNotNull(optional0);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(6, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[2];
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "atBVc%R-5";
      Map<String, Callback> map0 = components0.getCallbacks();
      assertNull(map0);
      
      Components components1 = components0.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      io.swagger.oas.models.links.Link link0 = null;
      Components components2 = components0.addLinks(string0, link0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string0, apiResponse0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.securitySchemes(hashMap0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.PIPEDELIMITED;
      Parameter parameter2 = parameter1.style(parameter_StyleEnum0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getName());
      
      String string1 = "|cq^.+|YL&\"";
      Boolean boolean0 = Boolean.valueOf(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Parameter parameter3 = parameter2.allowEmptyValue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertNotSame(string1, string0);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertNotNull(parameter3);
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter2.getStyle());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getName());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getExplode());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getName());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter3.getStyle());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getAllowReserved());
      
      Components components5 = components4.addParameters(string0, parameter3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertNotSame(string0, string1);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertNotSame(string1, string0);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertNotNull(components5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter2.getStyle());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getName());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getExplode());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getName());
      assertEquals(Parameter.StyleEnum.PIPEDELIMITED, parameter3.getStyle());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getAllowReserved());
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(0, serverArray0.length);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "no description";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(contact0).name();
      doReturn(operationParser0.COMMA, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact0);
      assertNotNull(optional3);
      
      String string1 = "y}H]-L*p%:%#t1sU8{;";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(optional4);
      
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      assertSame(optional5, optional0);
      assertNotNull(optional5);
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "N[M";
      String string1 = "*/*";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      String string0 = "io.swagger.oas.models.examples.Example";
      String string1 = "g`*9 =.o";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean1 = false;
      String string2 = "*Yi|n@a(4w>R`xub.";
      Explode explode0 = Explode.FALSE;
      String string3 = ";&gQ";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string4 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      
      Components components2 = components1.addSecuritySchemes(string4, securityScheme0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components2);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      
      String string5 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      
      Components components3 = components2.addExamples(string5, example0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotNull(components3);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Boolean boolean3 = new Boolean(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Encoding encoding1 = encoding0.allowReserved(boolean3);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      
      Map<String, Header> map1 = encoding1.getHeaders();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(map1);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      
      Components components4 = components3.headers(map1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotNull(components4);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      int int0 = 6;
      int int1 = 73;
      int int2 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int1, int2).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      Link[] linkArray0 = new Link[8];
      String string0 = "3Y:S9;:I1 Jr.";
      String string1 = "com.fasterxml.jackson.databind.PropertyName";
      String string2 = "hf";
      String string3 = "";
      String string4 = "(X`O,L!";
      String string5 = "bnFfq^eA";
      String string6 = "P_>7J0;";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string0, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string3, string3, string4, string5).when(link0).operationId();
      doReturn(string5, string5, string6, string1, string5).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(8, linkArray0.length);
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      String string0 = "";
      String string1 = "d?W>jm#o!WxX4:HqkB";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string2 = "6~`@$c";
      String string3 = "";
      String string4 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(link0).description();
      doReturn(string3).when(link0).operationId();
      doReturn(string4).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotNull(optional1);
      
      String string5 = "K![_h=uvn\"\"nt[?8Sc";
      String string6 = "FWhk/#{\\-/N5r<";
      String string7 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string5, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string6, (String) null).when(info0).termsOfService();
      doReturn(string7).when(info0).title();
      doReturn(string4).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotSame(string5, string2);
      assertNotSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotNull(optional2);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(0, stringArray0.length);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      String string0 = null;
      String string1 = "Q78g?HWc0!u;";
      String string2 = "\\<}G}~x:bfpP=:M]_";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string2).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotNull(optional2);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string3 = "ku~>*=}}p8_bL!7eOt";
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string1, (String) null).when(parameter0).description();
      doReturn(string3, (String) null).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(string2, (String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      Server[] serverArray0 = new Server[7];
      String string0 = "";
      String string1 = "6>9EN";
      String string2 = "O|_o\"^o`H,d";
      String string3 = "4d94_V8HIXGhDtR3'";
      String string4 = "";
      String string5 = "=o|-,";
      String string6 = "io.swagger.oas.models.security.SecurityScheme";
      String string7 = null;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(server0).description();
      doReturn(string4, string5, string6).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      String string0 = ")l~mUH~Y}XiV5q";
      String string1 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string0, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Content content1 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      String string3 = "";
      String string4 = "";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string2).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.headers(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string5 = "#/components/schemas/";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      
      Components components2 = components1.addExamples(string5, example0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info>();
      assertNotNull(schema0);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      
      Components components3 = components2.addSchemas(string5, schema0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      
      ApiResponse apiResponse1 = new ApiResponse();
      assertNotNull(apiResponse1);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      
      Components components4 = components3.addResponses(string5, apiResponse1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(components4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string0 = "_i0Sl^7OP(FA]!'";
      String string1 = null;
      String string2 = "pEF) t8>.Va 4gwQV";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "";
      boolean boolean0 = components0.equals(operationParser0.MEDIA_TYPE);
      assertFalse(boolean0);
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      
      Header header1 = header0.$ref(operationParser0.DEFAULT_DESCRIPTION);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertEquals("no description", header0.get$ref());
      assertNull(header0.getDeprecated());
      assertEquals("no description", header1.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDeprecated());
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Header header2 = header1.allowEmptyValue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertSame(header2, header1);
      assertSame(header2, header0);
      assertNotNull(header2);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertEquals("no description", header0.get$ref());
      assertNull(header0.getDeprecated());
      assertEquals("no description", header1.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDeprecated());
      assertNull(header2.getExplode());
      assertNull(header2.getStyle());
      assertNull(header2.getExample());
      assertEquals("no description", header2.get$ref());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDescription());
      
      boolean boolean2 = header2.equals(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2 == boolean0);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertSame(header2, header1);
      assertSame(header2, header0);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertEquals("no description", header0.get$ref());
      assertNull(header0.getDeprecated());
      assertEquals("no description", header1.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDeprecated());
      assertNull(header2.getExplode());
      assertNull(header2.getStyle());
      assertNull(header2.getExample());
      assertEquals("no description", header2.get$ref());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDescription());
      assertFalse(boolean2);
      
      Components components1 = components0.addHeaders(string3, header2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertSame(header2, header1);
      assertSame(header2, header0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(components1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertEquals("no description", header0.get$ref());
      assertNull(header0.getDeprecated());
      assertEquals("no description", header1.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertFalse(header1.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDeprecated());
      assertNull(header2.getExplode());
      assertNull(header2.getStyle());
      assertNull(header2.getExample());
      assertEquals("no description", header2.get$ref());
      assertFalse(header2.getAllowEmptyValue());
      assertNull(header2.getDescription());
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      String string0 = "^aF8CgbGW";
      String string1 = "[[19_jUEc3^";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      String string2 = null;
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string2).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "*/*";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      
      io.swagger.oas.models.media.Content content0 = null;
      Header header1 = header0.content(content0);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header1.getExample());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      
      String string4 = "";
      Header header2 = header1.example(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertNotNull(header2);
      assertNull(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertEquals("", header1.getExample());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertNull(header2.getExplode());
      assertEquals("", header2.getExample());
      assertNull(header2.getStyle());
      assertNull(header2.getDeprecated());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.ArraySchema>();
      assertNotNull(schema0);
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      
      Boolean boolean1 = schema0.getDeprecated();
      assertNull(boolean1);
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      
      Header header3 = header2.allowEmptyValue(boolean1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(header3, header0);
      assertSame(header3, header1);
      assertSame(header3, header2);
      assertSame(header0, header2);
      assertSame(header0, header3);
      assertSame(header0, header1);
      assertSame(header1, header3);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(header2, header3);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertNotNull(header3);
      assertNull(header3.getDeprecated());
      assertEquals("", header3.getExample());
      assertNull(header3.getExplode());
      assertNull(header3.get$ref());
      assertNull(header3.getDescription());
      assertNull(header3.getAllowEmptyValue());
      assertNull(header3.getRequired());
      assertNull(header3.getStyle());
      assertNull(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertEquals("", header1.getExample());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getDeprecated());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertNull(header2.getExplode());
      assertEquals("", header2.getExample());
      assertNull(header2.getStyle());
      assertNull(header2.getDeprecated());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      
      Header.StyleEnum header_StyleEnum0 = Header.StyleEnum.SIMPLE;
      Header header4 = header3.style(header_StyleEnum0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(header3, header4);
      assertSame(header3, header0);
      assertSame(header3, header1);
      assertSame(header3, header2);
      assertSame(header4, header2);
      assertSame(header4, header1);
      assertSame(header4, header3);
      assertSame(header4, header0);
      assertSame(header0, header2);
      assertSame(header0, header3);
      assertSame(header0, header4);
      assertSame(header0, header1);
      assertSame(header1, header3);
      assertSame(header1, header4);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(header2, header3);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(header2, header4);
      assertNotNull(header4);
      assertEquals(Header.StyleEnum.SIMPLE, header3.getStyle());
      assertNull(header3.getDeprecated());
      assertEquals("", header3.getExample());
      assertNull(header3.getExplode());
      assertNull(header3.get$ref());
      assertNull(header3.getDescription());
      assertNull(header3.getAllowEmptyValue());
      assertNull(header3.getRequired());
      assertNull(header4.getDeprecated());
      assertNull(header4.getExplode());
      assertNull(header4.getAllowEmptyValue());
      assertNull(header4.getRequired());
      assertNull(header4.getDescription());
      assertNull(header4.get$ref());
      assertEquals(Header.StyleEnum.SIMPLE, header4.getStyle());
      assertEquals("", header4.getExample());
      assertEquals(Header.StyleEnum.SIMPLE, header0.getStyle());
      assertNull(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertEquals("", header1.getExample());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertEquals(Header.StyleEnum.SIMPLE, header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertNull(header2.getExplode());
      assertEquals("", header2.getExample());
      assertNull(header2.getDeprecated());
      assertEquals(Header.StyleEnum.SIMPLE, header2.getStyle());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      
      Components components1 = components0.addHeaders(string3, header4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(header3, header4);
      assertSame(header3, header0);
      assertSame(header3, header1);
      assertSame(header3, header2);
      assertSame(header4, header2);
      assertSame(header4, header1);
      assertSame(header4, header3);
      assertSame(header4, header0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(header0, header2);
      assertSame(header0, header3);
      assertSame(header0, header4);
      assertSame(header0, header1);
      assertSame(header1, header3);
      assertSame(header1, header4);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(header2, header3);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(header2, header4);
      assertNotNull(components1);
      assertEquals(Header.StyleEnum.SIMPLE, header3.getStyle());
      assertNull(header3.getDeprecated());
      assertEquals("", header3.getExample());
      assertNull(header3.getExplode());
      assertNull(header3.get$ref());
      assertNull(header3.getDescription());
      assertNull(header3.getAllowEmptyValue());
      assertNull(header3.getRequired());
      assertNull(header4.getDeprecated());
      assertNull(header4.getExplode());
      assertNull(header4.getAllowEmptyValue());
      assertNull(header4.getRequired());
      assertNull(header4.getDescription());
      assertNull(header4.get$ref());
      assertEquals(Header.StyleEnum.SIMPLE, header4.getStyle());
      assertEquals("", header4.getExample());
      assertEquals(Header.StyleEnum.SIMPLE, header0.getStyle());
      assertNull(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertEquals("", header1.getExample());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertEquals(Header.StyleEnum.SIMPLE, header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertNull(header2.getExplode());
      assertEquals("", header2.getExample());
      assertNull(header2.getDeprecated());
      assertEquals(Header.StyleEnum.SIMPLE, header2.getStyle());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      assertSame(components0, components1);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      String string0 = "-ffSV[d9tb<";
      String string1 = "x&";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = false;
      String string0 = "!&`a[H)K";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string1 = "^4+W#$;UxKl";
      String string2 = " $\\N^)`vQ";
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      boolean boolean3 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string3 = "";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      
      String string4 = "_!0`";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      
      Components components2 = components1.addLinks(string4, link0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      
      Example example1 = example0.summary(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.getExternalValue());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example1.get$ref());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      
      Components components3 = components2.addExamples(string4, example1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(example0.getExternalValue());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example1.get$ref());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.callbacks(hashMap0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(example0.getExternalValue());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example1.get$ref());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      Content[] contentArray0 = new Content[9];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[2] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = ")ae!urr^6\"r1sY";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.callbacks(hashMap0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      Components components3 = components2.addLinks(string1, link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string1, string0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotNull(components3);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      String string2 = "java.lang";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Components components4 = components3.addCallbacks(string2, callback0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotNull(components4);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      String string0 = "\"KFMBh$`";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      String string2 = "S02Z8v\"Vq";
      boolean boolean0 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string2, (String) null).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string3 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      Components components2 = components1.addSecuritySchemes(string3, securityScheme0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components3 = components2.securitySchemes(hashMap0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string4 = "=POX2";
      SecurityScheme.Type securityScheme_Type0 = SecurityScheme.Type.OPENIDCONNECT;
      SecurityScheme securityScheme1 = securityScheme0.type(securityScheme_Type0);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme0, securityScheme1);
      assertNotNull(securityScheme1);
      assertNull(securityScheme1.getName());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme1.getType());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      io.swagger.oas.models.links.Link link0 = null;
      components2.setSecuritySchemes(hashMap0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components4 = components3.addLinks(string4, link0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotNull(components4);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, Callback> map1 = components3.getCallbacks();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNull(map1);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(boolean1);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Parameter parameter1 = parameter0.explode(boolean2);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertNotNull(parameter1);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getIn());
      assertTrue(parameter0.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getExplode());
      
      Parameter parameter2 = parameter1.$ref(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotNull(parameter2);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertEquals("=POX2", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getIn());
      assertTrue(parameter0.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("=POX2", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getExplode());
      assertNull(parameter2.getIn());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getDescription());
      assertEquals("=POX2", parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNotNull(schema0);
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      Boolean boolean3 = schema0.getUniqueItems();
      assertNull(boolean3);
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      Parameter parameter3 = parameter2.deprecated(boolean3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotNull(parameter3);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertEquals("=POX2", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getIn());
      assertTrue(parameter0.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("=POX2", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getExplode());
      assertNull(parameter2.getIn());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getDescription());
      assertEquals("=POX2", parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertTrue(parameter3.getExplode());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getName());
      assertNull(parameter3.getDescription());
      assertEquals("=POX2", parameter3.get$ref());
      assertNull(parameter3.getAllowEmptyValue());
      
      String string5 = "?#s&?.~Q";
      Parameter parameter4 = parameter3.description(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertSame(parameter0, parameter4);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter4);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter4);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter4);
      assertSame(parameter3, parameter1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertSame(parameter4, parameter0);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter3);
      assertSame(parameter4, parameter2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotNull(parameter4);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertEquals("=POX2", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertEquals("?#s&?.~Q", parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertTrue(parameter0.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("=POX2", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertEquals("?#s&?.~Q", parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getExplode());
      assertNull(parameter2.getIn());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertEquals("=POX2", parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertEquals("?#s&?.~Q", parameter2.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertEquals("?#s&?.~Q", parameter3.getDescription());
      assertTrue(parameter3.getExplode());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getName());
      assertEquals("=POX2", parameter3.get$ref());
      assertNull(parameter3.getAllowEmptyValue());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.getAllowEmptyValue());
      assertEquals("=POX2", parameter4.get$ref());
      assertNull(parameter4.getStyle());
      assertNull(parameter4.getRequired());
      assertNull(parameter4.getIn());
      assertNull(parameter4.getName());
      assertNull(parameter4.getExample());
      assertEquals("?#s&?.~Q", parameter4.getDescription());
      assertNull(parameter4.getDeprecated());
      assertTrue(parameter4.getExplode());
      
      Components components5 = components3.addParameters(string4, parameter4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(parameter0, parameter4);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter4);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter4);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter4);
      assertSame(parameter3, parameter1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertSame(parameter4, parameter0);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter3);
      assertSame(parameter4, parameter2);
      assertNotNull(components5);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertEquals("=POX2", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertEquals("?#s&?.~Q", parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertTrue(parameter0.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("=POX2", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertEquals("?#s&?.~Q", parameter1.getDescription());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getExplode());
      assertNull(parameter2.getIn());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertEquals("=POX2", parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertEquals("?#s&?.~Q", parameter2.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertEquals("?#s&?.~Q", parameter3.getDescription());
      assertTrue(parameter3.getExplode());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getName());
      assertEquals("=POX2", parameter3.get$ref());
      assertNull(parameter3.getAllowEmptyValue());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.getAllowEmptyValue());
      assertEquals("=POX2", parameter4.get$ref());
      assertNull(parameter4.getStyle());
      assertNull(parameter4.getRequired());
      assertNull(parameter4.getIn());
      assertNull(parameter4.getName());
      assertNull(parameter4.getExample());
      assertEquals("?#s&?.~Q", parameter4.getDescription());
      assertNull(parameter4.getDeprecated());
      assertTrue(parameter4.getExplode());
      
      Components components6 = components4.callbacks(map1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertSame(components6, components3);
      assertSame(components6, components1);
      assertSame(components6, components2);
      assertSame(components6, components5);
      assertSame(components6, components0);
      assertSame(components6, components4);
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components6);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components6);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components6);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components6);
      assertSame(components3, components1);
      assertSame(components3, components6);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotNull(components6);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components6);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components6);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components6);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(securityScheme0, securityScheme1);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components6);
      assertSame(components3, components1);
      assertSame(components3, components6);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotNull(optional1);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getDescription());
      assertEquals(SecurityScheme.Type.OPENIDCONNECT, securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      MediaType mediaType0 = null;
      String string0 = "no description";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "";
      OperationParser.DEFAULT_DESCRIPTION = string0;
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "]EQV1VP=0qifbn7Z5B";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Components components1 = components0.addLinks(string1, link0);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components1);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(optional0);
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string2 = "#/components/schemas/";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      MediaType mediaType1 = mediaType0.addEncoding(string2, encoding0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType2 = mediaType1.encoding(hashMap0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string3 = "java.lang";
      MediaType mediaType3 = mediaType2.example(string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(mediaType3);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      MediaType mediaType4 = mediaType3.examples(hashMap1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(mediaType4);
      assertEquals("java.lang", mediaType3.getExample());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("java.lang", mediaType4.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      String string4 = "L*1";
      MediaType mediaType5 = mediaType1.addEncoding(operationParser0.COMMA, encoding0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType5, mediaType1);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType5);
      assertNotNull(mediaType5);
      assertEquals("java.lang", mediaType5.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals("java.lang", mediaType1.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType5);
      assertSame(mediaType4, mediaType5);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotNull(optional1);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals("java.lang", mediaType4.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      Server[] serverArray0 = new Server[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(6, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      String string0 = "?p{eK=TJUFB$<Zs+6a";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = false;
      String string1 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "~:cG-fy:H/";
      int int0 = 6;
      int int1 = 1783;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[0], (String) null).when(schema0).description();
      doReturn(string0, string1, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[0]).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(string1).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[0], (String) null).when(schema0).ref();
      doReturn(string0, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      String string0 = "sSrEk+|'";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      boolean boolean0 = false;
      String string1 = ") out of range of Java short";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 25;
      String string2 = "*$BHI/],!E~_?`,^z?{";
      String string3 = "E?i8z(+o";
      String string4 = "W)LWuU<z2/2~dW";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(stringArray0[1], string0, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string1).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string4, (String) null).when(schema0).ref();
      doReturn(stringArray0[0], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotNull(optional0);
      assertEquals(2, stringArray0.length);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      
      String string5 = "class Content {\n";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string5, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      String string0 = "overflow, value can not be represented as 8-bit value";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string1 = "";
      String string2 = ",";
      boolean boolean0 = true;
      String string3 = "BB!)#5b";
      int int0 = 1024;
      int int1 = 1;
      String string4 = "";
      String string5 = " :#fo\"";
      boolean boolean1 = false;
      String string6 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(externalDocumentation0).description();
      doReturn(string3, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string7 = "dJ";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      
      Components components1 = components0.addExamples(string7, example0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertSame(components0, components1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.responses(hashMap0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema0);
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNotNull(schema0);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertNotNull(arraySchema1);
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      
      Components components4 = components3.addSchemas(string7, arraySchema1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Operation operation1 = operation0.deprecated(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNotNull(operation1);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertFalse(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      
      Map<String, Callback> map0 = operation1.getCallbacks();
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(map0);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertFalse(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      
      Components components4 = components3.callbacks(map0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertNotNull(components4);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertFalse(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Link[] linkArray0 = new Link[3];
      String string0 = "dqb9CDV}%i\"G=hCZ";
      String string1 = "";
      String string2 = "}6n|KEA!PL.";
      String string3 = "3g^ im+H_b|S";
      String string4 = "";
      String string5 = "com.fasterxml.jackson.databind.deser.DeserializerFactory";
      String string6 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string2, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string3, string4, operationParser0.COMPONENTS_REF, (String) null, (String) null).when(link0).operationId();
      doReturn(string5, operationParser0.COMMA, string6).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(3, linkArray0.length);
      
      String string7 = "rh>z.wR tV${E";
      OperationParser.DEFAULT_DESCRIPTION = string7;
      Link[] linkArray1 = new Link[9];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string8 = "";
      String string9 = " / 0x";
      String string10 = "0M1Co0% _WC|< ";
      String string11 = "(?: |\\u00A0|\\s|[\\s&&[^ ]])\\s*";
      String string12 = "{d0+1$Rp=IZM_";
      String string13 = "s7=\\E$fb_F";
      String string14 = "java.lang";
      String string15 = "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s";
      String string16 = "H!APcHB #U[nZhB";
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string8, OperationParser.DEFAULT_DESCRIPTION, string9, string8, string10).when(link1).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link1).name();
      doReturn(string0, string11, string10, string12, string13).when(link1).operationId();
      doReturn(string14, string15, string8, string16, string13).when(link1).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link1).parameters();
      linkArray1[0] = link1;
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      linkArray1[8] = linkArray1[7];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray1);
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertFalse(map1.equals((Object)map0));
      assertNotSame(linkArray1, linkArray0);
      assertNotSame(map1, map0);
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertEquals(9, linkArray1.length);
      
      String string17 = "ly,I`s:W#92";
      String string18 = "";
      String string19 = "hL[4-|{8uYk$=$ofI\"Y";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string17, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string7, (String) null).when(info0).termsOfService();
      doReturn(string18).when(info0).title();
      doReturn(string19, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string19));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string18));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string19));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string10));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string18));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string16));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string17));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string19));
      assertNotSame(string17, string10);
      assertNotSame(string17, string16);
      assertNotSame(string17, string7);
      assertNotSame(string17, string6);
      assertNotSame(string17, string5);
      assertNotSame(string17, string14);
      assertNotSame(string17, string19);
      assertNotSame(string17, string12);
      assertNotSame(string17, string2);
      assertNotSame(string17, string15);
      assertNotSame(string17, string11);
      assertNotSame(string17, string4);
      assertNotSame(string17, string3);
      assertNotSame(string17, string8);
      assertNotSame(string17, string1);
      assertNotSame(string17, string18);
      assertNotSame(string17, string9);
      assertNotSame(string17, string13);
      assertNotSame(string17, string0);
      assertNotSame(string18, string11);
      assertNotSame(string18, string9);
      assertNotSame(string18, string0);
      assertNotSame(string18, string2);
      assertSame(string18, string4);
      assertNotSame(string18, string14);
      assertNotSame(string18, string7);
      assertNotSame(string18, string17);
      assertNotSame(string18, string15);
      assertNotSame(string18, string16);
      assertNotSame(string18, string5);
      assertNotSame(string18, string13);
      assertNotSame(string18, string12);
      assertSame(string18, string6);
      assertSame(string18, string1);
      assertNotSame(string18, string19);
      assertNotSame(string18, string3);
      assertNotSame(string18, string10);
      assertSame(string18, string8);
      assertNotSame(string19, string11);
      assertNotSame(string19, string8);
      assertNotSame(string19, string18);
      assertNotSame(string19, string0);
      assertNotSame(string19, string2);
      assertNotSame(string19, string15);
      assertNotSame(string19, string9);
      assertNotSame(string19, string16);
      assertNotSame(string19, string14);
      assertNotSame(string19, string4);
      assertNotSame(string19, string5);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string17);
      assertNotSame(string19, string12);
      assertNotSame(string19, string1);
      assertNotSame(string19, string6);
      assertNotSame(string19, string10);
      assertNotSame(string19, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string11);
      assertNotSame(string7, string2);
      assertNotSame(string7, string13);
      assertNotSame(string7, string14);
      assertNotSame(string7, string18);
      assertNotSame(string7, string9);
      assertNotSame(string7, string16);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string15);
      assertNotSame(string7, string10);
      assertNotSame(string7, string12);
      assertNotSame(string7, string17);
      assertNotSame(string7, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string19);
      assertNotNull(optional0);
      
      String string20 = "=0 q `op\\r~";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation0).description();
      doReturn(string20, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string14));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string15));
      assertFalse(string5.equals((Object)string20));
      assertFalse(string5.equals((Object)string13));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string16));
      assertFalse(string5.equals((Object)string17));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string19));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string18));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string8));
      assertNotSame(string5, string8);
      assertNotSame(string5, string3);
      assertNotSame(string5, string14);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string15);
      assertNotSame(string5, string20);
      assertNotSame(string5, string13);
      assertNotSame(string5, string10);
      assertNotSame(string5, string16);
      assertNotSame(string5, string17);
      assertNotSame(string5, string12);
      assertNotSame(string5, string19);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string9);
      assertNotSame(string5, string18);
      assertNotSame(string5, string11);
      assertNotSame(string20, string0);
      assertNotSame(string20, string1);
      assertNotSame(string20, string11);
      assertNotSame(string20, string2);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string5);
      assertNotSame(string20, string4);
      assertNotSame(string20, string9);
      assertNotSame(string20, string18);
      assertNotSame(string20, string14);
      assertNotSame(string20, string15);
      assertNotSame(string20, string7);
      assertNotSame(string20, string3);
      assertNotSame(string20, string10);
      assertNotSame(string20, string6);
      assertNotSame(string20, string19);
      assertNotSame(string20, string17);
      assertNotSame(string20, string12);
      assertNotSame(string20, string8);
      assertNotNull(optional1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[1] = OperationParser.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.MEDIA_TYPE;
      stringArray0[3] = operationParser0.COMPONENTS_REF;
      stringArray0[4] = string7;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(6, stringArray0.length);
      
      String string21 = "class Contact {\n";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(license0).name();
      doReturn(string21, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string3));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string16));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string13));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string10));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string8));
      assertNotSame(string21, string14);
      assertNotSame(string21, string11);
      assertNotSame(string21, string3);
      assertNotSame(string21, string5);
      assertNotSame(string21, string4);
      assertNotSame(string21, string16);
      assertNotSame(string21, string18);
      assertNotSame(string21, string0);
      assertNotSame(string21, string9);
      assertNotSame(string21, string13);
      assertNotSame(string21, string19);
      assertNotSame(string21, string20);
      assertNotSame(string21, string1);
      assertNotSame(string21, string10);
      assertNotSame(string21, string2);
      assertNotSame(string21, string7);
      assertNotSame(string21, string6);
      assertNotSame(string21, string15);
      assertNotSame(string21, string17);
      assertNotSame(string21, string12);
      assertNotSame(string21, string8);
      assertNotNull(optional3);
      assertEquals(6, stringArray0.length);
      
      License license1 = null;
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license1);
      assertFalse(optional4.equals((Object)optional3));
      assertNotSame(optional4, optional3);
      assertNotNull(optional4);
      
      int int0 = (-433);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean1 = true;
      String string0 = "";
      Explode explode0 = Explode.TRUE;
      String string1 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "&gjCwDm";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(string0).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string2, (String) null).when(parameter0).style();
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "O,{y]9l";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string4 = null;
      ApiResponse apiResponse1 = apiResponse0.description(string4);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(apiResponse1);
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Map<String, Header> map1 = null;
      ApiResponse apiResponse2 = apiResponse1.headers(map1);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(apiResponse2);
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components1 = components0.addResponses(string3, apiResponse2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotNull(components1);
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      
      String string0 = "";
      io.swagger.oas.models.links.Link link0 = null;
      SecurityScheme securityScheme0 = null;
      SecurityScheme securityScheme1 = hashMap0.put(apiResponses0.DEFAULT, securityScheme0);
      assertNull(securityScheme1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Components components4 = components0.addLinks(string0, link0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotNull(components4);
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Operation operation1 = operation0.deprecated(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNotNull(operation1);
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(operation0.getDeprecated());
      
      Map<String, Callback> map0 = operation1.getCallbacks();
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNull(map0);
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(operation0.getDeprecated());
      
      Components components5 = components3.callbacks(map0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(operation0, operation1);
      assertNotNull(components5);
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(operation0.getDeprecated());
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "";
      OperationParser.DEFAULT_DESCRIPTION = string0;
      io.swagger.oas.annotations.Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "]EQV1VP=0qifbn7Z5B";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      
      Components components1 = components0.addLinks(string1, link0);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components1);
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNotNull(optional0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string2 = "#/components/schemas/";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      
      MediaType mediaType1 = mediaType0.addEncoding(string2, encoding0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType2 = mediaType1.encoding(hashMap0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string3 = "java.lang";
      MediaType mediaType3 = mediaType2.example(string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(mediaType3);
      assertEquals("java.lang", mediaType3.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      MediaType mediaType4 = mediaType3.examples(hashMap1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(mediaType4);
      assertEquals("java.lang", mediaType3.getExample());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("java.lang", mediaType4.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("java.lang", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.lang", mediaType2.getExample());
      
      String string4 = "L*1";
      MediaType mediaType5 = mediaType1.addEncoding(operationParser0.COMMA, encoding0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType5, mediaType1);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType2);
      assertNotNull(mediaType5);
      assertEquals("java.lang", mediaType5.getExample());
      assertEquals("java.lang", mediaType0.getExample());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("java.lang", mediaType1.getExample());
      
      String string5 = "@q&$b 0pYE9";
      String string6 = "ZI[.zDNR5)dsE]{\\8";
      String string7 = "pc0A}H|eVPd";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(exampleObject0).externalValue();
      doReturn(string4, string6, operationParser0.COMPONENTS_REF).when(exampleObject0).name();
      doReturn(operationParser0.COMMA, (String) null).when(exampleObject0).summary();
      doReturn(string7, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "xx+";
      String string1 = "com.fasterxml.jackson.databind.ser.std.IterableSerializer";
      String string2 = "java.langio.swagger.oas.models.media.Content";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Components components1 = components0.addExamples(operationParser0.DEFAULT_DESCRIPTION, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.schemas(map0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      
      String string3 = "";
      Logger logger0 = null;
      OperationParser.LOGGER = logger0;
      Boolean boolean0 = new Boolean(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Header header1 = header0.explode(boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(header0, header1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertFalse(header0.getExplode());
      assertNull(header1.getRequired());
      assertNull(header1.getDeprecated());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertFalse(header1.getExplode());
      assertNull(header1.getExample());
      assertNull(header1.get$ref());
      
      Components components3 = components2.addHeaders(operationParser0.COMPONENTS_REF, header1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(header0, header1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(header1, header0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components3);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertFalse(header0.getExplode());
      assertNull(header1.getRequired());
      assertNull(header1.getDeprecated());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertFalse(header1.getExplode());
      assertNull(header1.getExample());
      assertNull(header1.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      
      Link[] linkArray0 = new Link[1];
      String string4 = null;
      String string5 = "/e6EW#";
      String string6 = "{CmUpkwHK";
      String string7 = "no description";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string4).when(link0).description();
      doReturn(string5, string6).when(link0).operationId();
      doReturn(string7).when(link0).operationRef();
      boolean boolean1 = false;
      int int0 = Boolean.compare(boolean1, boolean1);
      assertEquals(0, int0);
      
      linkArray0[0] = link0;
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        OperationParser.getLink(linkArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      String string0 = "io.swagger.jaxrs2.OperationParser";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string1 = "java.lang";
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      boolean boolean0 = true;
      String string2 = ":";
      String string3 = null;
      String string4 = "";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string5 = "\"u&1TAwLsg";
      int int0 = 9;
      int int1 = 3488;
      String string6 = "R5Q-Q;^!U\\hbuuc1bS";
      String string7 = null;
      String string8 = "javax.validation.constraints.Max";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string3, string4).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string5, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string2).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string6).when(schema0).minimum();
      doReturn(string7).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string8, (String) null).when(schema0).ref();
      doReturn(string2, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string8);
      assertNotSame(string0, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string8);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string8);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotNull(optional0);
      assertEquals(8, stringArray0.length);
      
      String string9 = "oV;LW-*MkKq\\\\jp";
      String string10 = "io.swagge";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(externalDocumentation1).description();
      doReturn(string10, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string10);
      assertNotSame(string9, string4);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string6);
      assertNotSame(string10, string1);
      assertNotSame(string10, string2);
      assertNotSame(string10, string4);
      assertNotSame(string10, string9);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      String string0 = "?p{eK=TJUFB$<Zs+6a";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = false;
      String string1 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      String string2 = "~:cG-fy:H/";
      int int0 = 6;
      int int1 = 1783;
      String string3 = "java.langio.swagger.oas.models.media.Content";
      String string4 = "$";
      boolean boolean2 = true;
      int int2 = 0;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[0], string3).when(schema0).description();
      doReturn(string0, string1, string4, (String) null).when(schema0).example();
      doReturn(boolean1, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, string0).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).maxProperties();
      doReturn(stringArray0[0]).when(schema0).maximum();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(string1).when(schema0).pattern();
      doReturn(boolean1, boolean2).when(schema0).readOnly();
      doReturn(stringArray0[0], string4).when(schema0).ref();
      doReturn(string0, string2).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(boolean2 == boolean0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotNull(optional0);
      assertEquals(1, stringArray0.length);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      String string0 = "4";
      Explode explode0 = Explode.TRUE;
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string2 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string3 = null;
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, ApiResponse> map0 = components0.getResponses();
      assertNull(map0);
      
      Components components1 = components0.responses(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = components1.getLinks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map1);
      
      Components components2 = components1.links(map1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      String string4 = null;
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      
      io.swagger.oas.models.media.Schema<Example> schema1 = new io.swagger.oas.models.media.Schema<Example>();
      assertNotNull(schema1);
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      
      Parameter parameter2 = parameter1.schema(schema1);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(parameter2.getName());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      
      Components components3 = components2.addParameters(string4, parameter2);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components3);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(parameter2.getName());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      
      String string5 = "";
      io.swagger.oas.models.links.Link link0 = null;
      Components components4 = components3.addLinks(string5, link0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components4);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(parameter2.getName());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      
      Optional<Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(optional0);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(parameter2.getName());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      
      io.swagger.oas.annotations.Parameter parameter3 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter3).allowEmptyValue();
      doReturn(false).when(parameter3).allowReserved();
      doReturn((ArraySchema) null).when(parameter3).array();
      doReturn((Content[]) null).when(parameter3).content();
      doReturn(false).when(parameter3).deprecated();
      doReturn((String) null).when(parameter3).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter3).explode();
      doReturn((String) null).when(parameter3).in();
      doReturn((String) null).when(parameter3).name();
      doReturn(false).when(parameter3).required();
      doReturn((Schema) null, (Schema) null).when(parameter3).schema();
      doReturn((String) null).when(parameter3).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter3, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      Link[] linkArray0 = new Link[8];
      String string0 = " in a Number value";
      String string1 = "^IK";
      String string2 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string3 = "pava.lang";
      String string4 = "(io.swagge";
      String string5 = "";
      String string6 = "ioR.swagge";
      String string7 = null;
      String string8 = "B=t7";
      String string9 = "{D";
      String string10 = "T,!#i44F\\/L#M;8 ~vh";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameters0).expression();
      doReturn(string4, string9, string5, string10, string3).when(linkParameters0).name();
      LinkParameters linkParameters1 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string0, string1).when(link0).description();
      doReturn(string6, string7, string2, string1, string8).when(link0).name();
      doReturn(string1, string2, string0, string3, string4).when(link0).operationId();
      doReturn(string4, string5, string6, string3, string7).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters1, linkParameters1, linkParameters0, linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[0] = linkArray0[5];
      linkArray0[7] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(5, map0.size());
      assertEquals(8, linkArray0.length);
      
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10";
      String string1 = "B";
      String string2 = "7Eq3qj!Nuu0";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Components components1 = components0.addExamples(operationParser0.DEFAULT_DESCRIPTION, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.schemas(map0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      
      String string3 = "";
      Logger logger0 = null;
      OperationParser.LOGGER = logger0;
      Boolean boolean0 = new Boolean(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Header header1 = header0.explode(boolean0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(header0, header1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(header1, header0);
      assertNotNull(header1);
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDeprecated());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertFalse(header1.getExplode());
      assertNull(header1.get$ref());
      
      Components components3 = components2.addHeaders(operationParser0.COMPONENTS_REF, header1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(header1, header0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components3);
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getDeprecated());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getExample());
      assertFalse(header1.getExplode());
      assertNull(header1.get$ref());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Link[] linkArray0 = new Link[1];
      String string4 = "float";
      String string5 = null;
      String string6 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string2).when(link0).description();
      doReturn(string0, string5).when(link0).operationId();
      doReturn(operationParser0.DEFAULT_DESCRIPTION).when(link0).operationRef();
      boolean boolean1 = false;
      int int0 = Boolean.compare(boolean1, boolean1);
      assertEquals(0, int0);
      
      linkArray0[0] = link0;
      // Undeclared exception!
      try { 
        OperationParser.getLinks(linkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      Link[] linkArray0 = new Link[8];
      String string0 = "c|_";
      String string1 = "java.langio.swagger.oas.models.media.Content";
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "write raw value";
      String string4 = "b*p&>'T4TI";
      String string5 = "";
      String string6 = "-)U(^_";
      String string7 = "1`IQ";
      String string8 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters1).name();
      LinkParameters linkParameters2 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameters2).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string0, string2).when(link0).description();
      doReturn(string5, string5, string5, string8, string3).when(link0).name();
      doReturn(string1, string2, string3, string4, string5).when(link0).operationId();
      doReturn(string6, string2, string6, string7, string2).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters1, linkParameters1, linkParameters2, linkParameters2).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(8, linkArray0.length);
      
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string3, string7).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map1);
      
      Components components1 = components0.schemas(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Components components2 = components1.links(map0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(8, linkArray0.length);
      
      String string9 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string10 = "3pXdgD6^'/y7_/3";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      
      ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string10, header0);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string3);
      assertNotSame(string10, string1);
      assertNotSame(string10, string6);
      assertNotSame(string10, string5);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      
      Map<String, Header> map2 = null;
      Components components3 = components2.headers(map2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(8, linkArray0.length);
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      int int0 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "C5I{!V9?2_+h}E Q";
      String string2 = "q,";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(license0).name();
      doReturn(string0, string2).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[8];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      boolean boolean1 = false;
      String string3 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string3).when(parameter0).description();
      doReturn(explode0, explode0, explode1).when(parameter0).explode();
      doReturn(string3).when(parameter0).in();
      doReturn(string3).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(schema0, (Schema) null).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Map<String, Callback> map1 = components1.getCallbacks();
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      Components components2 = components1.callbacks(map1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      
      String string4 = "#/components/schemas/";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema1);
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getReadOnly());
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      int int0 = 1122;
      Class<Void> class0 = Void.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      Class<ApiResponses> class1 = ApiResponses.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema2).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema2).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "!8K2HduEBG%2;Xj/";
      String string1 = "no description";
      components0.addExtension(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      
      boolean boolean1 = true;
      Boolean boolean2 = new Boolean(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertNotNull(components1);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Components components2 = components1.addCallbacks(string0, callback0);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertNotNull(components2);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      
      boolean boolean3 = components2.equals(optional0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertFalse(boolean3);
      
      String string2 = "QiBY";
      io.swagger.oas.models.links.Link link0 = null;
      Components components3 = components2.addLinks(string2, link0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(components3);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      
      Map<String, Example> map0 = null;
      Components components4 = components3.examples(map0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(components4);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      String string0 = ",";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "java.langio.swagger.oas.models.responses.ApiResponses";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters1).expression();
      doReturn(string1, string1).when(linkParameters1).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      String string3 = "java.langio.swagger.oas.models.media.Content";
      String string4 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string1).when(externalDocumentation0).description();
      doReturn(string1, string4).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(optional2);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      
      Encoding encoding1 = encoding0.contentType(string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(encoding1, encoding0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertNotNull(encoding1);
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Header> map1 = components0.getHeaders();
      assertNull(map1);
      
      Encoding encoding2 = encoding1.headers(map1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertNotNull(encoding2);
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding2.getContentType());
      assertNull(encoding2.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      
      MediaType mediaType1 = mediaType0.addEncoding(string3, encoding2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(mediaType0, mediaType1);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertNotNull(mediaType1);
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding2.getContentType());
      assertNull(encoding2.getExplode());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      
      String string5 = null;
      String string6 = "java.lang";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string5).when(exampleObject0).name();
      doReturn(string1, (String) null).when(exampleObject0).summary();
      doReturn(string6, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType1, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      String string0 = "*/*";
      String string1 = "P";
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serverVariable0).description();
      doReturn((String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      assertEquals(1, serverVariableArray0.length);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      
      Components components1 = components0.addRequestBodies(operationParser0.COMPONENTS_REF, requestBody0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      
      int int0 = (-102);
      RequestBody requestBody1 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody1).description();
      doReturn(false).when(requestBody1).required();
      Optional<io.swagger.oas.models.parameters.RequestBody> optional1 = OperationParser.getRequestBody(requestBody1, components0);
      assertSame(components0, components1);
      assertNotNull(optional1);
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -102
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = null;
      String string0 = "1dZ*s1HzrIg#~O!ivq";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(operationParser0.COMPONENTS_REF, string0, operationParser0.COMMA, string0, (String) null).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Components components1 = components0.addExamples(operationParser0.DEFAULT_DESCRIPTION, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.schemas(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      
      String string1 = "";
      Logger logger0 = null;
      OperationParser.LOGGER = logger0;
      Boolean boolean0 = new Boolean(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Header header1 = header0.explode(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(header1, header0);
      assertSame(header0, header1);
      assertNotNull(header1);
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertNull(header1.getDescription());
      assertNull(header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertFalse(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getRequired());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      
      Components components3 = components2.addHeaders(operationParser0.COMPONENTS_REF, header1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(header1, header0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertNotNull(components3);
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertNull(header1.getDescription());
      assertNull(header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertFalse(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getRequired());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      
      Link[] linkArray0 = new Link[17];
      String string2 = "mGntZ-1z";
      String string3 = ", mapping=";
      String string4 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, string0, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string2, string3, (String) null).when(link0).operationId();
      doReturn(string4, operationParser0.COMPONENTS_REF, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      boolean boolean1 = false;
      int int0 = Boolean.compare(boolean1, boolean1);
      assertEquals(0, int0);
      
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertEquals(17, linkArray0.length);
      
      Components components4 = components3.links(map1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(header1, header0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(components4);
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertNull(header1.getDescription());
      assertNull(header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertFalse(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getRequired());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertEquals(17, linkArray0.length);
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(header0, header1);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(header1, header0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotNull(optional0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header1.getStyle());
      assertNull(header1.get$ref());
      assertNull(header1.getDescription());
      assertNull(header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertFalse(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.getRequired());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertEquals(4, apiResponseArray0.length);
      assertEquals(17, linkArray0.length);
      
      OperationParser.getLink(linkArray0[0]);
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      OperationParser.getServers(serverArray0);
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(info0).description();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string0).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[4];
      String string2 = "yL~~-lYTkuo5}";
      String string3 = "";
      String string4 = null;
      String string5 = "ZDNWX<\\aczfz*&Ho";
      String string6 = ",5-U:7D(DE4/ClE";
      String string7 = "N)t;B'ELyoIlM";
      String string8 = "U,nn8n{?Tx3T";
      String string9 = "no description";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).name();
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameters1).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string4, string1, string1).when(link0).description();
      doReturn(string9, string2, string5, string9).when(link0).name();
      doReturn(string0, string5, string6, string7, string5).when(link0).operationId();
      doReturn(string7, string3, string8, string1, string3).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters0, linkParameters1, linkParameters1, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(4, linkArray0.length);
      
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(linkArray0[2]);
      assertNotNull(optional1);
      assertEquals(4, linkArray0.length);
      
      String string10 = "#/components/schemas/";
      String string11 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string10, string11).when(contact0).email();
      doReturn(string1).when(contact0).name();
      doReturn(string5, string8).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertNotSame(string10, string5);
      assertNotSame(string10, string7);
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string6);
      assertNotSame(string5, string10);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string9);
      assertNotSame(string5, string7);
      assertNotSame(string5, string6);
      assertNotSame(string5, string8);
      assertNotSame(string5, string0);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string9);
      assertNotSame(string8, string10);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotNull(optional2);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string12 = "GAn<";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      
      MediaType mediaType1 = mediaType0.addEncoding(string12, encoding0);
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string12, string8);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string0);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string2);
      assertNotSame(string12, string6);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string12, string8);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string0);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string2);
      assertNotSame(string12, string6);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string13 = "";
      MediaType mediaType3 = mediaType2.example(string13);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string9);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertSame(string13, string0);
      assertNotSame(string13, string12);
      assertNotSame(string13, string7);
      assertNotSame(string13, string5);
      assertSame(string13, string3);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string12, string8);
      assertNotSame(string12, string13);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string0);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string2);
      assertNotSame(string12, string6);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType3);
      assertEquals("", mediaType3.getExample());
      assertEquals("", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("", mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", mediaType2.getExample());
      
      Collection<Example> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      
      Example example1 = example0.externalValue(string13);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string9);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertSame(string13, string0);
      assertNotSame(string13, string12);
      assertNotSame(string13, string7);
      assertNotSame(string13, string5);
      assertSame(string13, string3);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.get$ref());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      
      MediaType mediaType4 = mediaType3.addExamples(string13, example1);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string9);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertSame(string13, string0);
      assertNotSame(string13, string12);
      assertNotSame(string13, string7);
      assertNotSame(string13, string5);
      assertSame(string13, string3);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string12, string8);
      assertNotSame(string12, string13);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string0);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string2);
      assertNotSame(string12, string6);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotNull(mediaType4);
      assertEquals("", mediaType3.getExample());
      assertNull(example0.get$ref());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("", mediaType4.getExample());
      assertEquals("", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("", mediaType1.getExample());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", mediaType2.getExample());
      
      String string14 = "com.fasterxml.jackson.databind.ser.std.StdSerializer";
      String string15 = "    maxItems: ";
      String string16 = "W\"6ozT6TtutKW[]ui(l";
      String string17 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string13).when(exampleObject0).externalValue();
      doReturn(string7, string14, string2, string15).when(exampleObject0).name();
      doReturn(string16, (String) null).when(exampleObject0).summary();
      doReturn(string17).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string2.equals((Object)string17));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string16));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string17));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string16));
      assertFalse(string7.equals((Object)string17));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string16));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string17));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string15));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string7);
      assertNotSame(string13, string5);
      assertSame(string13, string3);
      assertNotSame(string13, string14);
      assertNotSame(string13, string16);
      assertNotSame(string13, string2);
      assertNotSame(string13, string10);
      assertSame(string13, string0);
      assertNotSame(string13, string15);
      assertSame(string13, string17);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertNotSame(string2, string17);
      assertNotSame(string2, string14);
      assertNotSame(string2, string16);
      assertNotSame(string2, string3);
      assertNotSame(string2, string12);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string13);
      assertNotSame(string2, string8);
      assertNotSame(string2, string9);
      assertNotSame(string2, string10);
      assertNotSame(string2, string6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string15);
      assertNotSame(string14, string8);
      assertNotSame(string14, string13);
      assertNotSame(string14, string10);
      assertNotSame(string14, string3);
      assertNotSame(string14, string9);
      assertNotSame(string14, string0);
      assertNotSame(string14, string15);
      assertNotSame(string14, string2);
      assertNotSame(string14, string12);
      assertNotSame(string14, string7);
      assertNotSame(string14, string5);
      assertNotSame(string14, string6);
      assertNotSame(string14, string17);
      assertNotSame(string14, string16);
      assertNotSame(string15, string8);
      assertNotSame(string15, string10);
      assertNotSame(string15, string9);
      assertNotSame(string15, string7);
      assertNotSame(string15, string5);
      assertNotSame(string15, string12);
      assertNotSame(string15, string13);
      assertNotSame(string15, string14);
      assertNotSame(string15, string17);
      assertNotSame(string15, string3);
      assertNotSame(string15, string2);
      assertNotSame(string15, string16);
      assertNotSame(string15, string6);
      assertNotSame(string15, string0);
      assertNotSame(string16, string8);
      assertNotSame(string16, string13);
      assertNotSame(string16, string12);
      assertNotSame(string16, string6);
      assertNotSame(string16, string7);
      assertNotSame(string16, string0);
      assertNotSame(string16, string2);
      assertNotSame(string16, string17);
      assertNotSame(string16, string14);
      assertNotSame(string16, string5);
      assertNotSame(string16, string15);
      assertNotSame(string16, string10);
      assertNotSame(string16, string3);
      assertNotSame(string16, string9);
      assertSame(string17, string0);
      assertNotSame(string17, string10);
      assertNotSame(string17, string16);
      assertNotSame(string17, string9);
      assertNotSame(string17, string8);
      assertNotSame(string17, string15);
      assertNotSame(string17, string2);
      assertNotSame(string17, string5);
      assertNotSame(string17, string7);
      assertSame(string17, string13);
      assertNotSame(string17, string14);
      assertNotSame(string17, string6);
      assertSame(string17, string3);
      assertNotSame(string17, string12);
      assertNotSame(string7, string13);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string10);
      assertNotSame(string7, string9);
      assertNotSame(string7, string15);
      assertNotSame(string7, string16);
      assertNotSame(string7, string17);
      assertNotSame(string7, string14);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string12);
      assertNotSame(string7, string5);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string12, string8);
      assertNotSame(string12, string13);
      assertNotSame(string12, string7);
      assertNotSame(string12, string0);
      assertNotSame(string12, string16);
      assertNotSame(string12, string2);
      assertNotSame(string12, string6);
      assertNotSame(string12, string17);
      assertNotSame(string12, string14);
      assertNotSame(string12, string5);
      assertNotSame(string12, string15);
      assertNotSame(string12, string10);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotNull(optional3);
      assertEquals("", mediaType3.getExample());
      assertNull(example0.get$ref());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("", mediaType4.getExample());
      assertEquals("", mediaType0.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("", mediaType1.getExample());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("", mediaType2.getExample());
      
      int int0 = 22;
      int int1 = (-1653);
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int2 = 1114111;
      Schema schema1 = null;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0, int1).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      String string0 = ",";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "java.langio.swagger.oas.models.responses.ApiResponses";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string1, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters1).expression();
      doReturn(string1, string1).when(linkParameters1).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      String string3 = "java.langio.swagger.oas.models.media.Content";
      String string4 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string1).when(externalDocumentation0).description();
      doReturn(string1, string4).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(optional2);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Encoding encoding1 = encoding0.contentType(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertSame(encoding1, encoding0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(encoding0, encoding1);
      assertNotNull(encoding1);
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Header> map1 = components0.getHeaders();
      assertNull(map1);
      
      Encoding encoding2 = encoding1.headers(map1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotNull(encoding2);
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      MediaType mediaType1 = mediaType0.addEncoding(string3, encoding2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(mediaType0, mediaType1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotNull(mediaType1);
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      String string5 = null;
      encoding1.setHeaders(map1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      String string6 = "java.lang";
      String string7 = "java.lang";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string7).when(exampleObject0).externalValue();
      doReturn(string0, string5, string0).when(exampleObject0).name();
      doReturn(string1, string3).when(exampleObject0).summary();
      doReturn(string6, string7, string0).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType1, exampleObject0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertSame(mediaType0, mediaType1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotNull(optional3);
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getStyle());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertEquals("io.swagger.jaxrs2.OperationParser", encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link1).description();
      doReturn((String) null).when(link1).operationId();
      doReturn((String) null).when(link1).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link1);
      assertFalse(optional4.equals((Object)optional0));
      assertNotSame(optional4, optional0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      String string0 = "7\\KNXX5WfI";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Operation operation1 = operation0.deprecated(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNotNull(operation1);
      assertNull(operation1.getDescription());
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation0.getOperationId());
      assertFalse(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      
      Map<String, Callback> map0 = operation1.getCallbacks();
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation1, operation0);
      assertSame(operation0, operation1);
      assertNull(map0);
      assertNull(operation1.getDescription());
      assertNull(operation1.getOperationId());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation0.getOperationId());
      assertFalse(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      
      Components components4 = new Components();
      assertFalse(components4.equals((Object)components2));
      assertFalse(components4.equals((Object)components3));
      assertFalse(components4.equals((Object)components1));
      assertFalse(components4.equals((Object)components0));
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      assertFalse(components4.equals((Object)components2));
      assertFalse(components4.equals((Object)components3));
      assertFalse(components4.equals((Object)components1));
      assertFalse(components4.equals((Object)components0));
      assertNotSame(components4, components2);
      assertNotSame(components4, components3);
      assertNotSame(components4, components1);
      assertNotSame(components4, components0);
      assertNotNull(optional0);
      assertEquals(0, exampleObjectArray0.length);
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      String string0 = "type";
      String string1 = "";
      String string2 = "sI} j^_T(";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional0);
      
      String string3 = "WN3t-";
      String string4 = "FAIL_ON_INVALID_SUBTYPE";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters1).expression();
      doReturn(string3, string4).when(linkParameters1).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map1 = null;
      Components components1 = components0.examples(map1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Map<String, Header> map2 = apiResponse0.getHeaders();
      assertNull(map2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components2 = components1.headers(map2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotNull(components2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string5 = null;
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      
      SecurityScheme.Type securityScheme_Type0 = SecurityScheme.Type.OAUTH2;
      apiResponse0.setHeaders(map2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      SecurityScheme securityScheme1 = securityScheme0.type(securityScheme_Type0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(securityScheme1);
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getScheme());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      
      Components components3 = components2.addSecuritySchemes(string5, securityScheme1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotNull(components3);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getScheme());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.requestBodies(hashMap0);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotNull(components4);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getScheme());
      assertEquals(SecurityScheme.Type.OAUTH2, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[2] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components3 = components2.requestBodies(hashMap1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotNull(components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Operation operation1 = operation0.deprecated(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNotNull(operation1);
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertFalse(operation0.getDeprecated());
      assertNull(operation1.getDescription());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getOperationId());
      
      Map<String, Callback> map0 = operation1.getCallbacks();
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(map0);
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDescription());
      assertFalse(operation0.getDeprecated());
      assertNull(operation1.getDescription());
      assertFalse(operation1.getDeprecated());
      assertNull(operation1.getSummary());
      assertNull(operation1.getOperationId());
      
      Components components4 = new Components();
      assertFalse(components4.equals((Object)components3));
      assertFalse(components4.equals((Object)components0));
      assertFalse(components4.equals((Object)components2));
      assertFalse(components4.equals((Object)components1));
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      assertFalse(components4.equals((Object)components3));
      assertFalse(components4.equals((Object)components0));
      assertFalse(components4.equals((Object)components2));
      assertFalse(components4.equals((Object)components1));
      assertNotSame(components4, components3);
      assertNotSame(components4, components0);
      assertNotSame(components4, components2);
      assertNotSame(components4, components1);
      assertNotNull(optional0);
      assertEquals(7, exampleObjectArray0.length);
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[7];
      Content content0 = null;
      String string0 = "gSt. h";
      String string1 = "java.langjava.lang.Integer";
      Link[] linkArray0 = new Link[0];
      String string2 = null;
      String string3 = "";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string0, string0, string0, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string2, string0, string1, string3, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string4 = "[yDJ";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Components components1 = components0.addCallbacks(string4, callback0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      
      Components components2 = components1.addHeaders(string4, header0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      
      String string5 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      
      OAuthFlows oAuthFlows0 = new OAuthFlows();
      assertNotNull(oAuthFlows0);
      
      SecurityScheme securityScheme1 = securityScheme0.flows(oAuthFlows0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(securityScheme1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getScheme());
      
      Components components3 = components2.addSecuritySchemes(string5, securityScheme1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components3);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getScheme());
      
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotNull(map0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Components components4 = components3.securitySchemes(map0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(components4);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getScheme());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotNull(optional0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getScheme());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(7, apiResponseArray0.length);
      
      String string6 = "com.fasterxml.jackson.databind.type.CollectionType";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string3).when(license0).name();
      doReturn(string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotNull(optional1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string5;
      stringArray0[2] = string6;
      stringArray0[3] = string0;
      stringArray0[4] = string6;
      stringArray0[5] = string4;
      stringArray0[6] = string1;
      stringArray0[7] = string0;
      boolean boolean0 = false;
      String string7 = "java.lang";
      String string8 = "java.langjava.lang.Integer";
      boolean boolean1 = true;
      boolean boolean2 = false;
      String string9 = "java.langio.swagger.oas.models.servers.Server";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(externalDocumentation0).description();
      doReturn(string9, (String) null).when(externalDocumentation0).url();
      String string10 = "com.fasterxml.jackson.annotation.JsonFormat$Features";
      int int0 = (-1404);
      int int1 = 844;
      boolean boolean3 = false;
      String string11 = "e&";
      String string12 = "java.langio.swagger.jaxrs2.OperationParser";
      String string13 = null;
      int int2 = 68;
      String string14 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string8).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string7, string12).when(schema0).description();
      doReturn(string8, string7, string7, string13).when(schema0).example();
      doReturn(boolean1, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string10, stringArray0[7]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[1]).when(schema0).maximum();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(stringArray0[2]).when(schema0).minimum();
      doReturn(string4, string14).when(schema0).pattern();
      doReturn(boolean3).when(schema0).readOnly();
      doReturn(string11, stringArray0[1]).when(schema0).ref();
      doReturn(stringArray0[3], stringArray0[0]).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string14));
      assertFalse(string8.equals((Object)string12));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string14));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string12));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string9));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(boolean3 == boolean1);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string5.equals((Object)string14));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertNotSame(string10, string14);
      assertNotSame(string10, string5);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string11);
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string6);
      assertNotSame(string10, string3);
      assertNotSame(string10, string12);
      assertNotSame(string10, string9);
      assertNotSame(string10, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string10);
      assertNotSame(string4, string11);
      assertNotSame(string4, string1);
      assertNotSame(string4, string14);
      assertNotSame(string4, string5);
      assertNotSame(string4, string12);
      assertNotSame(string4, string8);
      assertNotSame(string4, string7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string9);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string10);
      assertNotSame(string11, string6);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertNotSame(string11, string14);
      assertNotSame(string11, string4);
      assertNotSame(string11, string7);
      assertNotSame(string11, string12);
      assertNotSame(string12, string3);
      assertNotSame(string12, string9);
      assertNotSame(string12, string1);
      assertNotSame(string12, string10);
      assertNotSame(string12, string5);
      assertNotSame(string12, string11);
      assertNotSame(string12, string4);
      assertNotSame(string12, string7);
      assertNotSame(string12, string14);
      assertNotSame(string12, string8);
      assertNotSame(string12, string0);
      assertNotSame(string12, string6);
      assertNotSame(string5, string14);
      assertNotSame(string5, string4);
      assertNotSame(string5, string12);
      assertNotSame(string5, string10);
      assertNotSame(string5, string7);
      assertNotSame(string5, string9);
      assertNotSame(string5, string1);
      assertNotSame(string5, string11);
      assertNotSame(string5, string6);
      assertNotSame(string5, string8);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string14, string6);
      assertNotSame(string14, string9);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string8);
      assertNotSame(string14, string7);
      assertNotSame(string14, string11);
      assertNotSame(string14, string12);
      assertNotSame(string14, string1);
      assertNotSame(string14, string10);
      assertSame(string14, string3);
      assertNotSame(string14, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string14);
      assertNotSame(string7, string11);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string10);
      assertNotSame(string7, string9);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string12);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string10);
      assertNotSame(string8, string9);
      assertNotSame(string8, string0);
      assertNotSame(string8, string11);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string14);
      assertNotSame(string8, string12);
      assertSame(string8, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string5);
      assertNotSame(string9, string14);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string10);
      assertNotSame(string9, string12);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotNull(optional2);
      assertEquals(8, stringArray0.length);
      
      Server[] serverArray0 = new Server[5];
      String string15 = "qOI(Vaj8}'g{dU";
      String string16 = "com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer";
      String string17 = "5rhD-ct'";
      String string18 = "java.langio.swagger.jaxrs2.OperationParser";
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      String string0 = "0";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = true;
      String string1 = "java.langio.swagger.oas.models.parameters.Parameter";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      int int0 = (-674);
      String string3 = "o'{e";
      String string4 = "l9]";
      boolean boolean2 = true;
      String string5 = ">S<2m2f^XK*Pu";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[0], (String) null).when(schema0).description();
      doReturn(string1, string0, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string3).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(stringArray0[1], (String) null).when(schema0).minimum();
      doReturn(string4, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string1, (String) null).when(schema0).ref();
      doReturn(string5, (String) null).when(schema0).type();
      // Undeclared exception!
      try { 
        OperationParser.getSchemaFromAnnotation(schema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "wkHBV =`eonNi";
      String string1 = "java.langio.swagger.oas.models.media.Content";
      String string2 = "c3Ouwq9HR{MTNE";
      String string3 = "T$Q\\@``nX.1";
      ServerVariable[] serverVariableArray0 = new ServerVariable[8];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      serverVariableArray0[7] = serverVariableArray0[6];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1, string3).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(1, serverArray0.length);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      Server[] serverArray0 = new Server[5];
      String string0 = "y7K[?<y1eF$[zYN";
      String string1 = "9";
      String string2 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[11];
      String string3 = null;
      String string4 = "0S9yrk";
      String string5 = "io.swagger.jaxrs2.OperationParser";
      String string6 = ")SGi4{AEq3.";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0, string4, string2, string0).when(serverVariable0).description();
      doReturn(string5, string0, string5, string6, string4).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string2).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "";
      String string1 = ",*u-1";
      String string2 = "com.fsterxml.ackson.Matabind.ser.impl.StringArr,ySerilizer";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMMA, (String) null).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(operationParser0.COMMA, (String) null).when(contact0).url();
      String string3 = "java.langio.swagger.jaxrs2.OperationParser";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(license0).name();
      doReturn(string3, (String) null).when(license0).url();
      String string4 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string5 = "FRxd)XcL?e%~goIV";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, operationParser0.MEDIA_TYPE).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1, string4).when(info0).title();
      doReturn(string2, string5).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotNull(optional0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[9];
      assertFalse(exampleObjectArray1.equals((Object)exampleObjectArray0));
      
      String string6 = null;
      String string7 = "Kw";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, string1, operationParser0.COMMA, string6, string7).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObjectArray1[0];
      exampleObjectArray1[2] = exampleObjectArray1[1];
      exampleObjectArray1[3] = exampleObjectArray1[2];
      exampleObjectArray1[4] = exampleObjectArray1[3];
      exampleObjectArray1[5] = exampleObjectArray1[4];
      exampleObjectArray1[6] = exampleObjectArray1[5];
      exampleObjectArray1[7] = exampleObjectArray1[6];
      exampleObjectArray1[8] = exampleObjectArray1[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string8 = "";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      String string9 = "Missing generic type information for ";
      PathItem pathItem0 = new PathItem();
      assertNotNull(pathItem0);
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      
      Callback callback1 = callback0.addPathItem(string9, pathItem0);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertSame(callback0, callback1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      
      Components components1 = components0.addCallbacks(string8, callback1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertSame(components0, components1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertSame(callback0, callback1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertSame(callback1, callback0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertSame(components0, components1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertSame(callback0, callback1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertSame(callback1, callback0);
      assertSame(components1, components0);
      assertNotNull(optional2);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertEquals(8, contentArray0.length);
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      String string0 = "0";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = true;
      String string1 = "java.langio.swagger.oas.models.parameters.Parameter";
      boolean boolean1 = false;
      String string2 = ";wr#VR.;Bhsa| ";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      String string3 = "";
      int int0 = (-674);
      String string4 = "o'{e";
      String string5 = "l9]";
      boolean boolean2 = true;
      String string6 = ">S<2m2f^XK*Pu";
      String string7 = "fx,.  %D9FmXCR";
      boolean boolean3 = false;
      String string8 = "com.fasterxml.jackson.databind.ser.std.ArraySerializerBase";
      boolean boolean4 = true;
      String string9 = "io.swagge";
      String string10 = "qrSP6";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string7).when(schema0)._default();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(stringArray0[0], string5).when(schema0).description();
      doReturn(string1, string0, string3).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(stringArray0[1], string8).when(schema0).minimum();
      doReturn(string5, string8).when(schema0).pattern();
      doReturn(boolean2, boolean4).when(schema0).readOnly();
      doReturn(string1, string9).when(schema0).ref();
      doReturn(string6, string10).when(schema0).type();
      // Undeclared exception!
      try { 
        OperationParser.getSchemaFromAnnotation(schema0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "yl7[?<y1eF$[zYN";
      String string1 = "java.langjava.lang.Integer";
      ServerVariable[] serverVariableArray0 = new ServerVariable[7];
      String string2 = "com.fasterxml.jackson.core.io.IOContext";
      String string3 = "io.swagge";
      String string4 = "RMqQJl";
      String string5 = "com.fasterxml.jackson.databind.ser.SerializerFactory";
      String string6 = "@ZFrh~|D=6z:8TxUx";
      String string7 = "io.swagger.oas.models.security.SecurityRequirement";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string2, string4, string4).when(serverVariable0).description();
      doReturn(string3, string2, string5, string6, string7).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      serverVariableArray0[6] = serverVariableArray0[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null).when(server0).description();
      doReturn(string0, string1, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      assertEquals(1, serverArray0.length);
      
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(serverArray0[0]);
      assertNotNull(optional1);
      assertEquals(1, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      String string0 = "-oz.kDEFBZ\"K;F5$^R>";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(externalDocumentation0).description();
      doReturn(string0, string0).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      String string1 = "2.2250738585072012e-308";
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      HashMap<String, Parameter> hashMap0 = new HashMap<String, Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Map<String, Header> map1 = apiResponse0.getHeaders();
      assertNull(map1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      HashMap<String, SecurityScheme> hashMap1 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Map<String, io.swagger.oas.models.links.Link> map2 = apiResponse0.getLinks();
      assertNull(map2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      LinkParameters linkParameters0 = null;
      Map<String, String> map3 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map3);
      assertTrue(map3.isEmpty());
      assertEquals(0, map3.size());
      
      String string2 = "io.swagge";
      String string3 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string4 = "java.langjava.lang.Integer";
      String string5 = "no description";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string3).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2, string4).when(info0).termsOfService();
      doReturn(string2, string5).when(info0).title();
      doReturn(string3, string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotNull(optional1);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      assertNotNull(schema0);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      
      MediaType mediaType1 = mediaType0.schema(schema0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Encoding> hashMap2 = new HashMap<String, Encoding>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      MediaType mediaType2 = mediaType1.encoding(hashMap2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string6 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      
      MediaType mediaType3 = mediaType2.addExamples(string6, example0);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertNotNull(mediaType3);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(mediaType3.getExample());
      
      String string7 = "";
      MediaType mediaType4 = mediaType2.example(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertNotNull(mediaType4);
      assertEquals("", mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertEquals("", mediaType1.getExample());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals("", mediaType2.getExample());
      assertEquals("", mediaType4.getExample());
      
      String string8 = "W[X4@";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      
      Encoding encoding1 = encoding0.headers(map1);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      
      Boolean boolean1 = null;
      Encoding encoding2 = encoding1.explode(boolean1);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertNotNull(encoding2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getStyle());
      
      MediaType mediaType5 = mediaType3.addEncoding(string8, encoding2);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType5);
      assertSame(mediaType3, mediaType4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(mediaType5, mediaType1);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType2);
      assertNotNull(mediaType5);
      assertEquals("", mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertEquals("", mediaType1.getExample());
      assertEquals(1, hashMap2.size());
      assertFalse(hashMap2.isEmpty());
      assertEquals("", mediaType2.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("", mediaType3.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getStyle());
      assertEquals("", mediaType5.getExample());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string9 = "uf_\"NjP?RnV";
      String string10 = "java.langio.swagger.oas.models.media.ArraySchema";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string2, string5).when(exampleObject0).name();
      doReturn(string10, (String) null).when(exampleObject0).summary();
      doReturn(string1, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType5, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      int int0 = (-2400);
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test111()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[7];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string0 = ",";
      Explode explode0 = Explode.TRUE;
      String string1 = null;
      Class<io.swagger.oas.models.info.Info> class0 = io.swagger.oas.models.info.Info.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      boolean boolean2 = false;
      String string2 = "pJW2K8>3r~qs?V-P";
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean2).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0, boolean2).when(parameter0).deprecated();
      doReturn(string0, string2).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string0, string2).when(parameter0).name();
      doReturn(boolean0, boolean1).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test112()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[7];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components2);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      
      String string1 = "java.langio.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNotNull(arraySchema0);
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      
      String string2 = "1L!";
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.type(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(arraySchema0, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(arraySchema1, arraySchema0);
      assertNotNull(arraySchema1);
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertEquals("1L!", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      
      Components components3 = components2.addSchemas(string1, arraySchema1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(arraySchema0, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(components3);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertEquals("1L!", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      
      String string3 = null;
      Boolean boolean0 = Boolean.valueOf(string3);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      io.swagger.oas.models.media.Schema schema0 = arraySchema0.readOnly(boolean0);
      assertSame(arraySchema0, schema0);
      assertSame(arraySchema0, arraySchema1);
      assertNotNull(schema0);
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertFalse(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertEquals("1L!", schema0.getType());
      assertNull(schema0.getDescription());
      assertFalse(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMinLength());
      
      arraySchema0.setExtensions(map0);
      assertSame(arraySchema0, schema0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertFalse(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.$ref(string3);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNotNull(requestBody1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      
      String string4 = null;
      Boolean boolean1 = new Boolean(string4);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.required(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNotNull(requestBody2);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertFalse(requestBody0.getRequired());
      assertFalse(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertFalse(requestBody2.getRequired());
      
      Components components4 = components3.addRequestBodies(string1, requestBody2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(arraySchema0, schema0);
      assertSame(arraySchema0, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, schema0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNotNull(components4);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertFalse(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertEquals("1L!", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertFalse(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertFalse(requestBody0.getRequired());
      assertFalse(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertFalse(requestBody2.getRequired());
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(arraySchema0, schema0);
      assertSame(arraySchema0, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, schema0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNotNull(optional1);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertFalse(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertEquals("1L!", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertFalse(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertFalse(requestBody0.getRequired());
      assertFalse(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertFalse(requestBody2.getRequired());
      assertEquals(7, apiResponseArray0.length);
      
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema1)._default();
      doReturn((String[]) null).when(schema1)._enum();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn((String) null).when(schema1).maximum();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).minimum();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotNull(optional2);
      
      Content content0 = null;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces2 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.media.Content> optional3 = OperationParser.getContent(content0, produces1, produces2, components4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(arraySchema0, schema0);
      assertSame(arraySchema0, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, schema0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNotNull(optional3);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinLength());
      assertFalse(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("1L!", arraySchema0.getType());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertEquals("1L!", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertFalse(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertFalse(requestBody0.getRequired());
      assertFalse(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(requestBody2.getDescription());
      assertFalse(requestBody2.getRequired());
  }

  @Test(timeout = 11000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<io.swagger.oas.models.info.Contact> class1 = io.swagger.oas.models.info.Contact.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      String string0 = "java.langjava.lang.Integer";
      String string1 = "java.langjava.lang.Integer";
      String string2 = "x=";
      String string3 = "; line: ";
      String string4 = "";
      String string5 = "java.langio.swagger.oas.models.servers.Server";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string6 = "UTC";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string5).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string3, string4).when(info0).termsOfService();
      doReturn(string4).when(info0).title();
      doReturn(string5, string6).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotNull(optional1);
      
      Class<Void> class2 = Void.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema2).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema2, (Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string7 = "r~T=ObHE";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      SecurityScheme securityScheme1 = securityScheme0.openIdConnectUrl(string2);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(securityScheme1);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getType());
      
      Components components3 = components2.addSecuritySchemes(string7, securityScheme1);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getType());
      
      String string8 = "Qi@kfNa%fN@/";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      Components components4 = components2.addRequestBodies(string8, requestBody0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotNull(components4);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components4.getSchemas();
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(map1);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components5 = components3.schemas(map1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertSame(components3, components0);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string8);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertSame(components0, components5);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(components5);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("x=", securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("x=", securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getType());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test114()  throws Throwable  {
      String string0 = "J'tf 9r-\".R";
      String string1 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      io.swagger.oas.annotations.Parameter[] parameterArray0 = new io.swagger.oas.annotations.Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "java.langio.swagger.oas.models.media.ArraySchema";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      Components components1 = components0.addSecuritySchemes(string2, securityScheme0);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Map<String, Header> map1 = link0.getHeaders();
      assertNull(map1);
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Components components2 = components1.headers(map1);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      ApiResponse apiResponse0 = null;
      Components components3 = components2.addResponses(string2, apiResponse0);
      assertFalse(string2.equals((Object)string0));
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Parameter parameter0 = new Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExample());
      
      String string3 = "Can not deserialize a Map.Entry out of empty JSON Object";
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      
      Parameter parameter1 = parameter0.addExamples(string3, example0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(parameter1, parameter0);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(parameter1);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExample());
      
      Map<String, Example> map2 = parameter1.getExamples();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(parameter1, parameter0);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(map2);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExample());
      
      Components components4 = components3.examples(map2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(parameter1, parameter0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(components4);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExample());
      
      Optional<List<Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(parameter0, parameter1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(parameter1, parameter0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(optional0);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExample());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertEquals(0, parameterArray0.length);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[8];
      Content content0 = null;
      String string4 = null;
      String string5 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Link[] linkArray0 = new Link[2];
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string4, (String) null).when(link1).description();
      doReturn((String) null, (String) null).when(link1).name();
      doReturn(string2, string4, (String) null).when(link1).operationId();
      doReturn(string1, string5, (String) null).when(link1).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null).when(link1).parameters();
      linkArray0[0] = link1;
      linkArray0[1] = linkArray0[0];
      String string6 = "com.fasterxml.jackson.core.JsonProcessingException";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse1 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0).when(apiResponse1).content();
      doReturn(string4, string2, string2).when(apiResponse1).description();
      doReturn(linkArray0).when(apiResponse1).links();
      doReturn(string6, string2).when(apiResponse1).responseCode();
      apiResponseArray0[0] = apiResponse1;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test115()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string0 = "java.langio.swagger.oas.models.headers.Header";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, string0, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = false;
      String string1 = "!&`a[H)K";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string2 = "^4+W#$;UxKl";
      String string3 = " $\\N^)`vQ";
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      boolean boolean3 = false;
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string4 = "";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string1, string3).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string2, string3).when(parameter0).in();
      doReturn(string3, string3).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string4).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      String string5 = "_!0`";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      
      Components components2 = components1.addLinks(string5, link0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components2);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      
      Components components3 = components2.addExamples(string5, example0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components3);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components4 = components3.callbacks(hashMap0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(components4);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      
      Optional<Parameter> optional2 = OperationParser.getParameter(parameter0, components4);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(explode0.equals((Object)explode1));
      assertFalse(explode1.equals((Object)explode0));
      assertFalse(explode1.equals((Object)explode2));
      assertFalse(explode2.equals((Object)explode1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(boolean3 == boolean0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(explode0, explode1);
      assertSame(explode0, explode2);
      assertNotSame(explode1, explode0);
      assertNotSame(explode1, explode2);
      assertNotSame(explode2, explode1);
      assertSame(explode2, explode0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotNull(optional2);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertEquals(2, contentArray0.length);
  }

  @Test(timeout = 11000)
  public void test116()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string0 = "no description";
      String string1 = "k";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = false;
      String string2 = "!&`a[H)K";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string3 = "^4+W#$;UxKl";
      String string4 = " $\\N^)`vQ";
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      boolean boolean3 = false;
      Class<String> class0 = String.class;
      Class<PathItem> class1 = PathItem.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string5 = "";
      String string6 = null;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.Parameter parameter0 = mock(io.swagger.oas.annotations.Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string2, string6).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string3, string4).when(parameter0).in();
      doReturn(string4, string4).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string5).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Parameter parameter1 = new Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      
      Components components1 = components0.examples(map0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      
      String string7 = "_!0`";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNotNull(link0);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      
      Components components2 = components1.addLinks(string7, link0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      
      Example example1 = example0.summary(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      Components components3 = components2.addExamples(string7, example1);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotNull(components3);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components4 = components3.callbacks(hashMap0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotNull(components4);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Optional<Parameter> optional2 = OperationParser.getParameter(parameter0, components4);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(explode0.equals((Object)explode1));
      assertFalse(explode1.equals((Object)explode0));
      assertFalse(explode1.equals((Object)explode2));
      assertFalse(explode2.equals((Object)explode1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean3 == boolean0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string7);
      assertNotSame(explode0, explode1);
      assertSame(explode0, explode2);
      assertNotSame(explode1, explode0);
      assertNotSame(explode1, explode2);
      assertNotSame(explode2, explode1);
      assertSame(explode2, explode0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string7);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotNull(optional2);
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(example0.getDescription());
      assertEquals("_!0`", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("_!0`", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, contentArray0.length);
  }

  @Test(timeout = 11000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      Class<MediaType> class0 = MediaType.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Class<io.swagger.oas.models.info.Contact> class1 = io.swagger.oas.models.info.Contact.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      String string0 = "java.langjava.lang.Integer";
      String string1 = "java.langjava.lang.Integer";
      String string2 = "x=";
      String string3 = "; line: ";
      String string4 = "";
      String string5 = "java.langio.swagger.oas.models.servers.Server";
      String string6 = "4S+G4";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(contact0).email();
      doReturn(string6, (String) null).when(contact0).name();
      doReturn(string0, (String) null).when(contact0).url();
      String string7 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(license0).name();
      doReturn(string2, (String) null).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string1, string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string3, string5).when(info0).termsOfService();
      doReturn(string4).when(info0).title();
      doReturn(string5, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string7);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string4, string6);
      assertSame(string4, string7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotNull(optional1);
      
      Class<String> class2 = String.class;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema2).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string4).when(content0).mediaType();
      doReturn(schema2).when(content0).schema();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string7;
      stringArray0[2] = string1;
      stringArray0[3] = string2;
      stringArray0[4] = string3;
      stringArray0[5] = string4;
      stringArray0[6] = string5;
      stringArray0[8] = string6;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
