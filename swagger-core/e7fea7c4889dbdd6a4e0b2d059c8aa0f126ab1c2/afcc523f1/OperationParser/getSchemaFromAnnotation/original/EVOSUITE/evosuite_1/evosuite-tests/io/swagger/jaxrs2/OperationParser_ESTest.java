/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 11:34:08 GMT 2021
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameters;
import io.swagger.oas.annotations.media.ArraySchema;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.parameters.RequestBody;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Function;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(optional0);
      
      String string0 = null;
      String string1 = "";
      String string2 = "4A%8ki/N9jEb!0+RH";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      String string3 = "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer";
      boolean boolean1 = true;
      String string4 = "no description";
      String string5 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5).when(externalDocumentation0).description();
      doReturn(string2, string1).when(externalDocumentation0).url();
      int int0 = 1953;
      String string6 = "";
      int int1 = 1935;
      String string7 = "*5R?Q#{";
      String string8 = "6nve*9'.s";
      String string9 = "O/uB:\"6D]5/[Y@]!";
      String string10 = null;
      int int2 = 2290;
      String string11 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string1, string3, string8).when(schema0).example();
      doReturn(boolean1, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string1).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, int2).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string7, string4).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string8, string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(boolean1 == boolean0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string9);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string1, string4);
      assertSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string8);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string9);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string9);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertNotSame(string2, string8);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string8);
      assertNotSame(string3, string9);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertNotSame(string4, string8);
      assertNotSame(string4, string7);
      assertNotSame(string4, string9);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string9);
      assertNotSame(string6, string2);
      assertSame(string6, string1);
      assertNotSame(string6, string9);
      assertNotSame(string6, string8);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotNull(optional1);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[6] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Explode explode0 = Explode.TRUE;
      String string12 = "java.lang";
      boolean boolean2 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string13 = "-dp@5{8y";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string14 = "java.langio.swagger.oas.models.parameters.Parameter";
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      String string0 = ",";
      String string1 = "LB8Ua]BrC:l";
      String string2 = "|-k(G\"z+>L&voi&?XF";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string2, string1).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      String string3 = "JW)TblvHn?Gy|U";
      String string4 = null;
      String string5 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      String string6 = "D2,{qoH";
      String string7 = "OT>[\"ZwpD[";
      String string8 = "I2]@n^";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string6, string1, string6, string6).when(serverVariable0).description();
      doReturn(string7, string4, string8, string8, string2).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      String string9 = "`54";
      String string10 = "Unrecognized character escape ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string5, string3, string9).when(server0).description();
      doReturn(string4, string4, string6, string6, string10).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertEquals(1, serverVariableArray0.length);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string1));
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string3);
      assertNotSame(string0, string8);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string9);
      assertNotSame(string3, string2);
      assertNotSame(string3, string10);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string10);
      assertNotSame(string6, string8);
      assertNotSame(string6, string9);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string10);
      assertNotSame(string9, string1);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[9];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      serverArray0[8] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertEquals(9, serverArray0.length);
      assertNotNull(optional2);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string11 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string12 = "0BRc1e";
      Boolean boolean0 = Boolean.valueOf(string12);
      assertFalse(boolean0);
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string2));
      assertNotSame(string12, string6);
      assertNotSame(string12, string3);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string0);
      assertNotSame(string12, string7);
      assertNotSame(string12, string9);
      assertNotSame(string12, string8);
      assertNotSame(string12, string1);
      assertNotSame(string12, string2);
      assertNotNull(boolean0);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string13 = "f_s d#[$h1<~CoI";
      String string14 = "?Soh]K?\"V/";
      String string15 = "774PMapEbhg%(";
      String string16 = ",";
      String string17 = "y]o~t*";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(optional0);
      
      int int0 = 4;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      String string0 = "no description";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      boolean boolean0 = true;
      String string1 = "apiKey";
      String string2 = "Qv!P";
      ExternalDocumentation externalDocumentation0 = null;
      String string3 = "";
      int int0 = (-1);
      String string4 = "I\\{L6Vq]";
      int int1 = 83;
      String string5 = ",";
      String string6 = "Qde?72G!0Uh 0e5]uv";
      boolean boolean1 = false;
      String string7 = "@J6YmEak:XMsWhf(e5";
      String string8 = "io.swagge";
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = false;
      String string9 = "Can not update object of type ";
      String string10 = "=?U0SyQ-P#)_g`F\"";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string4).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string1, string7).when(schema0).description();
      doReturn(string2, stringArray0[2], string8, stringArray0[3]).when(schema0).example();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean3).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, int0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string0, string8).when(schema0).pattern();
      doReturn(boolean0, boolean4).when(schema0).readOnly();
      doReturn(string6, string9).when(schema0).ref();
      doReturn(stringArray0[0], string10).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(5, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string8));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string1, string0);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string10);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string9);
      assertNotSame(string1, string8);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string9);
      assertNotSame(string2, string8);
      assertNotSame(string2, string10);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string10);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string9);
      assertNotSame(string3, string7);
      assertNotSame(string3, string8);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string4, string8);
      assertNotSame(string4, string2);
      assertNotSame(string4, string9);
      assertNotSame(string4, string6);
      assertNotSame(string4, string7);
      assertNotSame(string4, string0);
      assertNotSame(string4, string10);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string5, string6);
      assertNotSame(string5, string9);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string10);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string6, string10);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertNotSame(string7, string10);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string8, string10);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string10);
      assertNotSame(string10, string0);
      assertNotSame(string10, string9);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string2);
      assertNotSame(string10, string6);
      assertNotSame(string10, string3);
      assertNotSame(string10, string4);
      assertNotSame(string10, string1);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(0, serverArray0.length);
      assertNotNull(optional1);
      
      Schema schema1 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertFalse(optional2.equals((Object)optional0));
      assertNotSame(optional2, optional0);
      assertNotNull(optional2);
      
      Content[] contentArray0 = new Content[6];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map0 = components0.getRequestBodies();
      assertNull(map0);
      
      Components components1 = components0.requestBodies(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string11 = "java.langio.swagger.oas.models.security.SecurityScheme";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNotNull(arraySchema0);
      
      Components components2 = components1.addSchemas(string11, arraySchema0);
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string11, string4);
      assertNotSame(string11, string6);
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string0);
      assertNotSame(string11, string2);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string1);
      assertNotSame(string11, string5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      String string12 = "skM_7I1o'&.^@.8c";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertNotNull(securityScheme0);
      
      Components components3 = components2.addSecuritySchemes(string12, securityScheme0);
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string11, string4);
      assertNotSame(string11, string9);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string2);
      assertNotSame(string11, string0);
      assertNotSame(string11, string3);
      assertNotSame(string11, string12);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string12, string9);
      assertNotSame(string12, string6);
      assertNotSame(string12, string2);
      assertNotSame(string12, string3);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string4);
      assertNotSame(string12, string5);
      assertNotSame(string12, string8);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      String string13 = "'/sscE_93cyJf'";
      Example example1 = example0.externalValue(string13);
      assertNull(example1.getDescription());
      assertEquals("'/sscE_93cyJf'", example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("'/sscE_93cyJf'", example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string9);
      assertNotSame(string13, string6);
      assertNotSame(string13, string11);
      assertNotSame(string13, string10);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string5);
      assertSame(example1, example0);
      assertSame(example0, example1);
      assertNotNull(example1);
      
      Example example2 = example1.description(stringArray0[2]);
      assertEquals("'/sscE_93cyJf'", example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("no description", example1.getDescription());
      assertEquals("'/sscE_93cyJf'", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertEquals("no description", example2.getDescription());
      assertNull(example2.get$ref());
      assertEquals("no description", example0.getDescription());
      assertEquals("'/sscE_93cyJf'", example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals(5, stringArray0.length);
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string9);
      assertNotSame(string13, string6);
      assertNotSame(string13, string11);
      assertNotSame(string13, string10);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string5);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotNull(example2);
      
      Components components4 = components3.addExamples(string8, example2);
      assertEquals("'/sscE_93cyJf'", example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("no description", example1.getDescription());
      assertEquals("'/sscE_93cyJf'", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertEquals("no description", example2.getDescription());
      assertNull(example2.get$ref());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertEquals("no description", example0.getDescription());
      assertEquals("'/sscE_93cyJf'", example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals(5, stringArray0.length);
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string8.equals((Object)string13));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string12));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string11, string13);
      assertNotSame(string11, string2);
      assertNotSame(string11, string3);
      assertNotSame(string11, string4);
      assertNotSame(string11, string9);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string0);
      assertNotSame(string11, string12);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string12, string2);
      assertNotSame(string12, string7);
      assertNotSame(string12, string13);
      assertNotSame(string12, string4);
      assertNotSame(string12, string9);
      assertNotSame(string12, string6);
      assertNotSame(string12, string3);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string5);
      assertNotSame(string12, string8);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string9);
      assertNotSame(string13, string6);
      assertNotSame(string13, string11);
      assertNotSame(string13, string10);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string5);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNotSame(string8, string13);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string12);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string11);
      assertNotSame(string8, string10);
      assertNotSame(string8, string6);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertEquals("no description", example0.getDescription());
      assertEquals("'/sscE_93cyJf'", example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals("'/sscE_93cyJf'", example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("no description", example1.getDescription());
      assertEquals("'/sscE_93cyJf'", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertEquals("no description", example2.getDescription());
      assertNull(example2.get$ref());
      assertEquals(5, stringArray0.length);
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string8.equals((Object)string13));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string12));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(string11, string13);
      assertNotSame(string11, string2);
      assertNotSame(string11, string3);
      assertNotSame(string11, string4);
      assertNotSame(string11, string9);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string0);
      assertNotSame(string11, string12);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string12, string2);
      assertNotSame(string12, string7);
      assertNotSame(string12, string13);
      assertNotSame(string12, string4);
      assertNotSame(string12, string9);
      assertNotSame(string12, string6);
      assertNotSame(string12, string3);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string5);
      assertNotSame(string12, string8);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string9);
      assertNotSame(string13, string6);
      assertNotSame(string13, string11);
      assertNotSame(string13, string10);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string5);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNotSame(string8, string13);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string12);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string11);
      assertNotSame(string8, string10);
      assertNotSame(string8, string6);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      String string0 = "Z]G^CH";
      String string1 = "com.fasterxml.jackson.databind.node.ObjectNode";
      String string2 = "je?*9EnGu[-bc1B";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(linkParameters0).expression();
      doReturn(string0, string2).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(map0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Explode explode0 = Explode.TRUE;
      String string3 = "b`N)>Yb&Ax.l5pV";
      String string4 = "";
      Schema schema0 = null;
      String string5 = ": can not find property with name '";
      Parameter[] parameterArray0 = new Parameter[2];
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      String string6 = "#/components/schemas/";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0[4], contentArray0[0]).when(apiResponse0).content();
      doReturn(string0, string6, string2, string3).when(apiResponse0).description();
      doReturn((Link[]) null).when(apiResponse0).links();
      doReturn((String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      String string0 = "Can not pass null KeyDeserializers";
      String string1 = "Invalid delegate-creator definition for ";
      String string2 = "R^k";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(externalDocumentation0).description();
      doReturn(string1, string2).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      String string3 = "com.fasterxml.jackson.databind.util.StdDateFormat";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string3).when(license0).name();
      doReturn(string0, string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(optional1);
      
      String string4 = "BV";
      String string5 = "Pib";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string4, (String) null).when(info0).description();
      doReturn(license1).when(info0).license();
      doReturn(string5, string0).when(info0).termsOfService();
      doReturn(string5, string0).when(info0).title();
      doReturn(string0, string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      String string0 = "b";
      String string1 = "bdH]1!6=PEm?w+!";
      String string2 = "WRITE_DURATIONS_AS_TIMESTAMPS";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string1, string0).when(contact0).name();
      doReturn(string0, string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional0);
      
      String string3 = "";
      String string4 = "org.apache.commons.collections.functors.InvokerTransformer";
      String string5 = "java.langio.swagger.oas.models.media.ArraySchema";
      String string6 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string6).when(linkParameters0).expression();
      doReturn(string1, string6).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotNull(map0);
      
      String string7 = "";
      String string8 = "WAuv'D7m";
      String string9 = "java.langjava.lang.Object";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(contact1).email();
      doReturn(string8, string9).when(contact1).name();
      doReturn(string8, string3).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(optional1.equals((Object)optional0));
      assertNotSame(string3, string9);
      assertSame(string3, string7);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string7, string9);
      assertSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(optional1, optional0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertEquals(0, serverArray0.length);
      assertNotNull(optional2);
      
      String string10 = "zP,cCbPCH7k!";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string11 = "Can not narrow or widen array types";
      String string12 = "\\";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string13 = null;
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.equals((Object)requestBody0));
      assertNotNull(requestBody1);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNotNull(securityScheme0);
      
      SecurityScheme.In securityScheme_In0 = SecurityScheme.In.HEADER;
      String string14 = "java.langjava.lang.Object";
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertEquals(4, serverArray0.length);
      assertNotNull(optional0);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional2);
      
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional3 = OperationParser.getArraySchema(arraySchema1);
      assertTrue(optional3.equals((Object)optional2));
      assertNotSame(optional3, optional2);
      assertNotNull(optional3);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link0);
      assertNotNull(optional4);
      
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license1).name();
      doReturn((String) null).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license1);
      assertSame(optional5, optional1);
      assertNotNull(optional5);
      
      Optional<List<io.swagger.oas.models.servers.Server>> optional6 = OperationParser.getServers(serverArray0);
      assertEquals(4, serverArray0.length);
      assertSame(optional6, optional0);
      assertNotNull(optional6);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional7 = OperationParser.getInfo(info0);
      assertNotNull(optional7);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional8 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional8);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional9 = OperationParser.getContact(contact0);
      assertNotNull(optional9);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[1];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null).when(apiResponse0).content();
      doReturn((String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertNotNull(map0);
      
      Components components1 = components0.links(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<String> schema1 = new io.swagger.oas.models.media.Schema<String>();
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(operationParser0.COMMA, schema1);
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotNull(components2);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components2.securitySchemes(hashMap0);
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotNull(components3);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNotNull(securityScheme0);
      
      SecurityScheme.Type securityScheme_Type0 = SecurityScheme.Type.APIKEY;
      SecurityScheme securityScheme1 = securityScheme0.type(securityScheme_Type0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNotNull(securityScheme1);
      
      Components components4 = components3.addSecuritySchemes(operationParser0.COMMA, securityScheme1);
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotNull(components4);
      
      Optional<ApiResponses> optional10 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getBearerFormat());
      assertEquals(SecurityScheme.Type.APIKEY, securityScheme1.getType());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getDescription());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(1, apiResponseArray0.length);
      assertEquals(0, linkArray0.length);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotNull(optional10);
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      String string0 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string2 = "z5#";
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "|ja]Eb(, 'V'hm@+t";
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = false;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      Map<String, io.swagger.oas.models.links.Link> map0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string4 = "java.langio.swagger.oas.models.parameters.RequestBody";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      String string5 = "US-ASCII";
      PathItem pathItem0 = new PathItem();
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNotNull(pathItem0);
      
      Callback callback1 = callback0.addPathItem(string5, pathItem0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(callback0, callback1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      
      String string6 = " Qe6TK6UlR0abY,4b!l";
      Callback callback2 = callback1.addPathItem(string6, pathItem0);
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertEquals(2, callback2.size());
      assertFalse(callback2.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertNotNull(callback2);
      
      String string7 = "a\\QTuNl <u&.-g!<";
      Header header0 = new Header();
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(header0);
      
      io.swagger.oas.models.media.Schema<Tag> schema1 = null;
      Header header1 = header0.schema(schema1);
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header1.get$ref());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertNull(header1.getDescription());
      assertNull(header1.getDeprecated());
      assertNull(header1.getRequired());
      assertNull(header1.getExplode());
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Example example1 = example0.externalValue(string2);
      assertNull(example1.getSummary());
      assertEquals("z5#", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertNull(example0.getSummary());
      assertEquals("z5#", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertSame(example1, example0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertSame(example0, example1);
      assertNotNull(example1);
      
      String string8 = "m}iIZwJx";
      Example example2 = example1.$ref(string8);
      assertNull(example1.getSummary());
      assertEquals("z5#", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("m}iIZwJx", example1.get$ref());
      assertEquals("z5#", example2.getExternalValue());
      assertNull(example2.getDescription());
      assertNull(example2.getSummary());
      assertEquals("m}iIZwJx", example2.get$ref());
      assertNull(example0.getSummary());
      assertEquals("z5#", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("m}iIZwJx", example0.get$ref());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertSame(example0, example2);
      assertSame(example0, example1);
      assertNotNull(example2);
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "#/components/securitySchemes/";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[8];
      String string1 = "\"^58i@@\\";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      String string2 = "java.langio.swagger.oas.models.parameters.Parameter";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string2, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Components components1 = components0.links(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      components0.setSecuritySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      
      String string3 = "x-";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string4 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string4);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example1.get$ref());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertSame(example0, example1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      assertEquals(8, exampleObjectArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(components0, components1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string0 = "m:$q@x";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      String string1 = "io.swagge";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.securitySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string2 = "";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      
      String string3 = "]xZECH^: -w>/";
      Callback callback2 = callback1.addPathItem(string3, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback2);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback1);
      assertNotNull(callback2);
      
      Callback callback3 = callback2.addPathItem(string2, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback3.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback0, callback3);
      assertSame(callback1, callback2);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback3, callback0);
      assertNotNull(callback3);
      
      Callback callback4 = callback3.addPathItem(string3, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback3.size());
      assertFalse(callback4.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback4);
      assertSame(callback0, callback1);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback3, callback0);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertNotNull(callback4);
      
      Components components2 = components1.addCallbacks(string2, callback4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback3.size());
      assertFalse(callback4.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback4);
      assertSame(callback0, callback1);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback3, callback0);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string2);
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      
      Components components3 = components2.addSchemas(string2, arraySchema2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback3.size());
      assertFalse(callback4.isEmpty());
      assertEquals(2, callback4.size());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback4);
      assertSame(callback0, callback1);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback3, callback0);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(components3);
      
      Link[] linkArray0 = new Link[1];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(1, linkArray0.length);
      assertNotNull(map0);
      
      Components components4 = components3.links(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback3.size());
      assertFalse(callback4.isEmpty());
      assertEquals(2, callback4.size());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMaxItems());
      assertEquals(1, linkArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback4);
      assertSame(callback0, callback1);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(callback2, callback0);
      assertSame(callback2, callback4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback3, callback0);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 1862;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean1).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean2 = true;
      String string0 = "java.langio.swagger.oas.models.parameters.Parameter";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      String string1 = "!e";
      String string2 = null;
      Class<io.swagger.oas.models.media.ArraySchema> class0 = io.swagger.oas.models.media.ArraySchema.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      boolean boolean3 = true;
      String string3 = "#/components/schemas/";
      String string4 = "java.langio.swagger.oas.models.parameters.Parameter";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, boolean3).when(parameter0).deprecated();
      doReturn(string0, string3).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string1, string4).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean2, boolean3).when(parameter0).required();
      doReturn(schema1).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.securitySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string5 = "";
      Callback callback0 = new Callback();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNotNull(callback0);
      
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string5, pathItem0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      
      String string6 = "]xZECH^: -w>/";
      Callback callback2 = callback1.addPathItem(string6, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertNotNull(callback2);
      
      Callback callback3 = callback2.addPathItem(string5, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback3, callback0);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertNotNull(callback3);
      
      Callback callback4 = callback3.addPathItem(string6, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback4);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback3, callback0);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertNotNull(callback4);
      
      Components components2 = components1.addCallbacks(string5, callback4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback4);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback3, callback0);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string5);
      assertNull(arraySchema1.getMaxLength());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      
      Components components3 = components2.addSchemas(string5, arraySchema2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(callback0, callback4);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback3, callback0);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(components3);
      
      Link[] linkArray0 = new Link[1];
      String string7 = "";
      String string8 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(link0).description();
      doReturn(string0).when(link0).name();
      doReturn(string6, string7).when(link0).operationId();
      doReturn(string8).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(1, linkArray0.length);
      assertNotNull(map0);
      
      Components components4 = components3.links(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertEquals(1, linkArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(string5, string7);
      assertSame(callback0, callback4);
      assertSame(callback0, callback3);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback3);
      assertSame(callback1, callback0);
      assertSame(callback1, callback4);
      assertSame(callback1, callback2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(callback2, callback3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback3, callback0);
      assertSame(callback3, callback4);
      assertSame(callback3, callback2);
      assertSame(callback3, callback1);
      assertSame(callback4, callback1);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      String string0 = "F[&q'=PJ@Is]1jS ";
      String string1 = "";
      String string2 = "&0O>$OCX;H ~.'^zU";
      String string3 = "";
      String string4 = "+";
      String string5 = "^tZ?du LO&";
      String string6 = "BASE_CLASSES";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string1).when(exampleObject0).externalValue();
      doReturn(string0, string1, string1, string1, string0).when(exampleObject0).name();
      doReturn(string1, string1).when(exampleObject0).summary();
      doReturn(string3, string4, string3, string5).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      String string7 = "java.langio.swagger.oas.models.parameters.Parameter";
      String string8 = "8G\"y#P@Rx\"";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string4, string7).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[2] = contentArray0[1];
      contentArray0[4] = contentArray0[3];
      contentArray0[7] = contentArray0[4];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string9 = "]v\"|J ";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNotNull(link0);
      
      Components components1 = new Components();
      assertTrue(components1.equals((Object)components0));
      assertNotNull(components1);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components2 = components1.callbacks(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertNotSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertNotSame(components2, components0);
      assertNotNull(components2);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map0 = apiResponse0.getHeaders();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map0);
      
      Components components3 = components2.headers(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertFalse(components3.equals((Object)components0));
      assertSame(components1, components3);
      assertNotSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(components2, components0);
      assertSame(components3, components1);
      assertNotSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = null;
      Components components4 = components3.parameters(map1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(components4.equals((Object)components0));
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertFalse(components3.equals((Object)components0));
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertNotSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[0];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "x-";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      String string2 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string2);
      assertNull(example0.get$ref());
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example1.get$ref());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertSame(example0, example1);
      assertNotSame(string2, string1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      assertEquals(9, exampleObjectArray0.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[6];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      Content content0 = null;
      String string0 = ";Oxq\"hu!$=B2abp|";
      String string1 = "(`H]'2G\"#sB";
      String string2 = "lEk$le>/zx3K.-0";
      Link[] linkArray0 = new Link[2];
      String string3 = null;
      String string4 = null;
      String string5 = "io.swagger.jaxrs2.OperationParser";
      String string6 = "java.langjava.lang.Object";
      String string7 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string8 = "java.langio.swagger.oas.models.parameters.Parameter";
      String string9 = "-jG4gD1Bp'gUn|";
      String string10 = "nqo{#OYTf[";
      String string11 = null;
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(linkParameters0).expression();
      doReturn(string4, string2, string10).when(linkParameters0).name();
      String string12 = "WAF,FROwh.9gm<8";
      String string13 = "java.lang";
      String string14 = "java.langio.swagger.jaxrs2.OperationParser";
      String string15 = "3A!!K(v0[";
      String string16 = null;
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string10, string14, string15, string16).when(linkParameters1).expression();
      doReturn(string0, string12, string13, string3, string14).when(linkParameters1).name();
      String string17 = null;
      LinkParameters linkParameters2 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string17).when(linkParameters2).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0, string4, string5, string3).when(link0).description();
      doReturn(string0, string10, string2, string1, string11).when(link0).name();
      doReturn(string6, string7, string4, string8, string9).when(link0).operationId();
      doReturn(string3, string2, string7, string3, string7).when(link0).operationRef();
      doReturn(linkParameters0, linkParameters1, linkParameters0, linkParameters2, linkParameters1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      String string18 = "; expected&Class<Jso Serializer>";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string2).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string2, string18, string18, string18, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.responses(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string19 = "=Rdtc W]^";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNotNull(arraySchema0);
      
      Components components2 = components1.addSchemas(string19, arraySchema0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      String string20 = "VALUE_NULL";
      Callback callback0 = new Callback();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNotNull(callback0);
      
      PathItem pathItem0 = new PathItem();
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertNotNull(pathItem0);
      
      Callback callback1 = callback0.addPathItem(string19, pathItem0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      
      Components components3 = components2.addCallbacks(string20, callback1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string14));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string20, string12);
      assertNotSame(string20, string5);
      assertNotSame(string20, string2);
      assertNotSame(string20, string6);
      assertNotSame(string20, string15);
      assertNotSame(string20, string8);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string20, string9);
      assertNotSame(string20, string0);
      assertNotSame(string20, string7);
      assertNotSame(string20, string19);
      assertNotSame(string20, string18);
      assertNotSame(string20, string13);
      assertNotSame(string20, string14);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      String string21 = null;
      String string22 = components2.toString();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertFalse(string22.equals((Object)string13));
      assertFalse(string22.equals((Object)string7));
      assertFalse(string22.equals((Object)string19));
      assertFalse(string22.equals((Object)string18));
      assertFalse(string22.equals((Object)string2));
      assertFalse(string22.equals((Object)string6));
      assertFalse(string22.equals((Object)string15));
      assertFalse(string22.equals((Object)string20));
      assertFalse(string22.equals((Object)string12));
      assertFalse(string22.equals((Object)string10));
      assertFalse(string22.equals((Object)string9));
      assertFalse(string22.equals((Object)string0));
      assertFalse(string22.equals((Object)string14));
      assertFalse(string22.equals((Object)string8));
      assertFalse(string22.equals((Object)string1));
      assertFalse(string22.equals((Object)string5));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertNotSame(string22, string13);
      assertNotSame(string22, string7);
      assertNotSame(string22, string19);
      assertNotSame(string22, string18);
      assertNotSame(string22, string2);
      assertNotSame(string22, string6);
      assertNotSame(string22, string15);
      assertNotSame(string22, string20);
      assertNotSame(string22, string12);
      assertNotSame(string22, string10);
      assertNotSame(string22, string9);
      assertNotSame(string22, string0);
      assertNotSame(string22, string14);
      assertNotSame(string22, string8);
      assertNotSame(string22, string1);
      assertNotSame(string22, string5);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string19, string22);
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotNull(string22);
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNotNull(link1);
      
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      io.swagger.oas.models.links.Link link2 = link1.server(server0);
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertNotNull(link2);
      
      io.swagger.oas.models.links.Link link3 = link2.parameters(string20, string21);
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string22));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string14));
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertNotSame(string20, string12);
      assertNotSame(string20, string5);
      assertNotSame(string20, string2);
      assertNotSame(string20, string22);
      assertNotSame(string20, string6);
      assertNotSame(string20, string15);
      assertNotSame(string20, string8);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string20, string9);
      assertNotSame(string20, string0);
      assertNotSame(string20, string7);
      assertNotSame(string20, string19);
      assertNotSame(string20, string18);
      assertNotSame(string20, string13);
      assertNotSame(string20, string14);
      assertNotNull(link3);
      
      Components components4 = components3.addLinks(string21, link3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertFalse(string19.equals((Object)string22));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string22));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string14));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string19, string22);
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNotSame(string20, string12);
      assertNotSame(string20, string5);
      assertNotSame(string20, string2);
      assertNotSame(string20, string22);
      assertNotSame(string20, string6);
      assertNotSame(string20, string15);
      assertNotSame(string20, string8);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string20, string9);
      assertNotSame(string20, string0);
      assertNotSame(string20, string7);
      assertNotSame(string20, string19);
      assertNotSame(string20, string18);
      assertNotSame(string20, string13);
      assertNotSame(string20, string14);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNotNull(components4);
      
      Produces produces1 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces1, produces0, components4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getDescription());
      assertNull(pathItem0.getSummary());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertEquals(6, apiResponseArray0.length);
      assertFalse(string19.equals((Object)string22));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string22));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string14));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string19, string22);
      assertNotSame(string19, string2);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string10);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string20);
      assertNotSame(string19, string18);
      assertNotSame(string19, string9);
      assertNotSame(string19, string0);
      assertNotSame(string19, string12);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNotSame(string20, string12);
      assertNotSame(string20, string5);
      assertNotSame(string20, string2);
      assertNotSame(string20, string22);
      assertNotSame(string20, string6);
      assertNotSame(string20, string15);
      assertNotSame(string20, string8);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string20, string9);
      assertNotSame(string20, string0);
      assertNotSame(string20, string7);
      assertNotSame(string20, string19);
      assertNotSame(string20, string18);
      assertNotSame(string20, string13);
      assertNotSame(string20, string14);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNotNull(optional0);
      
      Link[] linkArray1 = new Link[6];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string23 = "h7?(<A9#.),=7@O-E";
      String string24 = "java.lang";
      String string25 = "ijAPJ:-Q9G\"l>";
      String string26 = "java.lang";
      String string27 = null;
      String string28 = "{c!4;}c1_riJr";
      String string29 = "Zkk_\"v Q_U:'#&{[7+";
      String string30 = "pvA";
      String string31 = "<>_KEfrB";
      String string32 = "TG3Zx%+|@_s6&_A0";
      String string33 = "B3RCVmAe,wk-K";
      String string34 = "java.langio.swagger.oas.models.security.SecurityScheme";
      String string35 = "+J|bWi+sK";
      String string36 = "io.swagge";
      String string37 = "io.swagge";
      LinkParameters linkParameters3 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      String string38 = null;
      String string39 = null;
      LinkParameters linkParameters4 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      Link link4 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray1[0] = linkArray0[1];
      linkArray0[0] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray1);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(6, linkArray1.length);
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertNotSame(linkArray1, linkArray0);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      String string0 = "9Pwt";
      String string1 = "a&8hS";
      String string2 = null;
      String string3 = "java.langio.swagger.oas.models.security.SecurityScheme";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = false;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      String string4 = ",";
      boolean boolean2 = false;
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string5 = "#/components/schemas/";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean0).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string1, string5).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string4, string2).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      String string6 = "_z{]dF6t08Dg,e";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      io.swagger.oas.models.links.Link link1 = link0.operationId(string6);
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.getDescription());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertSame(link1, link0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertSame(link0, link1);
      assertNotNull(link1);
      
      Components components3 = components2.addLinks(string6, link1);
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.getDescription());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertSame(link1, link0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertSame(link0, link1);
      assertNotNull(components3);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.Schema<Example> schema1 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema1);
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getDescription());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)arraySchema2.getProperties();
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getDescription());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNull(map1);
      
      Components components4 = components3.schemas(map1);
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.getDescription());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertSame(link1, link0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertSame(link0, link1);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean0 = true;
      String string0 = "java.langio.swagger.oasMmodels0responses.ApiResponses";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      String string1 = ".%A#Cu";
      String string2 = "X>,}UP2?$ydnt[-svek";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "<~7:";
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string4 = "%R1CQ!";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      requestBody0.setRequired(boolean1);
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertTrue(boolean1.equals((Object)boolean0));
      
      Components components1 = components0.addRequestBodies(string4, requestBody0);
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotNull(components1);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components1);
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertEquals(1, parameterArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(linkParameters0).expression();
      doReturn(string0, string2).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotNull(map0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string5 = "java.langio.swagger.oas.models.parameters.Parameter";
      MediaType mediaType1 = mediaType0.example(string5);
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertSame(mediaType0, mediaType1);
      assertNull(map1);
      
      MediaType mediaType2 = mediaType1.examples(map1);
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType2.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      String string6 = "Class ";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNotNull(encoding0);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNotNull(link0);
      
      Map<String, Header> map2 = link0.getHeaders();
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(map2);
      
      Encoding encoding1 = encoding0.headers(map2);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      
      MediaType mediaType3 = mediaType2.addEncoding(string6, encoding1);
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType3.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertNotNull(mediaType3);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string2);
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema2.getType());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema1.getType());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertSame(arraySchema2, arraySchema1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertSame(arraySchema1, arraySchema2);
      assertNotNull(arraySchema2);
      
      MediaType mediaType4 = mediaType3.schema(arraySchema2);
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema2.getType());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType4.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType3.getExample());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema1.getType());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertSame(arraySchema2, arraySchema1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(arraySchema1, arraySchema2);
      assertNotNull(mediaType4);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string3, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema2.getType());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType4.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType3.getExample());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema1.getType());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertSame(arraySchema2, arraySchema1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(arraySchema1, arraySchema2);
      assertNotNull(optional1);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string6, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      String string0 = "WQh(!C^2yKZ:k|+X";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      boolean boolean0 = false;
      String string1 = "; ";
      String string2 = "A'D3$8yN{`U]qAmT[FI";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 69;
      String string3 = "java.langjava.lang.Object";
      String string4 = null;
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string2, stringArray0[2], (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[3], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(stringArray0[3]).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).minimum();
      doReturn(string4).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(string0, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(4, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(optional0);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(contact0).email();
      doReturn(string4).when(contact0).name();
      doReturn(string4).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = "io.swagge";
      stringArray1[0] = string5;
      String string6 = "";
      stringArray1[1] = string6;
      String string7 = "java.langio.swagger.jaxrs2.OperationParser";
      stringArray1[2] = string7;
      String string8 = "pe48bieeH:C\"x,";
      stringArray1[3] = string8;
      String string9 = "java.langjava.lang.Object";
      stringArray1[4] = string9;
      String string10 = "`%VMRT4";
      stringArray1[5] = string10;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(optional2);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      Components components1 = components0.addExamples(string1, example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.requestBodies(hashMap0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      Map<String, Header> map0 = components2.getHeaders();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(map0);
      
      Components components3 = components2.headers(map0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string11 = "oPkX>GK!~8CQ$GPMP";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNotNull(encoding0);
      
      MediaType mediaType1 = mediaType0.addEncoding(string11, encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string5);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType0, mediaType1);
      assertNotNull(mediaType1);
      
      Map<String, Example> map1 = mediaType1.getExamples();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string5);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType0, mediaType1);
      assertNull(map1);
      
      Components components4 = components3.examples(map1);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType0.getExample());
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string5);
      assertSame(mediaType1, mediaType0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string11);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(mediaType0, mediaType1);
      assertNotNull(components4);
      
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(mediaType1.getExample());
      assertEquals(4, apiResponseArray0.length);
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string11);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string5);
      assertSame(mediaType1, mediaType0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = null;
      boolean boolean0 = true;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.DEFAULT;
      String string0 = "X>,}UP2?$ydnt[-svek";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string1 = "java.langio.swagger.oas.models.parameters.Parameter";
      MediaType mediaType1 = mediaType0.example(string1);
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.parameters.Parameter", mediaType1.getExample());
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string1, string0);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string2 = "Class ";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNotNull(encoding0);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string0);
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema1.getType());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getMaxItems());
      assertEquals("X>,}UP2?$ydnt[-svek", arraySchema2.getType());
      assertNull(arraySchema2.getMinItems());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(arraySchema2);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      String string3 = ":w\\Ze{Ur/K[Z&p*)";
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      assertEquals(1, parameterArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-400);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      int int2 = 1845;
      String string0 = "J98'Pb@v";
      String string1 = "5xD\"GH5].qKuPw/k;";
      String string2 = null;
      String string3 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      String string0 = "9Pwt";
      String string1 = "a&8hS";
      String string2 = null;
      String string3 = "java.langio.swagger.oas.models.security.SecurityScheme";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string4 = "^@[Svu=";
      String string5 = "-IblP!!]hbt";
      String string6 = "java.lang";
      String string7 = "!|$($sj]`\\nxqH$&A";
      String string8 = "ADJUST_DATES_TO_CONTEXT_TIME_ZONE";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string4, string2, string5, string6).when(exampleObject0).name();
      doReturn(string2, string7, (String) null).when(exampleObject0).summary();
      doReturn(string6, string8, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      String string9 = "com.fasterxml.jackson.databind.cfg.MapperConfigBase";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn(string9, string4).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = false;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      String string10 = ",";
      boolean boolean2 = false;
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string11 = "#/components/schemas/";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean0).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string1, string11).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string10, string2).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string12 = "_z{]dF6t08Dg,e";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      io.swagger.oas.models.links.Link link1 = link0.operationId(string12);
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string8);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string0);
      assertNotSame(string12, string7);
      assertNotSame(string12, string5);
      assertNotSame(string12, string4);
      assertNotSame(string12, string1);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertNotNull(link1);
      
      Components components2 = components0.addLinks(string12, link1);
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string8);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string0);
      assertNotSame(string12, string7);
      assertNotSame(string12, string5);
      assertNotSame(string12, string4);
      assertNotSame(string12, string1);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getReadOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.Schema<Example> schema2 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema2);
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getReadOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMinProperties());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)arraySchema2.getProperties();
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getReadOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMinProperties());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNull(map1);
      
      Components components3 = components2.schemas(map1);
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getReadOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMinProperties());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string8);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string0);
      assertNotSame(string12, string7);
      assertNotSame(string12, string5);
      assertNotSame(string12, string4);
      assertNotSame(string12, string1);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter0, components3);
      assertNull(link0.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getReadOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getMinProperties());
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getMinItems());
      assertEquals(2, contentArray0.length);
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(explode0.equals((Object)explode1));
      assertFalse(explode1.equals((Object)explode0));
      assertFalse(explode1.equals((Object)explode2));
      assertFalse(explode2.equals((Object)explode1));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(boolean2 == boolean0);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string12));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string1, string12);
      assertNotSame(string1, string11);
      assertNotSame(string1, string8);
      assertNotSame(string1, string10);
      assertNotSame(string1, string6);
      assertNotSame(string1, string9);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string12, string11);
      assertNotSame(string12, string10);
      assertNotSame(string12, string8);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string0);
      assertNotSame(string12, string7);
      assertNotSame(string12, string5);
      assertNotSame(string12, string4);
      assertNotSame(string12, string1);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(explode0, explode2);
      assertNotSame(explode0, explode1);
      assertNotSame(explode1, explode0);
      assertNotSame(explode1, explode2);
      assertNotSame(explode2, explode1);
      assertSame(explode2, explode0);
      assertNotSame(string10, string11);
      assertNotSame(string10, string7);
      assertNotSame(string10, string12);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string4);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string8);
      assertNotSame(string11, string8);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string9);
      assertNotSame(string11, string1);
      assertNotSame(string11, string5);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string6);
      assertNotSame(string11, string12);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      String string0 = "Failed to getValue() with method ";
      String string1 = "com.fasterxml.jackson.databind.SerializationConfig";
      String string2 = "n\\;/}Y1'wCq&";
      String string3 = "ix`[_iG,o3-65w";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(externalDocumentation0).description();
      doReturn(string1, string3).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(optional0);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string4 = "\nRequest payload : ";
      Set<String> set0 = hashMap0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string4));
      assertNotNull(set0);
      
      components0.setRequestBodies(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RequestBody requestBody0 = null;
      String string5 = "}gnL]f(JT'H^>:VG";
      components0.addExtension(string5, string4);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional2);
      
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertNotNull(optional3);
      
      Link[] linkArray0 = new Link[1];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1, linkArray0.length);
      assertNotNull(map0);
      
      Parameter[] parameterArray0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-400);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 1845;
      Class<Void> class1 = Void.class;
      String string0 = "no description";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = "    schemas: ";
      String string2 = "*/*";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string3 = "R=yf?";
      int int3 = Integer.MAX_VALUE;
      String string4 = "";
      int int4 = 1187;
      String string5 = "X%XI=?Gfyfc";
      String string6 = "Numeric value (%s) out of range of long (%d - %s)";
      boolean boolean2 = true;
      String string7 = "0I{LVf0%";
      String string8 = "java.langio.swagger.oas.models.parameters.RequestBody";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      String string9 = "java.langio.swagger.jaxrs2.OperationParser";
      String string10 = "java.langio.swagger.oas.models.parameters.RequestBody";
      boolean boolean3 = true;
      boolean boolean4 = false;
      String string11 = "[0+ _FM";
      int int5 = 1;
      String string12 = "000";
      String string13 = "3^xBlqwO3p88H]oR";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(schema2)._default();
      doReturn(boolean0, false).when(schema2).deprecated();
      doReturn(string0, (String) null).when(schema2).description();
      doReturn(string10, string0, (String) null).when(schema2).example();
      doReturn(boolean3, false).when(schema2).exclusiveMaximum();
      doReturn(boolean4).when(schema2).exclusiveMinimum();
      doReturn(string11, (String) null).when(schema2).format();
      doReturn(int5).when(schema2).maxLength();
      doReturn(0).when(schema2).maxProperties();
      doReturn(string12, (String) null).when(schema2).maximum();
      doReturn(int2, 0).when(schema2).minProperties();
      doReturn(string5, (String) null).when(schema2).pattern();
      doReturn(boolean2, false).when(schema2).readOnly();
      doReturn(stringArray0[4], (String) null).when(schema2).ref();
      doReturn(string10, (String) null).when(schema2).type();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "x-";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      String string2 = "*TihU;.M06p'";
      Example example1 = example0.summary(string2);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertEquals("*TihU;.M06p'", example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example1.get$ref());
      assertEquals("*TihU;.M06p'", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(example0, example1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      assertEquals(0, exampleObjectArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = null;
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNotNull(requestBody1);
      
      Components components2 = components1.addRequestBodies(string0, requestBody1);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(apiResponses0);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertNotNull(apiResponses1);
      
      ApiResponses apiResponses2 = apiResponses1._default(apiResponse0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(1, apiResponses2.size());
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses0);
      assertNotNull(apiResponses2);
      
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string0, apiResponse0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(2, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(2, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(2, apiResponses2.size());
      assertEquals(2, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses2);
      assertNotNull(apiResponses3);
      
      hashMap0.putAll(apiResponses3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(apiResponses0.isEmpty());
      assertEquals(2, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(2, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(2, apiResponses2.size());
      assertEquals(2, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses2);
      
      Components components3 = components2.responses(hashMap0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components3);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components3);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, contentArray0.length);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string0 = "I:OMQE";
      Example example0 = new Example();
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      MediaType mediaType1 = mediaType0.addExamples(string0, example0);
      assertNull(mediaType0.getExample());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string1 = "ie>`%T02VY~AN|";
      Encoding encoding0 = null;
      MediaType mediaType2 = mediaType1.addEncoding(string1, encoding0);
      assertNull(mediaType0.getExample());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string1, string0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      assertNull(mediaType0.getExample());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotNull(map0);
      
      MediaType mediaType3 = mediaType2.encoding(map0);
      assertNull(mediaType0.getExample());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNull(mediaType3.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string1, string0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType3);
      
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType3, exampleObject0);
      assertNull(mediaType0.getExample());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNull(mediaType3.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string1, string0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNull(mediaType0.getExample());
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      Components components1 = components0.responses(apiResponses0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getDescription());
      assertNotNull(arraySchema0);
      
      Components components2 = components1.addSchemas(apiResponses0.DEFAULT, arraySchema0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      String string0 = "|*RCo|5;-9";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNotNull(parameter0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.allowEmptyValue(boolean1);
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertTrue(parameter0.getAllowEmptyValue());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertNotNull(parameter1);
      
      Components components3 = components2.addParameters(string0, parameter1);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getDescription());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertTrue(parameter0.getAllowEmptyValue());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components4 = components3.examples(hashMap0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getDescription());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertTrue(parameter0.getAllowEmptyValue());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getDescription());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertTrue(parameter0.getAllowEmptyValue());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDeprecated());
      assertTrue(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      String string0 = "sx+@ev>a;>#MDNfB6k#";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string0 = "    name: ";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      MediaType mediaType2 = mediaType1.addExamples(string0, example0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType2.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNotNull(arraySchema0);
      
      MediaType mediaType3 = mediaType2.schema(arraySchema0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertNotNull(mediaType3);
      
      Map<String, Example> map1 = null;
      mediaType3.setExamples(map1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      
      String string1 = "W=uHLFrLMXa";
      String string2 = mediaType3.toString();
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      
      MediaType mediaType4 = mediaType3.example(string1);
      assertEquals("W=uHLFrLMXa", mediaType0.getExample());
      assertEquals("W=uHLFrLMXa", mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType2.getExample());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType3.getExample());
      assertEquals("W=uHLFrLMXa", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotNull(mediaType4);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertEquals("W=uHLFrLMXa", mediaType0.getExample());
      assertEquals("W=uHLFrLMXa", mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType2.getExample());
      assertNull(arraySchema0.getMinProperties());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType3.getExample());
      assertEquals("W=uHLFrLMXa", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "com.fasterxml.jackson.databind.ser.std.SqlDateSerializer";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(2, serverArray0.length);
      assertNotNull(optional1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertNotNull(map1);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "*/*";
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNotNull(schema0);
      
      Components components2 = components1.addSchemas(string0, schema0);
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      String string1 = "TrH,*yLW\\W";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      String string2 = "";
      PathItem pathItem0 = new PathItem();
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertNotNull(pathItem0);
      
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback1.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(callback0, callback1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertNotNull(callback1);
      
      String string3 = "+INF";
      Callback callback2 = callback1.addPathItem(string3, pathItem0);
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback2, callback0);
      assertSame(callback2, callback1);
      assertNotNull(callback2);
      
      Components components3 = components2.addCallbacks(string1, callback2);
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback2, callback0);
      assertSame(callback2, callback1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      
      io.swagger.oas.models.links.Link link0 = null;
      Components components4 = components3.addLinks(string3, link0);
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback2, callback0);
      assertSame(callback2, callback1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotNull(components4);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertEquals(2, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertFalse(callback1.isEmpty());
      assertEquals(2, callback1.size());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(callback0, callback2);
      assertSame(callback0, callback1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(callback2, callback0);
      assertSame(callback2, callback1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[5];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components1 = components0.links(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      Link[] linkArray0 = new Link[6];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(6, linkArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      Map<String, Encoding> map0 = mediaType0.getEncoding();
      assertNull(mediaType0.getExample());
      assertSame(mediaType0, mediaType1);
      assertNull(map0);
      
      MediaType mediaType2 = mediaType1.encoding(map0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string1 = "not a valid long value";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Components components2 = components1.addResponses(string1, apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      
      String string2 = "-k:N!LS:";
      Header header0 = null;
      Components components3 = components2.addHeaders(string2, header0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotNull(components3);
      
      String string3 = "|";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNotNull(parameter1);
      
      Boolean boolean0 = Boolean.valueOf(string3);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotNull(boolean0);
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.allowReserved(boolean0);
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertFalse(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getName());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertFalse(parameter2.getAllowReserved());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.allowEmptyValue(boolean1);
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertFalse(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDeprecated());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getName());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertFalse(parameter2.getAllowReserved());
      assertNull(parameter3.get$ref());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getExplode());
      assertFalse(parameter3.getAllowReserved());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getName());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(parameter1, parameter3);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter1);
      assertNotNull(parameter3);
      
      Components components4 = components3.addParameters(string3, parameter3);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertFalse(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDeprecated());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getName());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExplode());
      assertFalse(parameter2.getAllowReserved());
      assertNull(parameter3.get$ref());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getExplode());
      assertFalse(parameter3.getAllowReserved());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getName());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(parameter1, parameter3);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[2];
      String string0 = "I";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(optional1);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.parameters(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.securitySchemes(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      String string2 = "s/HX7";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean0);
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNotNull(requestBody1);
      
      io.swagger.oas.models.parameters.RequestBody requestBody2 = requestBody1.description(string1);
      assertTrue(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("", requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(requestBody2);
      
      Components components3 = components2.addRequestBodies(string2, requestBody2);
      assertTrue(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("", requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(components3);
      
      Tag tag0 = new Tag();
      assertNull(tag0.getName());
      assertNull(tag0.getDescription());
      assertNotNull(tag0);
      
      io.swagger.oas.models.ExternalDocumentation externalDocumentation0 = null;
      Tag tag1 = tag0.externalDocs(externalDocumentation0);
      assertNull(tag0.getName());
      assertNull(tag0.getDescription());
      assertNull(tag1.getDescription());
      assertNull(tag1.getName());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertNotNull(tag1);
      
      Map<String, Object> map1 = tag1.getExtensions();
      assertNull(tag0.getName());
      assertNull(tag0.getDescription());
      assertNull(tag1.getDescription());
      assertNull(tag1.getName());
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertNull(map1);
      
      components3.setExtensions(map1);
      assertTrue(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("", requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(tag0.getName());
      assertNull(tag0.getDescription());
      assertNull(tag1.getDescription());
      assertNull(tag1.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components4 = components3.addParameters(stringArray0[1], parameter0);
      assertTrue(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("", requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      Link[] linkArray0 = new Link[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(2, linkArray0.length);
      assertNotNull(map0);
      
      String[] stringArray0 = new String[1];
      String string0 = "; illegal combination";
      stringArray0[0] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[5];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(5, serverArray0.length);
      assertNotNull(optional1);
      
      ArraySchema arraySchema0 = null;
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional2);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotNull(map1);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema1).maxItems();
      doReturn(0, 0).when(arraySchema1).minItems();
      doReturn((Schema) null).when(arraySchema1).schema();
      doReturn(false).when(arraySchema1).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema1);
      assertTrue(optional1.equals((Object)optional0));
      assertNotSame(optional1, optional0);
      assertNotNull(optional1);
      
      LinkParameters linkParameters0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "vhN\\lks|";
      io.swagger.oas.models.media.ArraySchema arraySchema2 = new io.swagger.oas.models.media.ArraySchema();
      assertEquals("array", arraySchema2.getType());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertNotNull(arraySchema2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema3 = arraySchema2.type(string0);
      assertNull(arraySchema3.getMaxItems());
      assertNull(arraySchema3.getReadOnly());
      assertNull(arraySchema3.getMinItems());
      assertNull(arraySchema3.getNullable());
      assertNull(arraySchema3.getUniqueItems());
      assertNull(arraySchema3.getMinLength());
      assertNull(arraySchema3.getPattern());
      assertNull(arraySchema3.getName());
      assertNull(arraySchema3.getFormat());
      assertNull(arraySchema3.getDeprecated());
      assertNull(arraySchema3.getExclusiveMinimum());
      assertNull(arraySchema3.getMinProperties());
      assertNull(arraySchema3.getMaxProperties());
      assertNull(arraySchema3.getWriteOnly());
      assertEquals("vhN\\lks|", arraySchema3.getType());
      assertNull(arraySchema3.getDescription());
      assertNull(arraySchema3.get$ref());
      assertNull(arraySchema3.getExclusiveMaximum());
      assertNull(arraySchema3.getMaxLength());
      assertNull(arraySchema3.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("vhN\\lks|", arraySchema2.getType());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertSame(arraySchema3, arraySchema2);
      assertSame(arraySchema2, arraySchema3);
      assertNotNull(arraySchema3);
      
      Components components1 = components0.addSchemas(string0, arraySchema3);
      assertNull(arraySchema3.getMaxItems());
      assertNull(arraySchema3.getReadOnly());
      assertNull(arraySchema3.getMinItems());
      assertNull(arraySchema3.getNullable());
      assertNull(arraySchema3.getUniqueItems());
      assertNull(arraySchema3.getMinLength());
      assertNull(arraySchema3.getPattern());
      assertNull(arraySchema3.getName());
      assertNull(arraySchema3.getFormat());
      assertNull(arraySchema3.getDeprecated());
      assertNull(arraySchema3.getExclusiveMinimum());
      assertNull(arraySchema3.getMinProperties());
      assertNull(arraySchema3.getMaxProperties());
      assertNull(arraySchema3.getWriteOnly());
      assertEquals("vhN\\lks|", arraySchema3.getType());
      assertNull(arraySchema3.getDescription());
      assertNull(arraySchema3.get$ref());
      assertNull(arraySchema3.getExclusiveMaximum());
      assertNull(arraySchema3.getMaxLength());
      assertNull(arraySchema3.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("vhN\\lks|", arraySchema2.getType());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertSame(arraySchema3, arraySchema2);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertSame(arraySchema2, arraySchema3);
      assertNotNull(components1);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertNull(arraySchema3.getMaxItems());
      assertNull(arraySchema3.getReadOnly());
      assertNull(arraySchema3.getMinItems());
      assertNull(arraySchema3.getNullable());
      assertNull(arraySchema3.getUniqueItems());
      assertNull(arraySchema3.getMinLength());
      assertNull(arraySchema3.getPattern());
      assertNull(arraySchema3.getName());
      assertNull(arraySchema3.getFormat());
      assertNull(arraySchema3.getDeprecated());
      assertNull(arraySchema3.getExclusiveMinimum());
      assertNull(arraySchema3.getMinProperties());
      assertNull(arraySchema3.getMaxProperties());
      assertNull(arraySchema3.getWriteOnly());
      assertEquals("vhN\\lks|", arraySchema3.getType());
      assertNull(arraySchema3.getDescription());
      assertNull(arraySchema3.get$ref());
      assertNull(arraySchema3.getExclusiveMaximum());
      assertNull(arraySchema3.getMaxLength());
      assertNull(arraySchema3.getTitle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("vhN\\lks|", arraySchema2.getType());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertSame(arraySchema3, arraySchema2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(arraySchema2, arraySchema3);
      assertNotNull(components2);
      
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      assertNull(arraySchema3.getMaxItems());
      assertNull(arraySchema3.getReadOnly());
      assertNull(arraySchema3.getMinItems());
      assertNull(arraySchema3.getNullable());
      assertNull(arraySchema3.getUniqueItems());
      assertNull(arraySchema3.getMinLength());
      assertNull(arraySchema3.getPattern());
      assertNull(arraySchema3.getName());
      assertNull(arraySchema3.getFormat());
      assertNull(arraySchema3.getDeprecated());
      assertNull(arraySchema3.getExclusiveMinimum());
      assertNull(arraySchema3.getMinProperties());
      assertNull(arraySchema3.getMaxProperties());
      assertNull(arraySchema3.getWriteOnly());
      assertEquals("vhN\\lks|", arraySchema3.getType());
      assertNull(arraySchema3.getDescription());
      assertNull(arraySchema3.get$ref());
      assertNull(arraySchema3.getExclusiveMaximum());
      assertNull(arraySchema3.getMaxLength());
      assertNull(arraySchema3.getTitle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxLength());
      assertEquals("vhN\\lks|", arraySchema2.getType());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinProperties());
      assertEquals(4, apiResponseArray0.length);
      assertSame(arraySchema3, arraySchema2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(arraySchema2, arraySchema3);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Content content0 = null;
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "x";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      Components components1 = components0.addExamples(string0, example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = null;
      Components components2 = components1.addSchemas(string0, schema0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = components1.getLinks();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(map1);
      
      Components components3 = components2.links(map1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(apiResponses0);
      
      Components components4 = components3.responses(apiResponses0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components4);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "com.fasterxml.jackson.databind.node.LongNode";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      Components components1 = components0.addLinks(string0, link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.responses(hashMap0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNotNull(arraySchema0);
      
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNotNull(schema0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertNotNull(arraySchema1);
      
      Components components3 = components2.addSchemas(string0, arraySchema1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Header header0 = new Header();
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNotNull(header0);
      
      ApiResponse apiResponse1 = apiResponse0.addHeaderObject(string0, header0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      
      String string1 = null;
      ApiResponse apiResponse2 = apiResponse1.link(string1, link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotNull(apiResponse2);
      
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      assertNotNull(content0);
      
      ApiResponse apiResponse3 = apiResponse2.content(content0);
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertNotNull(apiResponse3);
      
      Map<String, Header> map0 = apiResponse3.getHeaders();
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertNotNull(map0);
      
      Components components4 = components3.headers(map0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNotNull(components4);
      
      Map<String, Header> map1 = link0.getHeaders();
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(map1);
      
      Components components5 = components3.headers(map1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components5);
      
      Map<String, io.swagger.oas.models.media.Schema> map2 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(map2);
      
      Boolean boolean0 = null;
      io.swagger.oas.models.media.Schema schema1 = schema0.nullable(boolean0);
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNotNull(schema1);
      
      components5.setSchemas(map2);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components5);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getNullable());
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(optional0);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = null;
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components0.getRequestBodies();
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components2 = components1.requestBodies(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      Map<String, ApiResponse> map2 = components0.getResponses();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map2);
      
      Components components3 = components2.responses(map2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNotNull(link0);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map3 = apiResponse0.getHeaders();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(map3);
      
      io.swagger.oas.models.links.Link link1 = link0.headers(map3);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertNotNull(link1);
      
      io.swagger.oas.models.links.Link link2 = link1.description(operationParser0.COMPONENTS_REF);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertEquals("#/components/schemas/", link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("#/components/schemas/", link1.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationId());
      assertEquals("#/components/schemas/", link2.getDescription());
      assertSame(link0, link1);
      assertSame(link0, link2);
      assertSame(link1, link2);
      assertSame(link1, link0);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertNotNull(link2);
      
      Components components4 = components3.addLinks(operationParser0.COMPONENTS_REF, link2);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertEquals("#/components/schemas/", link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertEquals("#/components/schemas/", link1.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationId());
      assertEquals("#/components/schemas/", link2.getDescription());
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(link0, link1);
      assertSame(link0, link2);
      assertSame(link1, link2);
      assertSame(link1, link0);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).name();
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameters1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertNotNull(map1);
      
      String[] stringArray0 = new String[7];
      String string0 = "wA;2q'xEs1B@cG=";
      stringArray0[0] = string0;
      String string1 = "nHJl`N";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = " [truncated]";
      stringArray0[3] = string3;
      String string4 = "com.fasterxml.jackson.databind.introspect.AnnotatedClass";
      stringArray0[4] = string4;
      String string5 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[5] = string5;
      String string6 = "ALpVfQZ<(LI>";
      stringArray0[6] = string6;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = ";vv}.3T=vtwcyK8#8pW";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNotNull(securityScheme0);
      
      Components components1 = components0.addSecuritySchemes(string0, securityScheme0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, Header> map0 = components0.getHeaders();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.headers(map0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components3 = components2.responses(hashMap0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      
      HashMap<String, io.swagger.oas.models.links.Link> hashMap1 = new HashMap<String, io.swagger.oas.models.links.Link>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Components components4 = components3.links(hashMap1);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(components4);
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNotNull(encoding0);
      
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType2.getExample());
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      String string1 = "8(EWX:Y[e";
      MediaType mediaType3 = mediaType2.example(string1);
      assertEquals("8(EWX:Y[e", mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("8(EWX:Y[e", mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("8(EWX:Y[e", mediaType2.getExample());
      assertEquals("8(EWX:Y[e", mediaType3.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertNotSame(string1, string0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertNotNull(mediaType3);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertEquals("array", arraySchema0.getType());
      assertNotNull(arraySchema0);
      
      MediaType mediaType4 = mediaType3.schema(arraySchema0);
      assertEquals("8(EWX:Y[e", mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("8(EWX:Y[e", mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("8(EWX:Y[e", mediaType2.getExample());
      assertEquals("8(EWX:Y[e", mediaType3.getExample());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertEquals("array", arraySchema0.getType());
      assertEquals("8(EWX:Y[e", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertNotSame(string1, string0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertNotNull(mediaType4);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertEquals("8(EWX:Y[e", mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("8(EWX:Y[e", mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertEquals("8(EWX:Y[e", mediaType2.getExample());
      assertEquals("8(EWX:Y[e", mediaType3.getExample());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertEquals("array", arraySchema0.getType());
      assertEquals("8(EWX:Y[e", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertNotSame(string1, string0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      Parameter parameter0 = null;
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components0);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNotNull(parameter1);
      
      Map<String, Example> map1 = parameter1.getExamples();
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(map1);
      
      MediaType mediaType1 = mediaType0.examples(map1);
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNotNull(arraySchema0);
      
      MediaType mediaType2 = mediaType1.schema(arraySchema0);
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(mediaType2.getExample());
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      String string0 = null;
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      String string1 = "'&?d>q";
      Boolean boolean0 = Boolean.valueOf(string1);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Encoding encoding1 = encoding0.allowReserved(boolean0);
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertSame(encoding1, encoding0);
      assertSame(encoding0, encoding1);
      assertNotNull(encoding1);
      
      MediaType mediaType3 = mediaType2.addEncoding(string0, encoding1);
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(mediaType3.getExample());
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(encoding0, encoding1);
      assertNotNull(mediaType3);
      
      Map<String, Encoding> map2 = mediaType1.getEncoding();
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotNull(map2);
      
      MediaType mediaType4 = mediaType3.encoding(map2);
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(mediaType3.getExample());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(encoding0, encoding1);
      assertNotNull(mediaType4);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(mediaType3.getExample());
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(mediaType1.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(1, serverArray0.length);
      assertNotNull(optional1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      SecurityScheme securityScheme0 = null;
      Components components1 = components0.addSecuritySchemes(operationParser0.DEFAULT_DESCRIPTION, securityScheme0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(map0);
      
      Components components2 = components1.links(map0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(optional1);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional2);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.RequestBody> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.RequestBody>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.requestBodies(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "";
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      Components components3 = components2.links(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      Map<String, Header> map1 = components2.getHeaders();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(map1);
      
      Components components4 = components3.headers(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNotNull(parameter0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNotNull(arraySchema0);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.schema(arraySchema0);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertNotNull(parameter1);
      
      String string0 = "c";
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.name(string0);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertEquals("c", parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("c", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertEquals("c", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter2);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter0);
      assertNotNull(parameter2);
      
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.in(string0);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertEquals("c", parameter0.getIn());
      assertEquals("c", parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("c", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertEquals("c", parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertEquals("c", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertEquals("c", parameter2.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getAllowEmptyValue());
      assertEquals("c", parameter3.getName());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getExplode());
      assertEquals("c", parameter3.getIn());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getStyle());
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter2);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter0);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertNotNull(parameter3);
      
      Map<String, Example> map0 = parameter3.getExamples();
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertEquals("c", parameter0.getIn());
      assertEquals("c", parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("c", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertEquals("c", parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertEquals("c", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertEquals("c", parameter2.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getAllowEmptyValue());
      assertEquals("c", parameter3.getName());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getExplode());
      assertEquals("c", parameter3.getIn());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getStyle());
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter2);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter0);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertNull(map0);
      
      mediaType0.setExamples(map0);
      assertNull(mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertEquals("c", parameter0.getIn());
      assertEquals("c", parameter0.getName());
      assertNull(parameter0.getRequired());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("c", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertEquals("c", parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertEquals("c", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertEquals("c", parameter2.getIn());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getAllowEmptyValue());
      assertEquals("c", parameter3.getName());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getExplode());
      assertEquals("c", parameter3.getIn());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getStyle());
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter2);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter0);
      assertSame(parameter3, parameter2);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      
      String string1 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      mediaType0.addExtension(string1, string1);
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNull(mediaType0.getExample());
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(3, serverArray0.length);
      assertNotNull(optional1);
      
      ExampleObject exampleObject1 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject1).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject1);
      assertNull(mediaType0.getExample());
      assertSame(optional2, optional0);
      assertNotNull(optional2);
      
      RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Header header0 = new Header();
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string0, header0);
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Example example0 = null;
      Components components2 = components1.addExamples(string0, example0);
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map1 = apiResponse0.getHeaders();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(map1);
      
      Components components3 = components2.headers(map1);
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.media.Schema> map2 = (Map<String, io.swagger.oas.models.media.Schema>)arraySchema0.getProperties();
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(map2);
      
      Components components4 = components3.schemas(map2);
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getName());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.examples(hashMap0);
      assertNull(mediaType0.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string0 = ") out of range of Java short";
      MediaType mediaType2 = mediaType1.example(string0);
      assertEquals(") out of range of Java short", mediaType0.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(") out of range of Java short", mediaType1.getExample());
      assertEquals(") out of range of Java short", mediaType2.getExample());
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      String string1 = "EJ3'sSknHrx$3A_";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string2 = null;
      MediaType mediaType3 = mediaType1.addExamples(string1, example0);
      assertEquals(") out of range of Java short", mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(") out of range of Java short", mediaType1.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertEquals(") out of range of Java short", mediaType3.getExample());
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string1, string0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType3);
      
      HashMap<String, Encoding> hashMap1 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      MediaType mediaType4 = mediaType1.encoding(hashMap1);
      assertEquals(") out of range of Java short", mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(") out of range of Java short", mediaType1.getExample());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(") out of range of Java short", mediaType4.getExample());
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertNotNull(mediaType4);
      
      Example example1 = example0.$ref(string2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Example example2 = example1.externalValue(string1);
      assertNull(example0.getDescription());
      assertEquals("EJ3'sSknHrx$3A_", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example1.getExternalValue());
      assertNull(example2.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(example2.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertNotNull(example2);
      
      MediaType mediaType5 = mediaType2.addExamples(string1, example2);
      assertEquals(") out of range of Java short", mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(") out of range of Java short", mediaType1.getExample());
      assertEquals(") out of range of Java short", mediaType2.getExample());
      assertNull(example0.getDescription());
      assertEquals("EJ3'sSknHrx$3A_", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example1.getExternalValue());
      assertNull(example2.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(example2.getDescription());
      assertEquals(") out of range of Java short", mediaType5.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertNotSame(string1, string0);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType1);
      assertNotNull(mediaType5);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType5, exampleObject0);
      assertEquals(") out of range of Java short", mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(") out of range of Java short", mediaType1.getExample());
      assertEquals(") out of range of Java short", mediaType2.getExample());
      assertNull(example0.getDescription());
      assertEquals("EJ3'sSknHrx$3A_", example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example1.getExternalValue());
      assertNull(example2.get$ref());
      assertEquals("EJ3'sSknHrx$3A_", example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(example2.getDescription());
      assertEquals(") out of range of Java short", mediaType5.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertNotSame(string1, string0);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType1);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = null;
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components0);
      assertEquals(9, apiResponseArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      Content[] contentArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map0 = apiResponse0.getHeaders();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map0);
      
      Components components1 = components0.headers(map0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "0";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string0, securityScheme0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      ApiResponse apiResponse1 = apiResponse0.description(string0);
      assertEquals("0", apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals("0", apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      
      ApiResponse apiResponse2 = apiResponse1.$ref(string0);
      assertEquals("0", apiResponse0.getDescription());
      assertEquals("0", apiResponse0.get$ref());
      assertEquals("0", apiResponse1.getDescription());
      assertEquals("0", apiResponse1.get$ref());
      assertEquals("0", apiResponse2.get$ref());
      assertEquals("0", apiResponse2.getDescription());
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotNull(apiResponse2);
      
      Components components3 = components2.addResponses(string0, apiResponse2);
      assertEquals("0", apiResponse0.getDescription());
      assertEquals("0", apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertEquals("0", apiResponse1.getDescription());
      assertEquals("0", apiResponse1.get$ref());
      assertEquals("0", apiResponse2.get$ref());
      assertEquals("0", apiResponse2.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      String string1 = "ULpZ>q*yFDn4l";
      io.swagger.oas.models.links.Link link1 = link0.parameters(string1, string1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertSame(link0, link1);
      assertNotSame(string1, string0);
      assertSame(link1, link0);
      assertNotNull(link1);
      
      io.swagger.oas.models.links.Link link2 = link1.description(string1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link0.getDescription());
      assertNull(link1.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link2.getOperationId());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link2.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertSame(link0, link2);
      assertSame(link0, link1);
      assertNotSame(string1, string0);
      assertSame(link1, link0);
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertNotNull(link2);
      
      Components components4 = components3.addLinks(string0, link2);
      assertEquals("0", apiResponse0.getDescription());
      assertEquals("0", apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertEquals("0", apiResponse1.getDescription());
      assertEquals("0", apiResponse1.get$ref());
      assertEquals("0", apiResponse2.get$ref());
      assertEquals("0", apiResponse2.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link0.getDescription());
      assertNull(link1.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link2.getOperationId());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link2.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(link0, link2);
      assertSame(link0, link1);
      assertNotSame(string1, string0);
      assertSame(link1, link0);
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
      assertEquals("0", apiResponse0.getDescription());
      assertEquals("0", apiResponse0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertEquals("0", apiResponse1.getDescription());
      assertEquals("0", apiResponse1.get$ref());
      assertEquals("0", apiResponse2.get$ref());
      assertEquals("0", apiResponse2.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link0.getDescription());
      assertNull(link1.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link2.getOperationId());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertEquals("ULpZ>q*yFDn4l", link2.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string0, string1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(link0, link2);
      assertSame(link0, link1);
      assertNotSame(string1, string0);
      assertSame(link1, link0);
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotNull(optional1);
      
      Parameter[] parameterArray0 = new Parameter[1];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((ArraySchema) null).when(parameter0).array();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "Unrecognized field \"";
      Callback callback0 = new Callback();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNotNull(callback0);
      
      Components components1 = components0.addCallbacks(string0, callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      Components components2 = components1.responses(apiResponses0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      Map<String, Header> map0 = components1.getHeaders();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(map0);
      
      Components components3 = components2.headers(map0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      String string1 = "";
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      String string2 = "com.fasterxml.jackson.databind.deser.DeserializerCache";
      Example example1 = example0.summary(string2);
      assertNull(example0.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example1.getSummary());
      assertNull(example1.get$ref());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(example0, example1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Example example2 = example1.externalValue(string0);
      assertEquals("Unrecognized field \"", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example1.getSummary());
      assertEquals("Unrecognized field \"", example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertEquals("Unrecognized field \"", example2.getExternalValue());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example2.getSummary());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(example0, example2);
      assertSame(example0, example1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(example2);
      
      Components components4 = components3.addExamples(string1, example2);
      assertEquals("Unrecognized field \"", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getDescription());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example1.getSummary());
      assertEquals("Unrecognized field \"", example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertEquals("Unrecognized field \"", example2.getExternalValue());
      assertEquals("com.fasterxml.jackson.databind.deser.DeserializerCache", example2.getSummary());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(example0, example2);
      assertSame(example0, example1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(example1, example2);
      assertSame(example1, example0);
      assertSame(example2, example0);
      assertSame(example2, example1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(schema0)._default();
      doReturn((String[]) null).when(schema0)._enum();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn((String) null).when(schema0).maximum();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).minimum();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional2 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional2);
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "P./tf=Js*7e5?VLp!'";
      Example example0 = null;
      Components components1 = components0.addExamples(string0, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string0 = "<IVS\\=+J$y0Wv";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNull(mediaType0.getExample());
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "qrcz{+*2~k";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, (String) null).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      boolean boolean0 = false;
      String string3 = "O&{~Fl#g";
      String string4 = "p;YA,XW0U$)jou\"V.";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 3198;
      int int1 = 6;
      String string5 = "*/*";
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string3, (String) null).when(schema0).description();
      doReturn(stringArray0[0], string4, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[2], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string5, (String) null).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(5, stringArray0.length);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(int0 == int1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotNull(optional1);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[3]).when(externalDocumentation1).description();
      doReturn(stringArray0[3]).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional3);
      
      int int2 = 1;
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "|,xaWh";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(optional0);
      
      String string3 = "";
      boolean boolean0 = true;
      String string4 = "hcE[j@0khax`-coI6!I";
      String string5 = "v['$5#>koE:W-q)5y";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 65599;
      String string6 = "com.fasterxml.jackson.databind.node.NumericNode";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string3).when(schema0).description();
      doReturn(string4, string5, (String) null).when(schema0).example();
      doReturn(boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[0]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string6).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(stringArray0[1], (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(3, stringArray0.length);
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(string3, string6);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[9];
      String string7 = "#/components/schemas/";
      String string8 = "";
      String string9 = "java.lang";
      String string10 = null;
      String string11 = "";
      String string12 = null;
      String string13 = "    post: ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(server0).description();
      doReturn(string9, string11).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      String string0 = "IXf0`h(";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      int int2 = 45;
      boolean boolean0 = true;
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNotNull(operation0);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(map0);
      
      Components components1 = components0.callbacks(map0);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, Example> map1 = components0.getExamples();
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components2 = components1.examples(map1);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.links.Link> map2 = components1.getLinks();
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(map2);
      
      Components components3 = components2.links(map2);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Map<String, Header> map3 = null;
      Components components4 = components2.headers(map3);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertNotNull(components4);
      
      String string0 = "bt!pIEgW\"^/hxiz";
      io.swagger.oas.models.links.Link link0 = null;
      String string1 = "com.fasterxml.jackson.core.json.JsonGeneratorImpl";
      operation0.addExtension(string1, components1);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      Map<String, Object> map4 = callback0.getExtensions();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(map4);
      
      components0.setExtensions(map4);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      
      Components components5 = components3.addLinks(string0, link0);
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNotNull(components5);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      String string0 = "FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      String string2 = "Q= +Z";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(server0).description();
      doReturn(string2, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      String string0 = "Ra}TK7+d[EeFR\"t\"W";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation0).description();
      doReturn(string0, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.securitySchemes(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string1 = "GA@{)\\LCc*SY@\"";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      String string2 = "E3";
      io.swagger.oas.models.parameters.RequestBody requestBody0 = new io.swagger.oas.models.parameters.RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      io.swagger.oas.models.parameters.RequestBody requestBody1 = requestBody0.required(boolean1);
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody0, requestBody1);
      assertNotNull(requestBody1);
      
      Components components3 = components2.addRequestBodies(string2, requestBody1);
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(requestBody1, requestBody0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody0, requestBody1);
      assertNotNull(components3);
      
      String string3 = "5CeXxT%A9.u'cN7Y+";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNotNull(parameter0);
      
      String string4 = null;
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.name(string4);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter0);
      assertNotNull(parameter1);
      
      Map<String, Example> map0 = parameter0.getExamples();
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertSame(parameter0, parameter1);
      assertNull(map0);
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.examples(map0);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getName());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowReserved());
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      
      Components components4 = components3.addParameters(string3, parameter2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getName());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowReserved());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      String string0 = "M?I[";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string0, (String) null).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[5];
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.FALSE;
      String string1 = "";
      boolean boolean1 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string2 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components1 = components0.links(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      String string0 = "4Tjj$8'/\"7j8HI";
      String string1 = "32M5^MHD3";
      String string2 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string3 = "    name: ";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      MediaType mediaType2 = mediaType1.addExamples(string3, example0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(mediaType2.getExample());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNotNull(arraySchema0);
      
      MediaType mediaType3 = mediaType2.schema(arraySchema0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType3);
      
      Map<String, Example> map1 = null;
      mediaType3.setExamples(map1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      
      String string4 = "W=uHLFrLMXa";
      String string5 = mediaType3.toString();
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertNotNull(string5);
      
      MediaType mediaType4 = mediaType3.example(string4);
      assertEquals("W=uHLFrLMXa", mediaType4.getExample());
      assertEquals("W=uHLFrLMXa", mediaType0.getExample());
      assertEquals("W=uHLFrLMXa", mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals("W=uHLFrLMXa", mediaType2.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType3.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType4);
      
      String string6 = "io.swagger.jaxrs2.OperationParser";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string6, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertEquals("W=uHLFrLMXa", mediaType4.getExample());
      assertEquals("W=uHLFrLMXa", mediaType0.getExample());
      assertEquals("W=uHLFrLMXa", mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals("W=uHLFrLMXa", mediaType2.getExample());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getReadOnly());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType3.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[3];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Parameter[] parameterArray0 = new Parameter[0];
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      assertEquals(0, parameterArray0.length);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      String string0 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      String string1 = "com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector";
      String string2 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      String string3 = "L";
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info1).contact();
      doReturn(string0, (String) null).when(info1).description();
      doReturn((License) null).when(info1).license();
      doReturn(string0, (String) null).when(info1).termsOfService();
      doReturn(string3, (String) null).when(info1).title();
      doReturn(string3, (String) null).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(optional1.equals((Object)optional0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(optional1, optional0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Example> map0 = null;
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string0 = "";
      MediaType mediaType2 = mediaType1.example(string0);
      assertEquals("", mediaType0.getExample());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      String string1 = "F9BKZo\"EM";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNotNull(encoding0);
      
      Encoding encoding1 = encoding0.contentType(string1);
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertEquals("F9BKZo\"EM", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      
      MediaType mediaType3 = mediaType2.addEncoding(string1, encoding1);
      assertEquals("", mediaType0.getExample());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertEquals("F9BKZo\"EM", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("", mediaType3.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType3);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType4 = mediaType3.encoding(hashMap0);
      assertEquals("", mediaType0.getExample());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertEquals("F9BKZo\"EM", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("", mediaType3.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string0, string1);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotNull(mediaType4);
      
      String string2 = "";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNotNull(arraySchema0);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema1 = arraySchema0.items(schema0);
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getNullable());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema1, arraySchema0);
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string1);
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxItems());
      assertEquals("F9BKZo\"EM", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertEquals("F9BKZo\"EM", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("F9BKZo\"EM", arraySchema2.getType());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema0, arraySchema2);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(arraySchema2, arraySchema0);
      assertNotNull(arraySchema2);
      
      Boolean boolean0 = arraySchema2.getExclusiveMaximum();
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxItems());
      assertEquals("F9BKZo\"EM", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertEquals("F9BKZo\"EM", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("F9BKZo\"EM", arraySchema2.getType());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema0, arraySchema2);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(arraySchema2, arraySchema0);
      assertNull(boolean0);
      
      encoding0.setExplode(boolean0);
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMaxItems());
      assertEquals("F9BKZo\"EM", arraySchema0.getType());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertEquals("F9BKZo\"EM", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertEquals("F9BKZo\"EM", arraySchema2.getType());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertSame(arraySchema0, arraySchema1);
      assertSame(arraySchema0, arraySchema2);
      assertSame(arraySchema1, arraySchema0);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(arraySchema2, arraySchema0);
      
      encoding1.setStyle(string2);
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertEquals("", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertEquals("F9BKZo\"EM", encoding1.getContentType());
      assertEquals("", encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = ") not suitable, must be java.lang.String";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string3, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertEquals("", mediaType0.getExample());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("F9BKZo\"EM", encoding0.getContentType());
      assertEquals("", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertEquals("F9BKZo\"EM", encoding1.getContentType());
      assertEquals("", encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("", mediaType3.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", mediaType4.getExample());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNotNull(optional0);
      
      int int0 = 8;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = true;
      ArraySchema arraySchema3 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, 0).when(arraySchema3).maxItems();
      doReturn(int0, int0).when(arraySchema3).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema3).schema();
      doReturn(boolean1, false).when(arraySchema3).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      String string0 = "<+9N'}w'\"1";
      String string1 = "85e@e;+tVUmwb;";
      MediaType mediaType0 = null;
      String string2 = "1\\wn0";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      assertNull(map0);
      
      Components components1 = components0.securitySchemes(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, io.swagger.oas.models.parameters.RequestBody> map1 = components0.getRequestBodies();
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components2 = components1.requestBodies(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components2.parameters(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      String string0 = null;
      Function<Object, io.swagger.oas.models.parameters.Parameter> function0 = (Function<Object, io.swagger.oas.models.parameters.Parameter>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      io.swagger.oas.models.parameters.Parameter parameter0 = hashMap0.computeIfAbsent(string0, function0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter0);
      
      String string1 = "DQTgU";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNotNull(parameter1);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Info> schema0 = null;
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.schema(schema0);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getNullable());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNotNull(schema1);
      
      Boolean boolean2 = schema1.getDeprecated();
      assertNull(schema1.getNullable());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(boolean2);
      
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.deprecated(boolean2);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(schema1.getNullable());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(parameter3.getName());
      assertNull(parameter3.getIn());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getExplode());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getRequired());
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertNotNull(parameter3);
      
      io.swagger.oas.models.parameters.Parameter parameter4 = parameter2.explode(boolean1);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertTrue(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.getRequired());
      assertNull(parameter4.getAllowEmptyValue());
      assertNull(parameter4.getDescription());
      assertNull(parameter4.getExample());
      assertNull(parameter4.getStyle());
      assertTrue(parameter4.getExplode());
      assertNull(parameter4.get$ref());
      assertNull(parameter4.getName());
      assertNull(parameter4.getDeprecated());
      assertNull(parameter4.getIn());
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter4);
      assertSame(parameter4, parameter2);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter3);
      assertNotNull(parameter4);
      
      Components components4 = components3.addParameters(string1, parameter4);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertTrue(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.getRequired());
      assertNull(parameter4.getAllowEmptyValue());
      assertNull(parameter4.getDescription());
      assertNull(parameter4.getExample());
      assertNull(parameter4.getStyle());
      assertTrue(parameter4.getExplode());
      assertNull(parameter4.get$ref());
      assertNull(parameter4.getName());
      assertNull(parameter4.getDeprecated());
      assertNull(parameter4.getIn());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter4);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(parameter4, parameter2);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter3);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertTrue(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertTrue(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.getRequired());
      assertNull(parameter4.getAllowEmptyValue());
      assertNull(parameter4.getDescription());
      assertNull(parameter4.getExample());
      assertNull(parameter4.getStyle());
      assertTrue(parameter4.getExplode());
      assertNull(parameter4.get$ref());
      assertNull(parameter4.getName());
      assertNull(parameter4.getDeprecated());
      assertNull(parameter4.getIn());
      assertEquals(1, contentArray0.length);
      assertTrue(boolean1.equals((Object)boolean0));
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter4);
      assertSame(parameter4, parameter2);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter3);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      String string0 = "";
      String string1 = "com.fasterxml.jackson.databind.DeserializationContext";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[2];
      String string2 = "";
      String string3 = "'Ya4";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(server0).description();
      doReturn(string3, string3).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      String string0 = "java.lang";
      String string1 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(optional0);
      
      String string2 = "class ApiResponses {\n";
      String string3 = "iP#:mR;OZd";
      String string4 = ",";
      String string5 = "g[c<Xe.";
      String string6 = "";
      String string7 = ",";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string0).when(server0).description();
      doReturn(string3, string4).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "|,xaWh";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-1209);
      String string3 = "class MapSchema {\n";
      boolean boolean2 = true;
      String string4 = ")wpM}Zw[;/Sw7d<N";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string2).when(schema0).description();
      doReturn(string2, string2).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[1], (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(stringArray0[2]).when(schema0).maximum();
      doReturn(int0).when(schema0).minProperties();
      doReturn(string1).when(schema0).minimum();
      doReturn(string3, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(string3, (String) null).when(schema0).ref();
      doReturn(string4, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[9];
      String string5 = "_jS";
      String string6 = "VG^1S;hNt,v8M)*@G.D";
      String string7 = "Hk9FV&|";
      String string8 = "Direct self-reference leading to cycle";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "') as character #";
      stringArray0[1] = string1;
      String string2 = "V|*ZN9@;&brEWIJb-u";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(optional0);
      
      String string3 = "t|y\"W`FL";
      String string4 = "l?&g";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(license0).name();
      doReturn(string4, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotNull(optional1);
      
      boolean boolean0 = true;
      String string5 = null;
      String string6 = "b,U\"%Wmq-6G>])iM%";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 2689;
      String string7 = "io.swagger.jaxrs2.OperationParser";
      String string8 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string2, (String) null).when(schema0).description();
      doReturn(string5, string6, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(string7).when(schema0).maximum();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string4).when(schema0).minimum();
      doReturn(string5).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(stringArray0[2], (String) null).when(schema0).ref();
      doReturn(string8).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string8, string4);
      assertSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string1, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string8);
      assertNotSame(string2, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string8);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string6, string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotNull(optional2);
      
      Server[] serverArray0 = new Server[3];
      String string9 = "cu]4";
      String string10 = " ... (truncated ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(server0).description();
      doReturn(string9, stringArray0[2]).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      String string0 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = new HashMap<String, String>();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[5];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = true;
      String string1 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string2 = "z5#";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "|ja]Eb(, 'V'hm@+t";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string1).when(parameter0).description();
      doReturn(string0).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean2, false).when(parameter0).required();
      doReturn(string3, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components1 = components0.links(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      String string0 = null;
      String string1 = "k=;QlR>sp(RRZvP}y";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      String string2 = "H[0RELUX><F7";
      String string3 = "PROPAGATE_TRANSIENT_MARKER";
      String string4 = "a+[S\\mxr zdWJ";
      String string5 = "_O";
      String string6 = "io.swagger.jaxrs2.OperationParser";
      String string7 = "";
      String string8 = "jaR";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3).when(link0).description();
      doReturn(string6, string0).when(link0).operationId();
      doReturn(string5).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string8);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string8);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string6);
      assertNotSame(string5, string6);
      assertNotSame(string5, string8);
      assertNotSame(string5, string7);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      String string9 = "lcI ";
      String string10 = "H.iU&";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0).when(apiResponse0).content();
      doReturn(string3, string3).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      String string0 = "%pVR%6";
      Explode explode0 = Explode.DEFAULT;
      String string1 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode0).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      components0.setExamples(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      int int0 = 3198;
      Schema schema0 = null;
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      String string0 = "A class must be provided";
      String string1 = "java.lang";
      String string2 = ",";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2).when(server0).description();
      doReturn(string1, string2).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertEquals(4, serverVariableArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional2);
      
      Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNotNull(parameter1);
      
      Components components1 = components0.addParameters(string3, parameter1);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Callback callback0 = new Callback();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNotNull(callback0);
      
      Components components2 = components1.addCallbacks(string3, callback0);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components3 = components2.schemas(map0);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Header header0 = new Header();
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNotNull(header0);
      
      boolean boolean1 = false;
      Boolean boolean2 = Boolean.valueOf(boolean1);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Header header1 = header0.deprecated(boolean2);
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertFalse(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertFalse(header1.getDeprecated());
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNotNull(header1);
      
      String string4 = "";
      Header header2 = header1.example(string4);
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertEquals("", header2.getExample());
      assertNull(header2.getStyle());
      assertNull(header2.get$ref());
      assertFalse(header2.getDeprecated());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("", header0.getExample());
      assertFalse(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertEquals("", header1.getExample());
      assertFalse(header1.getDeprecated());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotNull(header2);
      
      Components components4 = components3.addHeaders(operationParser0.MEDIA_TYPE, header2);
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertEquals("", header2.getExample());
      assertNull(header2.getStyle());
      assertNull(header2.get$ref());
      assertFalse(header2.getDeprecated());
      assertNull(header2.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("", header0.getExample());
      assertFalse(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertEquals("", header1.getExample());
      assertFalse(header1.getDeprecated());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional3 = OperationParser.getParameter(parameter0, components4);
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getDescription());
      assertEquals("", header2.getExample());
      assertNull(header2.getStyle());
      assertNull(header2.get$ref());
      assertFalse(header2.getDeprecated());
      assertNull(header2.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("", header0.getExample());
      assertFalse(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.get$ref());
      assertNull(header1.get$ref());
      assertNull(header1.getExplode());
      assertNull(header1.getDescription());
      assertNull(header1.getStyle());
      assertNull(header1.getRequired());
      assertNull(header1.getAllowEmptyValue());
      assertEquals("", header1.getExample());
      assertFalse(header1.getDeprecated());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(header0, header1);
      assertSame(header0, header2);
      assertSame(header1, header0);
      assertSame(header1, header2);
      assertNotNull(optional3);
      
      Optional<io.swagger.oas.models.media.Schema> optional4 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      String string0 = "4Tjj$8'/\"7j8HI";
      String string1 = "32M5^MHD3";
      String string2 = "";
      String string3 = "ZdyJu~[q&_2hZz";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      String string4 = "    name: ";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      MediaType mediaType2 = mediaType1.addExamples(string4, example0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(mediaType2.getExample());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNotNull(arraySchema0);
      
      MediaType mediaType3 = mediaType2.schema(arraySchema0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType3);
      
      Map<String, Example> map1 = null;
      mediaType3.setExamples(map1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      
      String string5 = "W=uHLFrLMXa";
      String string6 = mediaType3.toString();
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(mediaType2.getExample());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(string6);
      
      MediaType mediaType4 = mediaType3.example(string5);
      assertEquals("W=uHLFrLMXa", mediaType4.getExample());
      assertEquals("W=uHLFrLMXa", mediaType0.getExample());
      assertEquals("W=uHLFrLMXa", mediaType1.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertEquals("W=uHLFrLMXa", mediaType2.getExample());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.get$ref());
      assertEquals("W=uHLFrLMXa", mediaType3.getExample());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotNull(mediaType4);
      
      String string7 = "io.swagger.jaxrs2.OperationParser";
      String string8 = "Q$DzoY=s8{";
      String string9 = "y7";
      String string10 = ",-[(Bk,p85>v`(";
      String string11 = "*/*";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string8, (String) null).when(exampleObject0).externalValue();
      doReturn(string7, string0, string9).when(exampleObject0).name();
      doReturn(string7, (String) null).when(exampleObject0).summary();
      doReturn(string11, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      int int0 = (-1374);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Explode explode0 = Explode.FALSE;
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string0 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).description();
      doReturn(explode0, explode0, explode0).when(parameter0).explode();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).in();
      doReturn(operationParser0.MEDIA_TYPE, (String) null).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNotNull(arraySchema1);
      
      Components components1 = components0.addSchemas(operationParser0.COMPONENTS_REF, arraySchema1);
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Example> map0 = mediaType0.getExamples();
      assertNull(mediaType0.getExample());
      assertNull(map0);
      
      Components components2 = components1.examples(map0);
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(mediaType0.getExample());
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      
      String string1 = null;
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Components components3 = components0.addResponses(string1, apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = components3.getLinks();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(map1);
      
      Components components4 = components2.links(map1);
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components4);
      
      String string2 = "' (remaining: '";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNotNull(parameter1);
      
      String string3 = "XSt)x7NX";
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.$ref(string3);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getExample());
      assertEquals("XSt)x7NX", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getAllowReserved());
      assertEquals("XSt)x7NX", parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertSame(parameter1, parameter2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(parameter2, parameter1);
      assertNotNull(parameter2);
      
      Boolean boolean2 = Boolean.valueOf(operationParser0.DEFAULT_DESCRIPTION);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.explode(boolean2);
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertFalse(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertEquals("XSt)x7NX", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getName());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getAllowReserved());
      assertEquals("XSt)x7NX", parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertFalse(parameter2.getExplode());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getIn());
      assertEquals("XSt)x7NX", parameter3.get$ref());
      assertNull(parameter3.getName());
      assertFalse(parameter3.getExplode());
      assertNull(parameter3.getStyle());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertNotNull(parameter3);
      
      Components components5 = components4.addParameters(string2, parameter3);
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertFalse(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertEquals("XSt)x7NX", parameter1.get$ref());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getName());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getAllowReserved());
      assertEquals("XSt)x7NX", parameter2.get$ref());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowEmptyValue());
      assertFalse(parameter2.getExplode());
      assertNull(parameter3.getExample());
      assertNull(parameter3.getAllowReserved());
      assertNull(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getDescription());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getIn());
      assertEquals("XSt)x7NX", parameter3.get$ref());
      assertNull(parameter3.getName());
      assertFalse(parameter3.getExplode());
      assertNull(parameter3.getStyle());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertSame(components5, components4);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components1);
      assertSame(components5, components0);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(parameter2, parameter1);
      assertSame(parameter2, parameter3);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertNotNull(components5);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "#/components/schemas/";
      String string3 = "8Xd^ts6Y);P;l8C;d";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string2, (String) null).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(optional0);
      
      String string4 = "";
      String string5 = "io.swagger.jaxrs2.OperationParser";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license0).name();
      doReturn(string5, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string4, string5);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotNull(optional1);
      
      int int0 = (-2384);
      int int1 = Integer.MAX_VALUE;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int1).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, false).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "qrcz{+*2~k";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, string1).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      boolean boolean0 = false;
      String string3 = "O&{~Fl#g";
      String string4 = "p;YA,XW0U$)jou\"V.";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(externalDocumentation0).description();
      doReturn(stringArray0[1]).when(externalDocumentation0).url();
      int int0 = 3198;
      int int1 = 6;
      String string5 = "*/*";
      String string6 = "";
      String string7 = null;
      int int2 = (-1);
      String string8 = "io.swagger.jaxrs2.OperationParser";
      String string9 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(schema0)._default();
      doReturn(stringArray0).when(schema0)._enum();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string3, string7).when(schema0).description();
      doReturn(stringArray0[0], string4, string6).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[2], stringArray0[1]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(string4).when(schema0).maximum();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(string5).when(schema0).minimum();
      doReturn(string5, string8).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(stringArray0[2], string9).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertEquals(5, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string8);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string6);
      assertNotSame(string1, string3);
      assertSame(string1, string9);
      assertSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string9);
      assertNotSame(string6, string5);
      assertSame(string6, string0);
      assertSame(string6, string9);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertSame(string6, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string9);
      assertNotSame(string8, string3);
      assertSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string2);
      assertNotSame(string9, string4);
      assertNotSame(string9, string5);
      assertSame(string9, string6);
      assertSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string8);
      assertNotSame(string3, string9);
      assertNotSame(string3, string2);
      assertNotSame(string4, string6);
      assertNotSame(string4, string9);
      assertNotSame(string4, string8);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotNull(optional1);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[3]).when(externalDocumentation1).description();
      doReturn(stringArray0[3]).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional3);
      
      int int3 = 1;
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link1).description();
      doReturn((String) null).when(link1).operationId();
      doReturn((String) null).when(link1).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link1);
      assertFalse(optional4.equals((Object)optional0));
      assertNotSame(optional4, optional0);
      assertNotNull(optional4);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license0);
      assertNotNull(optional5);
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      String string0 = "Z]G^CH";
      String string1 = "!s@";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Explode explode0 = Explode.TRUE;
      String string2 = "b`N)>Yb&Ax.l5pV";
      String string3 = "";
      Schema schema0 = null;
      String string4 = ": can not find property with name '";
      Parameter[] parameterArray0 = new Parameter[2];
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      String string5 = "";
      String string6 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0[3], contentArray0[4], contentArray0[3], contentArray0[0]).when(apiResponse0).content();
      doReturn(string4, string5, string4, string6, string6).when(apiResponse0).description();
      doReturn((Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      int int0 = 3198;
      Schema schema0 = null;
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional0 = OperationParser.getArraySchema(arraySchema0);
      assertNotNull(optional0);
      
      String string0 = "A class must be provided";
      String string1 = ",";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      String string2 = "b(";
      String string3 = null;
      String string4 = "N1|[zV(^8d?2J";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, string0, string0, (String) null).when(serverVariable0).description();
      doReturn(string0, string0, string4, string1).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string0, string1).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertEquals(4, serverVariableArray0.length);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(optional1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ExternalDocumentation externalDocumentation0 = null;
      ExternalDocumentation externalDocumentation1 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertNotNull(optional2);
      
      Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string5 = "";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNotNull(parameter1);
      
      Components components1 = components0.addParameters(string5, parameter1);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      Components components2 = components1.addCallbacks(string5, callback0);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(map0);
      
      Components components3 = components2.schemas(map0);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Header header0 = new Header();
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExample());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      boolean boolean1 = false;
      Boolean boolean2 = Boolean.valueOf(boolean1);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Header header1 = header0.deprecated(boolean2);
      assertFalse(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertSame(header1, header0);
      assertSame(header0, header1);
      assertNotNull(header1);
      
      String string6 = "";
      Header header2 = header1.example(string6);
      assertFalse(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertEquals("", header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getRequired());
      assertNull(header2.getDescription());
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getStyle());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertEquals("", header2.getExample());
      assertFalse(header2.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertNotNull(header2);
      
      Components components4 = components3.addHeaders(operationParser0.MEDIA_TYPE, header2);
      assertFalse(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertEquals("", header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getRequired());
      assertNull(header2.getDescription());
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getStyle());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertEquals("", header2.getExample());
      assertFalse(header2.getDeprecated());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertSame(string5, string6);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional3 = OperationParser.getParameter(parameter0, components4);
      assertFalse(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertEquals("", header1.getExample());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getRequired());
      assertNull(header2.getDescription());
      assertNull(header2.getExplode());
      assertNull(header2.getRequired());
      assertNull(header2.getStyle());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.get$ref());
      assertEquals("", header2.getExample());
      assertFalse(header2.getDeprecated());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(header0.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(header0.getDeprecated());
      assertEquals("", header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertSame(string5, string6);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertNotNull(optional3);
      
      Optional<io.swagger.oas.models.media.Schema> optional4 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      String string0 = "3wt+,5ga(\"wDLG!";
      String string1 = "?6p*;2#-{9PH6";
      String string2 = "";
      String string3 = "ph\\AWRhp`WY;?t6]qc";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string1, string3).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string4 = "]v\"|J ";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNotNull(link0);
      
      Components components1 = components0.addLinks(string4, link0);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, Callback> map0 = components0.getCallbacks();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.callbacks(map0);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map1 = apiResponse0.getHeaders();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(map1);
      
      Components components3 = components2.headers(map1);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = null;
      Components components4 = components3.parameters(map2);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContents(contentArray0, components4);
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(8, contentArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(optional0);
      
      int int0 = 4;
      Class<OperationParser> class0 = OperationParser.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int1 = (-2610);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(optional1);
      
      String[] stringArray0 = null;
      String string2 = null;
      String string3 = "*/*";
      boolean boolean1 = false;
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(externalDocumentation1).description();
      doReturn(string0).when(externalDocumentation1).url();
      int int2 = 726;
      String string4 = "yoB4";
      int int3 = 91;
      boolean boolean2 = false;
      int int4 = 98;
      String string5 = "EY{ds%H";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(schema2)._default();
      doReturn(stringArray0).when(schema2)._enum();
      doReturn(boolean0, boolean0).when(schema2).deprecated();
      doReturn(string1).when(schema2).description();
      doReturn(string2, string3, string4).when(schema2).example();
      doReturn(boolean0, boolean2).when(schema2).exclusiveMaximum();
      doReturn(boolean1).when(schema2).exclusiveMinimum();
      doReturn(externalDocumentation1).when(schema2).externalDocs();
      doReturn(string0).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(int4, 0).when(schema2).maxProperties();
      doReturn(string4).when(schema2).maximum();
      doReturn(int3, int1).when(schema2).minProperties();
      doReturn(string2).when(schema2).minimum();
      doReturn(string1).when(schema2).pattern();
      doReturn(boolean2).when(schema2).readOnly();
      doReturn(string2).when(schema2).ref();
      doReturn(string3, string5).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(boolean1 == boolean0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(boolean2 == boolean0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotNull(optional2);
      
      String string6 = "R#qG6W";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string7 = "HW9$.%";
      License license0 = null;
      String string8 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string4, string7).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string2).when(info0).termsOfService();
      doReturn(string4, string8).when(info0).title();
      doReturn(string6, string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string8));
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string8);
      assertNotSame(string4, string5);
      assertNotSame(string4, string7);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string8);
      assertSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string8);
      assertNotNull(optional3);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      String string9 = "";
      boolean boolean3 = true;
      RequestBody requestBody0 = mock(RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string6, string9).when(requestBody0).description();
      doReturn(boolean0, boolean3).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, Header> map0 = null;
      ApiResponse apiResponse1 = apiResponse0.headers(map0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      
      Components components1 = components0.headers(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Components components2 = components0.addResponses(operationParser0.COMMA, apiResponse1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      String string10 = components2.toString();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string10, string9);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string1);
      assertNotSame(string10, string4);
      assertNotNull(string10);
      
      SecurityScheme securityScheme0 = null;
      Components components3 = components2.addSecuritySchemes(operationParser0.COMPONENTS_REF, securityScheme0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotNull(components3);
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = "jBCQZS>3icHm{O$g<";
      String string3 = "";
      String string4 = "\"x*!ze";
      String string5 = "A+I~CLzxe4Ul@7";
      String string6 = "GCB7";
      String string7 = "Q-SNY.)";
      String string8 = "no description";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).expression();
      doReturn(string5, (String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string6, string6).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string8);
      assertSame(string0, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertNotSame(string6, string8);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotNull(optional0);
      
      String string9 = "m}4>oSJRCba&+%O";
      String string10 = "";
      String string11 = "fV";
      String string12 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(contact0).email();
      doReturn(string12).when(contact0).name();
      doReturn(string8, (String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(license0).name();
      doReturn(string1).when(license0).url();
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string9, string9).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string10).when(info0).termsOfService();
      doReturn(string11, string11).when(info0).title();
      doReturn(string10).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string12));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string4));
      assertNotSame(string3, string11);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(string3, string10);
      assertSame(string3, string12);
      assertNotSame(string3, string8);
      assertSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string9);
      assertNotSame(string3, string4);
      assertNotSame(string3, string7);
      assertNotSame(string8, string9);
      assertNotSame(string8, string12);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string11);
      assertNotSame(string8, string3);
      assertNotSame(string8, string10);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string12);
      assertNotSame(string9, string6);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string11);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertSame(string10, string0);
      assertSame(string10, string12);
      assertNotSame(string10, string7);
      assertNotSame(string10, string8);
      assertSame(string10, string3);
      assertNotSame(string10, string9);
      assertNotSame(string11, string2);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertNotSame(string11, string10);
      assertNotSame(string11, string3);
      assertNotSame(string11, string0);
      assertNotSame(string11, string12);
      assertNotSame(string11, string9);
      assertNotSame(string11, string6);
      assertNotSame(string11, string4);
      assertNotSame(string11, string7);
      assertSame(string12, string0);
      assertNotSame(string12, string5);
      assertNotSame(string12, string2);
      assertSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string8);
      assertSame(string12, string3);
      assertNotSame(string12, string11);
      assertNotSame(string12, string6);
      assertNotSame(string12, string9);
      assertNotSame(string12, string4);
      assertNotNull(optional1);
      
      Info info1 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info1);
      assertFalse(optional2.equals((Object)optional1));
      assertNotSame(optional2, optional1);
      assertNotNull(optional2);
      
      Link[] linkArray0 = new Link[7];
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info1);
      assertFalse(optional3.equals((Object)optional1));
      assertSame(optional3, optional2);
      assertNotSame(optional3, optional1);
      assertNotNull(optional3);
      
      int int0 = (-207);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(optional0);
      
      int int0 = 4;
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int1 = 3192;
      Schema schema1 = null;
      boolean boolean1 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(arraySchema0).maxItems();
      doReturn(int0, int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1).when(arraySchema0).schema();
      doReturn(boolean0, boolean1).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      String string0 = ",";
      String string1 = "";
      String string2 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(optional0);
      
      String string3 = "JW)TblvHn?Gy|U";
      String string4 = null;
      String string5 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[3];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null, (String) null, (String) null).when(server0).description();
      doReturn(string4, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertEquals(3, serverVariableArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[9];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      serverArray0[7] = server0;
      serverArray0[8] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertEquals(9, serverArray0.length);
      assertNotNull(optional2);
      
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[9];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Content) null, (Content) null, (Content) null, (Content) null, (Content) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      apiResponseArray0[8] = apiResponseArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertNotNull(arraySchema0);
      
      Components components1 = components0.addSchemas(string0, arraySchema0);
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components1);
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getTitle());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.getUniqueItems());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertNull(arraySchema0.get$ref());
      assertEquals(9, apiResponseArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "x-";
      Example example0 = new Example();
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      String string1 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string1);
      assertNull(example0.getDescription());
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertSame(example0, example1);
      assertNotSame(string1, string0);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "x-";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.parameters(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Example example1 = example0.summary(string0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("x-", example0.getSummary());
      assertNull(example1.getDescription());
      assertEquals("x-", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Components components2 = components0.addExamples(string0, example1);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("x-", example0.getSummary());
      assertNull(example1.getDescription());
      assertEquals("x-", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      String string0 = "Z]G^CH";
      String string1 = "#/components/schemas/";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(map0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[1] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Explode explode0 = Explode.TRUE;
      String string2 = "b`N)>Yb&Ax.l5pV";
      String string3 = "";
      Schema schema0 = null;
      String string4 = ": can not find property with name '";
      Parameter[] parameterArray0 = new Parameter[2];
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0[4], contentArray0[1], contentArray0[3], contentArray0[0], contentArray0[4]).when(apiResponse0).content();
      doReturn(string1, string0, string0, string2, string1).when(apiResponse0).description();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).links();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertEquals(6, apiResponseArray0.length);
      assertNotNull(optional0);
      
      boolean boolean1 = true;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string5 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string6 = "*{qwH;6Z:#Xc";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components1 = new Components();
      assertNotNull(components1);
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "properties";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      String string1 = "h,+;:TH4";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      String string2 = "_Y! xV$[WW&h++-";
      stringArray0[4] = string0;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(optional0);
      
      stringArray0[5] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "x-";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.parameters(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      
      Example example1 = example0.summary(string3);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("x-", example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("x-", example1.getSummary());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Components components2 = components0.addExamples(string3, example1);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("x-", example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("x-", example1.getSummary());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "x-";
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      String string2 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string2);
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertNull(example1.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertSame(example0, example1);
      assertNotSame(string2, string1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(content0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      String string0 = "Z]G^CH";
      String string1 = "#/components/schemas/";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string0, string1).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(map0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[1] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Explode explode0 = Explode.TRUE;
      String string2 = "b`N)>Yb&Ax.l5pV";
      String string3 = "";
      Schema schema0 = null;
      String string4 = ": can not find property with name '";
      Parameter[] parameterArray0 = new Parameter[2];
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      String string5 = "java.lang";
      String string6 = null;
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0[4], contentArray0[1], contentArray0[3], contentArray0[0], contentArray0[4]).when(apiResponse0).content();
      doReturn(string1, string0, string0, string2, string1).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string1, string5, string4, string4, string6).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertEquals(6, apiResponseArray0.length);
      assertNotNull(optional0);
      
      boolean boolean1 = true;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      String string7 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string8 = "*{qwH;6Z:#Xc";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components1 = new Components();
      assertNotNull(components1);
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      String string0 = "";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[5];
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[0];
      boolean boolean1 = true;
      String string1 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      String string2 = "z5#";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string3 = "\\r]y+t5pf41GC:6";
      boolean boolean3 = false;
      boolean boolean4 = false;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = null;
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string4 = "g|l$";
      MediaType mediaType1 = mediaType0.example(string4);
      assertEquals("g|l$", mediaType0.getExample());
      assertEquals("g|l$", mediaType1.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(mediaType1, mediaType0);
      assertNotNull(mediaType1);
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertEquals("g|l$", mediaType0.getExample());
      assertSame(mediaType0, mediaType1);
      assertNull(map1);
      
      MediaType mediaType2 = mediaType1.examples(map1);
      assertEquals("g|l$", mediaType0.getExample());
      assertEquals("g|l$", mediaType1.getExample());
      assertEquals("g|l$", mediaType2.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType2);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNotNull(encoding0);
      
      String string5 = "io.swagge";
      Encoding encoding1 = encoding0.contentType(string5);
      assertEquals("io.swagge", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagge", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertSame(encoding0, encoding1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      
      MediaType mediaType3 = mediaType2.addEncoding(string0, encoding1);
      assertEquals("io.swagge", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagge", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("g|l$", mediaType3.getExample());
      assertEquals("g|l$", mediaType0.getExample());
      assertEquals("g|l$", mediaType1.getExample());
      assertEquals("g|l$", mediaType2.getExample());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotNull(mediaType3);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getTitle());
      assertNotNull(arraySchema1);
      
      MediaType mediaType4 = mediaType3.schema(arraySchema1);
      assertEquals("io.swagge", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagge", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("g|l$", mediaType3.getExample());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getTitle());
      assertEquals("g|l$", mediaType4.getExample());
      assertEquals("g|l$", mediaType0.getExample());
      assertEquals("g|l$", mediaType1.getExample());
      assertEquals("g|l$", mediaType2.getExample());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotNull(mediaType4);
      
      String string6 = "write a string";
      String string7 = "Can not create TypeBindings for class ";
      String string8 = null;
      String string9 = "java.lang";
      String string10 = "A|Up$Nz6%\\i%4Q";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(exampleObject0).externalValue();
      doReturn(string6, string8, string9).when(exampleObject0).name();
      doReturn(string4, (String) null).when(exampleObject0).summary();
      doReturn(string0).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertEquals("io.swagge", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("io.swagge", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertEquals("g|l$", mediaType3.getExample());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getName());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getTitle());
      assertEquals("g|l$", mediaType4.getExample());
      assertEquals("g|l$", mediaType0.getExample());
      assertEquals("g|l$", mediaType1.getExample());
      assertEquals("g|l$", mediaType2.getExample());
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string1));
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string7);
      assertNotSame(string5, string10);
      assertNotSame(string5, string1);
      assertNotSame(string5, string9);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string9);
      assertNotSame(string6, string10);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string7, string9);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string10);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string10);
      assertNotSame(string9, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string2);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string6);
      assertNotSame(string10, string3);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string9);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string7);
      assertNotSame(string4, string10);
      assertNotSame(string4, string1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNotNull(optional1);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[2];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[0] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = stringArray0[3];
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "x-";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      String string2 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string2);
      assertNull(example0.get$ref());
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertFalse(string2.equals((Object)string1));
      assertSame(example0, example1);
      assertNotSame(string2, string1);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      assertEquals(2, exampleObjectArray0.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(arraySchema0).maxItems();
      doReturn(0, 0).when(arraySchema0).minItems();
      doReturn((Schema) null).when(arraySchema0).schema();
      doReturn(false).when(arraySchema0).uniqueItems();
      Content[] contentArray0 = null;
      boolean boolean1 = true;
      String string0 = "java.langio.swagger.oas.models.parameters.Parameter";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.TRUE;
      String string1 = "!e";
      String string2 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(arraySchema0).when(parameter0).array();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string1, (String) null).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.securitySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string3 = "";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string3, pathItem0);
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(callback1, callback0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertNotNull(callback1);
      
      String string4 = "]xZECH^: -w>/";
      Callback callback2 = callback1.addPathItem(string4, pathItem0);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(callback1, callback0);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertNotNull(callback2);
      
      Callback callback3 = callback2.addPathItem(string3, pathItem0);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertNotNull(callback3);
      
      Callback callback4 = callback3.addPathItem(string4, pathItem0);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(callback1, callback4);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback4);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertNotNull(callback4);
      
      Components components2 = components1.addCallbacks(string3, callback4);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(callback1, callback4);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback4);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertNotNull(components2);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.type(string3);
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(arraySchema2);
      
      Components components3 = components2.addSchemas(string3, arraySchema2);
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback4);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components3);
      
      Link[] linkArray0 = new Link[1];
      String string5 = "";
      String string6 = null;
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(link0).description();
      doReturn((String) null).when(link0).name();
      doReturn(string4, (String) null).when(link0).operationId();
      doReturn(string6).when(link0).operationRef();
      doReturn((LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(1, linkArray0.length);
      assertNotNull(map0);
      
      Components components4 = components3.links(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(1, linkArray0.length);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback4);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(callback0.isEmpty());
      assertEquals(2, callback0.size());
      assertEquals(2, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(callback2.isEmpty());
      assertEquals(2, callback2.size());
      assertEquals(2, callback3.size());
      assertFalse(callback3.isEmpty());
      assertEquals(2, callback4.size());
      assertFalse(callback4.isEmpty());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMinProperties());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getUniqueItems());
      assertEquals("", arraySchema1.getType());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getReadOnly());
      assertEquals("", arraySchema2.getType());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getFormat());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.get$ref());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(1, linkArray0.length);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(explode0, explode1);
      assertSame(explode1, explode0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(callback0, callback1);
      assertSame(callback0, callback4);
      assertSame(callback0, callback2);
      assertSame(callback0, callback3);
      assertSame(callback1, callback4);
      assertSame(callback1, callback0);
      assertSame(callback1, callback3);
      assertSame(callback1, callback2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertSame(callback2, callback4);
      assertSame(callback2, callback1);
      assertSame(callback2, callback0);
      assertSame(callback2, callback3);
      assertSame(callback3, callback2);
      assertSame(callback3, callback0);
      assertSame(callback3, callback1);
      assertSame(callback3, callback4);
      assertSame(callback4, callback2);
      assertSame(callback4, callback3);
      assertSame(callback4, callback0);
      assertSame(callback4, callback1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      io.swagger.oas.annotations.responses.ApiResponse[] apiResponseArray0 = new io.swagger.oas.annotations.responses.ApiResponse[6];
      Content content0 = null;
      String string0 = ";Oxq\"hu!$=B2abp|";
      String string1 = "(`H]'2G\"#sB";
      String string2 = "lEk$le>/zx3K.-0";
      Link[] linkArray0 = new Link[2];
      String string3 = "g@JFfy:UKV zg'rbv";
      String string4 = "java.lang";
      String string5 = "java.lang";
      String string6 = null;
      String string7 = "r JEv=]uz\\)E6";
      String string8 = "'-gABF;2Mq>";
      String string9 = "com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator";
      String string10 = "com.fasterxml.jackson.core.io.SegmentedStringWriter";
      String string11 = "java.lang";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string4, string3, string5, string6).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string7, string3, string8, string6).when(link0).operationId();
      doReturn(string8, string7, string9, string10, string11).when(link0).operationRef();
      doReturn((LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null, (LinkParameters) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      String string12 = "; expected Class<JsonSerializer>";
      io.swagger.oas.annotations.responses.ApiResponse apiResponse0 = mock(io.swagger.oas.annotations.responses.ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(content0, content0, content0, content0, content0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string1, string2).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string2, string12, string12, string12, string2).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, ApiResponse> hashMap0 = new HashMap<String, ApiResponse>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.responses(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string13 = "=Rdtc W]^";
      io.swagger.oas.models.media.ArraySchema arraySchema0 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertNotNull(arraySchema0);
      
      Components components2 = components1.addSchemas(string13, arraySchema0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string2));
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string3);
      assertNotSame(string13, string7);
      assertNotSame(string13, string8);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string0);
      assertNotSame(string13, string1);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string2);
      assertNotNull(components2);
      
      String string14 = "VALUE_NULL";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      PathItem pathItem0 = new PathItem();
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertNotNull(pathItem0);
      
      Callback callback1 = callback0.addPathItem(string13, pathItem0);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotSame(string13, string3);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotNull(callback1);
      
      Components components3 = components2.addCallbacks(string14, callback1);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string0);
      assertNotSame(string14, string10);
      assertNotSame(string14, string5);
      assertNotSame(string14, string11);
      assertNotSame(string14, string3);
      assertNotSame(string14, string12);
      assertNotSame(string14, string9);
      assertNotSame(string14, string7);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string4);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string13, string3);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotNull(components3);
      
      String string15 = null;
      String string16 = components2.toString();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string16, string5);
      assertNotSame(string16, string0);
      assertNotSame(string16, string2);
      assertNotSame(string16, string14);
      assertNotSame(string16, string8);
      assertNotSame(string16, string10);
      assertNotSame(string16, string12);
      assertNotSame(string16, string13);
      assertNotSame(string16, string4);
      assertNotSame(string16, string9);
      assertNotSame(string16, string1);
      assertNotSame(string16, string3);
      assertNotSame(string16, string7);
      assertNotSame(string16, string11);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string13, string3);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertNotSame(string13, string16);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotNull(string16);
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNotNull(link1);
      
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNotNull(server0);
      
      io.swagger.oas.models.links.Link link2 = link1.server(server0);
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertSame(link1, link2);
      assertSame(link2, link1);
      assertNotNull(link2);
      
      io.swagger.oas.models.links.Link link3 = link2.parameters(string14, string15);
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertNull(link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationRef());
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string0);
      assertNotSame(string14, string10);
      assertNotSame(string14, string5);
      assertNotSame(string14, string11);
      assertNotSame(string14, string3);
      assertNotSame(string14, string12);
      assertNotSame(string14, string9);
      assertNotSame(string14, string7);
      assertNotSame(string14, string16);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string4);
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertNotNull(link3);
      
      Components components4 = components3.addLinks(string15, link3);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertNull(link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationRef());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string0);
      assertNotSame(string14, string10);
      assertNotSame(string14, string5);
      assertNotSame(string14, string11);
      assertNotSame(string14, string3);
      assertNotSame(string14, string12);
      assertNotSame(string14, string9);
      assertNotSame(string14, string7);
      assertNotSame(string14, string16);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string4);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string13, string3);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertNotSame(string13, string16);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotNull(components4);
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertEquals(1, callback0.size());
      assertFalse(callback0.isEmpty());
      assertNull(pathItem0.get$ref());
      assertNull(pathItem0.getSummary());
      assertNull(pathItem0.getDescription());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertNull(link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationRef());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(arraySchema0.getNullable());
      assertNull(arraySchema0.getExclusiveMaximum());
      assertNull(arraySchema0.getName());
      assertNull(arraySchema0.getExclusiveMinimum());
      assertNull(arraySchema0.getMinItems());
      assertNull(arraySchema0.getMaxItems());
      assertNull(arraySchema0.getMaxLength());
      assertEquals("array", arraySchema0.getType());
      assertNull(arraySchema0.get$ref());
      assertNull(arraySchema0.getFormat());
      assertNull(arraySchema0.getPattern());
      assertNull(arraySchema0.getMinProperties());
      assertNull(arraySchema0.getTitle());
      assertNull(arraySchema0.getDeprecated());
      assertNull(arraySchema0.getMaxProperties());
      assertNull(arraySchema0.getWriteOnly());
      assertNull(arraySchema0.getMinLength());
      assertNull(arraySchema0.getReadOnly());
      assertNull(arraySchema0.getDescription());
      assertNull(arraySchema0.getUniqueItems());
      assertEquals(6, apiResponseArray0.length);
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string0);
      assertNotSame(string14, string10);
      assertNotSame(string14, string5);
      assertNotSame(string14, string11);
      assertNotSame(string14, string3);
      assertNotSame(string14, string12);
      assertNotSame(string14, string9);
      assertNotSame(string14, string7);
      assertNotSame(string14, string16);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string4);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(link1, link2);
      assertSame(link1, link3);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string13, string3);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string12);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertNotSame(string13, string16);
      assertNotSame(string13, string10);
      assertNotSame(string13, string9);
      assertNotSame(string13, string4);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotNull(optional0);
      
      Link[] linkArray1 = new Link[6];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string17 = "h7?(<A9#.),=7@O-E";
      String string18 = "java.lang";
      String string19 = "ijAPJ:-Q9G\"l>";
      String string20 = "java.lang";
      String string21 = null;
      String string22 = "{c!4;}c1_riJr";
      String string23 = "Zkk_\"v Q_U:'#&{[7+";
      String string24 = "pvA";
      String string25 = "<>0_KfrB";
      String string26 = "TG3Zx%+|@_s6&_A0";
      String string27 = "OperationId and OperatonRef are mutually exclusive, there must be only one setted";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameters0).expression();
      doReturn(string3, string27, string22, string3, (String) null).when(linkParameters0).name();
      String string28 = "skipping class ";
      String string29 = "java.langjava.lang.Object";
      LinkParameters linkParameters1 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters1).expression();
      doReturn(string28, string29, (String) null).when(linkParameters1).name();
      Link link4 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string17, string18, string19, string15).when(link4).description();
      doReturn(string20, string25, string16, string26, string20).when(link4).name();
      doReturn(string20, string20, string18, string21, string22).when(link4).operationId();
      doReturn(string15, string23, string0, string24, string19).when(link4).operationRef();
      doReturn(linkParameters0, linkParameters1, linkParameters1, linkParameters0, linkParameters0).when(link4).parameters();
      linkArray1[0] = link4;
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray1);
      assertFalse(map0.isEmpty());
      assertEquals(4, map0.size());
      assertEquals(6, linkArray1.length);
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertNotSame(linkArray1, linkArray0);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      String string0 = "9Pwt";
      String string1 = "a&8hS";
      String string2 = null;
      String string3 = "java.langio.swagger.oas.models.security.SecurityScheme";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, string3, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean1 = false;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      String string4 = ",";
      boolean boolean2 = false;
      Class<io.swagger.oas.models.media.Content> class0 = io.swagger.oas.models.media.Content.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string5 = "#/components/schemas/";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean0, boolean0).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1).when(parameter0).deprecated();
      doReturn(string1, string5).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string4, string2).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = components0.getExamples();
      assertNull(map0);
      
      Components components1 = components0.examples(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.securitySchemes(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      String string6 = "_z{]dF6t08Dg,e";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNotNull(link0);
      
      io.swagger.oas.models.links.Link link1 = link0.operationId(string6);
      assertNull(link0.getDescription());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotNull(link1);
      
      Components components3 = components2.addLinks(string6, link1);
      assertNull(link0.getDescription());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotNull(components3);
      
      io.swagger.oas.models.media.ArraySchema arraySchema1 = new io.swagger.oas.models.media.ArraySchema();
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNotNull(arraySchema1);
      
      io.swagger.oas.models.media.Schema<Example> schema2 = null;
      io.swagger.oas.models.media.ArraySchema arraySchema2 = arraySchema1.items(schema2);
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertEquals("array", arraySchema2.getType());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNotNull(arraySchema2);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)arraySchema2.getProperties();
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertEquals("array", arraySchema2.getType());
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertNull(map1);
      
      Components components4 = components3.schemas(map1);
      assertNull(link0.getDescription());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertEquals("array", arraySchema2.getType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter0, components4);
      assertNull(link0.getDescription());
      assertEquals("_z{]dF6t08Dg,e", link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertEquals("_z{]dF6t08Dg,e", link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNull(arraySchema1.getPattern());
      assertNull(arraySchema1.getDeprecated());
      assertNull(arraySchema1.getTitle());
      assertNull(arraySchema1.getExclusiveMinimum());
      assertNull(arraySchema1.getFormat());
      assertNull(arraySchema1.getMaxLength());
      assertNull(arraySchema1.get$ref());
      assertNull(arraySchema1.getMinProperties());
      assertEquals("array", arraySchema1.getType());
      assertNull(arraySchema1.getMinItems());
      assertNull(arraySchema1.getName());
      assertNull(arraySchema1.getMaxItems());
      assertNull(arraySchema1.getMinLength());
      assertNull(arraySchema1.getNullable());
      assertNull(arraySchema1.getMaxProperties());
      assertNull(arraySchema1.getReadOnly());
      assertNull(arraySchema1.getUniqueItems());
      assertNull(arraySchema1.getExclusiveMaximum());
      assertNull(arraySchema1.getWriteOnly());
      assertNull(arraySchema1.getDescription());
      assertNull(arraySchema2.getMaxProperties());
      assertNull(arraySchema2.getWriteOnly());
      assertNull(arraySchema2.getMinProperties());
      assertNull(arraySchema2.getMinLength());
      assertNull(arraySchema2.get$ref());
      assertNull(arraySchema2.getExclusiveMaximum());
      assertNull(arraySchema2.getTitle());
      assertNull(arraySchema2.getUniqueItems());
      assertNull(arraySchema2.getMaxLength());
      assertNull(arraySchema2.getDescription());
      assertNull(arraySchema2.getExclusiveMinimum());
      assertNull(arraySchema2.getMinItems());
      assertNull(arraySchema2.getMaxItems());
      assertNull(arraySchema2.getDeprecated());
      assertNull(arraySchema2.getPattern());
      assertNull(arraySchema2.getNullable());
      assertNull(arraySchema2.getReadOnly());
      assertNull(arraySchema2.getName());
      assertNull(arraySchema2.getFormat());
      assertEquals("array", arraySchema2.getType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, contentArray0.length);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(explode0.equals((Object)explode1));
      assertFalse(explode1.equals((Object)explode2));
      assertFalse(explode1.equals((Object)explode0));
      assertFalse(explode2.equals((Object)explode1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(arraySchema1, arraySchema2);
      assertSame(arraySchema2, arraySchema1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(explode0, explode2);
      assertNotSame(explode0, explode1);
      assertNotSame(explode1, explode2);
      assertNotSame(explode1, explode0);
      assertSame(explode2, explode0);
      assertNotSame(explode2, explode1);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponse apiResponse0 = new ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      String string1 = "DEFAULT_VIEW_INCLUSION";
      ApiResponse apiResponse1 = apiResponse0.description(string1);
      assertNull(apiResponse0.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse0.getDescription());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertFalse(string1.equals((Object)string0));
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string1, string0);
      assertSame(apiResponse1, apiResponse0);
      assertNotNull(apiResponse1);
      
      Map<String, Header> map0 = components0.getHeaders();
      assertNull(map0);
      
      ApiResponse apiResponse2 = apiResponse1.headers(map0);
      assertNull(apiResponse0.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse0.getDescription());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse2.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse2.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string1, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotNull(apiResponse2);
      
      String string2 = "java.lang";
      ApiResponse apiResponse3 = apiResponse2.$ref(string2);
      assertEquals("java.lang", apiResponse3.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse3.getDescription());
      assertEquals("java.lang", apiResponse0.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse0.getDescription());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse1.getDescription());
      assertEquals("java.lang", apiResponse1.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse2.getDescription());
      assertEquals("java.lang", apiResponse2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(apiResponse3);
      
      Map<String, Object> map1 = apiResponse3.getExtensions();
      assertEquals("java.lang", apiResponse3.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse3.getDescription());
      assertEquals("java.lang", apiResponse0.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse0.getDescription());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse1.getDescription());
      assertEquals("java.lang", apiResponse1.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse2.getDescription());
      assertEquals("java.lang", apiResponse2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNull(map1);
      
      components0.setExtensions(map1);
      assertEquals("java.lang", apiResponse3.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse3.getDescription());
      assertEquals("java.lang", apiResponse0.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse0.getDescription());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse1.getDescription());
      assertEquals("java.lang", apiResponse1.get$ref());
      assertEquals("DEFAULT_VIEW_INCLUSION", apiResponse2.getDescription());
      assertEquals("java.lang", apiResponse2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse2, apiResponse1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string3 = "*Tn_hU;.M06p'";
      Example example1 = example0.summary(string3);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals("*Tn_hU;.M06p'", example0.getSummary());
      assertNull(example1.getExternalValue());
      assertEquals("*Tn_hU;.M06p'", example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(example0, example1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(example1, example0);
      assertNotNull(example1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(content0, produces0, produces0, components0);
      assertEquals(1, exampleObjectArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotNull(optional0);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameters0).name();
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameters0);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertNotNull(map2);
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      String string0 = ",";
      String string1 = "LB8Ua]BrC:l";
      String string2 = "|-k(G\"z+>L&voi&?XF";
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(linkParameters0).expression();
      doReturn(string2, string1).when(linkParameters0).name();
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameters0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional0);
      
      String string3 = "JW)TblvHn?Gy|U";
      String string4 = null;
      String string5 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[1];
      String string6 = "D2,{qoH";
      String string7 = "OT>[\"ZwpD[";
      String string8 = "I2]@n^";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string6, string1, string6, string6).when(serverVariable0).description();
      doReturn(string7, string4, string8, string8, string2).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      String string9 = "`54";
      String string10 = "Unrecognized character escape ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string5, string3, string9).when(server0).description();
      doReturn(string4, string4, string6, string6, string10).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertEquals(1, serverVariableArray0.length);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string7);
      assertNotSame(string10, string2);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertNotSame(string3, string8);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string10);
      assertNotSame(string3, string2);
      assertNotSame(string3, string9);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string9);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string8);
      assertNotSame(string6, string10);
      assertNotSame(string6, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string2);
      assertNotSame(string9, string10);
      assertNotSame(string9, string7);
      assertNotSame(string9, string3);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[9];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      serverArray0[7] = serverArray0[5];
      serverArray0[8] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertEquals(9, serverArray0.length);
      assertNotNull(optional2);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string11 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNotNull(encoding0);
      
      String string12 = "0BRc1e";
      Boolean boolean0 = Boolean.valueOf(string12);
      assertFalse(boolean0);
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string11);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string12, string8);
      assertNotNull(boolean0);
      
      Encoding encoding1 = encoding0.allowReserved(boolean0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertSame(encoding0, encoding1);
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string11);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string12, string8);
      assertSame(encoding1, encoding0);
      assertNotNull(encoding1);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Encoding encoding2 = encoding1.headers(hashMap0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertFalse(encoding2.getAllowReserved());
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string11);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string12, string8);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotNull(encoding2);
      
      MediaType mediaType1 = mediaType0.addEncoding(string11, encoding2);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertFalse(encoding2.getAllowReserved());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string11);
      assertNotSame(string12, string3);
      assertNotSame(string12, string6);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string12, string8);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string1);
      assertNotSame(string11, string9);
      assertNotSame(string11, string2);
      assertNotSame(string11, string8);
      assertNotSame(string11, string6);
      assertNotSame(string11, string3);
      assertNotNull(mediaType1);
      
      String string13 = "f_s d#[$h1<~CoI";
      String string14 = "?Soh]K?\"V/";
      String string15 = "1";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string12).when(exampleObject0).externalValue();
      doReturn(string7, string13, string8, string8).when(exampleObject0).name();
      doReturn(string2, string7).when(exampleObject0).summary();
      doReturn(string14, string15).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType1, exampleObject0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertFalse(encoding2.getAllowReserved());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string15));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string15));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string14));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string13));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string15));
      assertFalse(string8.equals((Object)string12));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string14));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string13));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string13));
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertNotSame(string12, string11);
      assertNotSame(string12, string15);
      assertNotSame(string12, string6);
      assertNotSame(string12, string14);
      assertNotSame(string12, string8);
      assertNotSame(string12, string10);
      assertNotSame(string12, string7);
      assertNotSame(string12, string13);
      assertNotSame(string12, string3);
      assertNotSame(string12, string1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string2, string12);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string10);
      assertNotSame(string2, string13);
      assertNotSame(string2, string3);
      assertNotSame(string2, string9);
      assertNotSame(string2, string11);
      assertNotSame(string2, string15);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string14);
      assertNotSame(string2, string8);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string13, string7);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertNotSame(string13, string14);
      assertNotSame(string13, string10);
      assertNotSame(string13, string8);
      assertNotSame(string13, string11);
      assertNotSame(string13, string15);
      assertNotSame(string13, string9);
      assertNotSame(string13, string0);
      assertNotSame(string13, string3);
      assertNotSame(string13, string1);
      assertNotSame(string13, string2);
      assertNotSame(string14, string13);
      assertNotSame(string14, string7);
      assertNotSame(string14, string8);
      assertNotSame(string14, string0);
      assertNotSame(string14, string10);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string11);
      assertNotSame(string14, string1);
      assertNotSame(string14, string2);
      assertNotSame(string14, string9);
      assertNotSame(string14, string12);
      assertNotSame(string14, string3);
      assertNotSame(string15, string3);
      assertNotSame(string15, string0);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string8);
      assertNotSame(string15, string6);
      assertNotSame(string15, string13);
      assertNotSame(string15, string10);
      assertNotSame(string15, string7);
      assertNotSame(string15, string14);
      assertNotSame(string15, string11);
      assertNotSame(string6, string11);
      assertNotSame(string6, string15);
      assertNotSame(string6, string12);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string9);
      assertNotSame(string6, string14);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string13);
      assertNotSame(string6, string8);
      assertNotSame(string6, string10);
      assertNotSame(string7, string13);
      assertNotSame(string7, string8);
      assertNotSame(string7, string12);
      assertNotSame(string7, string10);
      assertNotSame(string7, string9);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string14);
      assertNotSame(string7, string3);
      assertNotSame(string7, string11);
      assertNotSame(string7, string15);
      assertNotSame(string8, string1);
      assertNotSame(string8, string11);
      assertNotSame(string8, string15);
      assertNotSame(string8, string12);
      assertNotSame(string8, string9);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string14);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string13);
      assertNotSame(string8, string10);
      assertNotSame(string8, string6);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string9);
      assertNotSame(string11, string14);
      assertNotSame(string11, string2);
      assertNotSame(string11, string8);
      assertNotSame(string11, string3);
      assertNotSame(string11, string15);
      assertNotSame(string11, string1);
      assertNotSame(string11, string6);
      assertNotSame(string11, string13);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-400);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 1845;
      Class<Void> class1 = Void.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1, (Schema) null).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      Optional<io.swagger.oas.models.media.ArraySchema> optional1 = OperationParser.getArraySchema(arraySchema0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(optional1);
      
      String string0 = "DEFAULT";
      String string1 = "J98'Pb@v";
      String string2 = "5xD\"GH5].qKuPw/k;";
      String string3 = null;
      String string4 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(contact0).email();
      doReturn(string1, string3).when(contact0).name();
      doReturn(string2, string4).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(optional2);
      
      String string5 = "";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact1).email();
      doReturn(string0, string4).when(contact1).name();
      doReturn(string5).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(optional3.equals((Object)optional2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(optional3, optional2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotNull(optional3);
      
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      assertSame(optional4, optional0);
      assertNotNull(optional4);
      
      LinkParameters linkParameters0 = mock(LinkParameters.class, new ViolatedAssumptionAnswer());
      doReturn(string5).when(linkParameters0).name();
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameters0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotNull(map0);
      
      int int3 = (-584);
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional5 = OperationParser.getLicense(license0);
      assertNotNull(optional5);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional6 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional6);
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-400);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 1845;
      Class<Void> class1 = Void.class;
      String string0 = "no description";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = "    schemas: ";
      String string2 = "*/*";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      int int3 = Integer.MAX_VALUE;
      String string3 = "";
      int int4 = 1187;
      String string4 = "X%XI=?Gfyfc";
      String string5 = "Numeric value (%s) out of range of long (%d - %s)";
      boolean boolean2 = true;
      String string6 = "0I{LVf0%";
      String string7 = "java.langio.swagger.oas.models.parameters.RequestBody";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      String string8 = "io.swagge";
      boolean boolean3 = true;
      String string9 = "";
      String string10 = "java.lang";
      String string11 = "-0";
      String string12 = "io.swagge";
      boolean boolean4 = true;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string8, (String) null).when(schema2)._default();
      doReturn(boolean3, false).when(schema2).deprecated();
      doReturn(string2, (String) null).when(schema2).description();
      doReturn(string9, string10, (String) null).when(schema2).example();
      doReturn(boolean3, false).when(schema2).exclusiveMaximum();
      doReturn(boolean3, false).when(schema2).exclusiveMinimum();
      doReturn(string1, (String) null).when(schema2).format();
      doReturn(int2).when(schema2).maxLength();
      doReturn(0).when(schema2).maxProperties();
      doReturn(string11, (String) null).when(schema2).maximum();
      doReturn(int2, 0).when(schema2).minProperties();
      doReturn(stringArray0[2], (String) null).when(schema2).pattern();
      doReturn(boolean4, false).when(schema2).readOnly();
      doReturn(string9).when(schema2).ref();
      doReturn(string5, (String) null).when(schema2).type();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-400);
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      int int2 = 1845;
      Class<Void> class1 = Void.class;
      String string0 = "no description";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      String string1 = "    schemas: ";
      String string2 = "*/*";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string3 = "R=yf?";
      int int3 = Integer.MAX_VALUE;
      String string4 = "";
      int int4 = 1187;
      String string5 = "X%XI=?Gfyfc";
      String string6 = "Numeric value (%s) out of range of long (%d - %s)";
      boolean boolean2 = true;
      String string7 = "0I{LVf0%";
      String string8 = "java.langio.swagger.oas.models.parameters.RequestBody";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      String string9 = "java.langio.swagger.jaxrs2.OperationParser";
      String string10 = "java.langio.swagger.oas.models.parameters.RequestBody";
      boolean boolean3 = true;
      boolean boolean4 = false;
      String string11 = "[0+ _FM";
      int int5 = 1;
      String string12 = "000";
      String string13 = "3^xBlqwO3p88H]oR";
      String string14 = "io.swagger.jaxrs2.OperationParser";
      boolean boolean5 = true;
      String string15 = "]=:zyf[;`";
      String string16 = "uSk{@YL$TEdj|+=";
      boolean boolean6 = true;
      String string17 = "";
      int int6 = 1;
      String string18 = "IGNORE_UNKNOWN";
      boolean boolean7 = true;
      String string19 = "java.langio.swagger.oas.models.media.ArraySchema";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string14).when(schema2)._default();
      doReturn(boolean0, boolean5).when(schema2).deprecated();
      doReturn(string0, string15).when(schema2).description();
      doReturn(string10, string0, stringArray0[0], string16).when(schema2).example();
      doReturn(boolean3, boolean6).when(schema2).exclusiveMaximum();
      doReturn(boolean4).when(schema2).exclusiveMinimum();
      doReturn(string11, string7).when(schema2).format();
      doReturn(int5).when(schema2).maxLength();
      doReturn(int3, 0).when(schema2).maxProperties();
      doReturn(string12, string17).when(schema2).maximum();
      doReturn(int2, int6).when(schema2).minProperties();
      doReturn(string5, string18).when(schema2).pattern();
      doReturn(boolean2, boolean7).when(schema2).readOnly();
      doReturn(stringArray0[4], string11).when(schema2).ref();
      doReturn(string10, string19).when(schema2).type();
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int2).when(arraySchema0).maxItems();
      doReturn(int0).when(arraySchema0).minItems();
      doReturn(schema0, schema1, schema2).when(arraySchema0).schema();
      doReturn(boolean0, boolean0).when(arraySchema0).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      Server[] serverArray0 = new Server[4];
      String string0 = "java.langio.swagger.oas.models.parameters.RequestBody";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "*/*";
      String string3 = "com.fasterxml.jackson.databind.type.TypeBase";
      String string4 = "\\C?";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertEquals(4, serverArray0.length);
      assertNotNull(optional0);
      
      String string5 = "java.langio.swagger.jaxrs2.OperationParser";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(license0).name();
      doReturn(string4, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotNull(optional1);
      
      int int0 = (-426);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ArraySchema arraySchema0 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      int int1 = Integer.MAX_VALUE;
      int int2 = (-1458);
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      ArraySchema arraySchema1 = mock(ArraySchema.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(arraySchema1).maxItems();
      doReturn(int1).when(arraySchema1).minItems();
      doReturn(schema1, (Schema) null).when(arraySchema1).schema();
      doReturn(boolean1).when(arraySchema1).uniqueItems();
      // Undeclared exception!
      try { 
        OperationParser.getArraySchema(arraySchema1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }
}
