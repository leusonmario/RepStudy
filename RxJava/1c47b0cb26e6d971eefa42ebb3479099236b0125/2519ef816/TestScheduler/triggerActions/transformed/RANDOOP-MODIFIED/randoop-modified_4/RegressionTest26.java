import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        testScheduler0.settime((long) (short) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction23.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.action;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.getscheduler();
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction4.state;
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableTimedAction4.getstate();
        long long12 = strComparableTimedAction4.gettime();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(testScheduler6);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "hi!" + "'", strComparable10, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "hi!" + "'", strComparable11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler18.triggerActions((long) (byte) 100);
        long long25 = testScheduler18.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        long long35 = testScheduler34.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler testScheduler38 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) ' ', schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean43 = strComparableTimedAction42.getisCancelled();
        java.lang.Class<?> wildcardClass44 = strComparableTimedAction42.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler34, (long) ' ', schedulerFunc2_37, (java.lang.reflect.Type) wildcardClass44);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (-1L), schedulerFunc2_17, (java.lang.Object) schedulerFunc2_37);
        testScheduler13.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue49 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler13.getqueue();
        long long51 = testScheduler13.time;
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler13.schedule(action0_52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(subscription53);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        testScheduler12.time = 'a';
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(action0_24);
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeTo((long) (short) 0, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = testScheduler18.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler18.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime36.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime23.thenComparing(wildcardTimedActionComparator38);
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler46 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) ' ', schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction50.getisCancelled();
        int int52 = compareActionsByTime23.compare(strComparableTimedAction44, strComparableTimedAction50);
        long long53 = strComparableTimedAction50.time;
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableTimedAction50.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction50.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler18, (long) (short) 10, schedulerFunc2_22, (java.io.Serializable) atomicBoolean55);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) -1, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass61 = strComparableTimedAction60.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable54 + "' != '" + "hi!" + "'", strComparable54, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = strComparableTimedAction23.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription12 = testScheduler0.schedule(schedulerFunc1_9, (long) (short) 10, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler5.queue;
        testScheduler5.time = 'a';
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler5.schedule(action0_9);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler5.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler5.getqueue();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        java.lang.Comparable<java.lang.String> strComparable94 = strComparableTimedAction71.getstate();
        rx.concurrency.TestScheduler testScheduler95 = strComparableTimedAction71.scheduler;
        long long96 = testScheduler95.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertEquals("'" + strComparable94 + "' != '" + "hi!" + "'", strComparable94, "hi!");
        org.junit.Assert.assertNotNull(testScheduler95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 100);
        long long27 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler0.schedule(schedulerFunc1_28, (long) 100, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        long long15 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        long long20 = testScheduler0.gettime();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions((long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction24.scheduler;
        testScheduler25.triggerActions();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(testScheduler25);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.scheduler;
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.scheduler;
        long long7 = strComparableTimedAction4.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.getisCancelled();
        long long9 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.getisCancelled();
        org.junit.Assert.assertNull(testScheduler5);
        org.junit.Assert.assertNull(testScheduler6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean10);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        long long17 = testScheduler16.time;
        long long18 = testScheduler16.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler16.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction11.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.isCancelled;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = strComparableTimedAction11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        rx.Subscription subscription41 = testScheduler32.schedule(schedulerFunc1_40);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        testScheduler44.triggerActions((long) (byte) 100);
        long long51 = testScheduler44.gettime();
        long long52 = testScheduler44.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler testScheduler55 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) ' ', schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Class<?> wildcardClass61 = strComparableTimedAction59.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler44, 10L, schedulerFunc2_54, (java.lang.reflect.AnnotatedElement) wildcardClass61);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler32, 0L, schedulerFunc2_43, (java.lang.reflect.Type) wildcardClass61);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (short) 1, schedulerFunc2_31, (java.lang.reflect.AnnotatedElement) wildcardClass61);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions((long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.triggerActions();
        long long17 = testScheduler15.time;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeBy((long) (-1), timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (short) 100, schedulerFunc2_17, (java.io.Serializable) (-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(action0_21);
        long long23 = testScheduler12.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(subscriptionFunc0_24);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Action0 action0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler19.schedulePeriodically(action0_20, (long) (short) -1, (long) 10, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction11.getaction();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.isCancelled;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.time = (-1);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler0.schedulePeriodically(subscriptionFunc0_22, 0L, 35L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(schedulerFunc1_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_18, strComparable19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(action0_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime(97L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(schedulerFunc1_29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription30);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction45.getisCancelled();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction45.scheduler;
        testScheduler48.time = 100;
        long long51 = testScheduler48.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_52 = null;
        rx.Subscription subscription53 = testScheduler48.schedule(schedulerFunc1_52);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, 97L, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, 10L, schedulerFunc2_34, (java.io.Serializable) atomicBoolean58);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(atomicBoolean58);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 0, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction21.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_23);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.scheduler;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler25.advanceTimeBy(52L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(testScheduler25);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (short) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (short) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction34.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction34.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler13, (long) (byte) -1, schedulerFunc2_18, (java.io.Serializable) atomicBoolean36);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_38 = null;
        java.util.concurrent.TimeUnit timeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription42 = testScheduler13.schedulePeriodically(schedulerFunc1_38, 35L, 100L, timeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertNotNull(atomicBoolean36);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(schedulerFunc1_19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(action0_21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(action0_17);
        long long19 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(schedulerFunc1_20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) (short) 10, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(schedulerFunc2_6);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = strComparableTimedAction8.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction8.getaction();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction8.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription15 = testScheduler11.schedule(schedulerFunc1_12, 97L, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertNotNull(testScheduler11);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        testScheduler12.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(schedulerFunc1_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction26.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "hi!" + "'", strComparable27, "hi!");
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        long long32 = testScheduler30.time;
        testScheduler30.triggerActions();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        long long9 = strComparableTimedAction4.time;
        strComparableTimedAction4.cancel();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction4.getaction();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertNull(testScheduler11);
        org.junit.Assert.assertNull(schedulerFunc2_12);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction29.getaction();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableTimedAction29.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction29.getisCancelled();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.getscheduler();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler33.triggerActions((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertEquals("'" + strComparable31 + "' != '" + "hi!" + "'", strComparable31, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        testScheduler21.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 0, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        strComparableTimedAction38.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean41 = strComparableTimedAction38.getisCancelled();
        long long42 = strComparableTimedAction38.time;
        long long43 = strComparableTimedAction38.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction38.isCancelled;
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction38.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction38.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction38.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction21.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction21.state;
        long long33 = strComparableTimedAction21.time;
        long long34 = strComparableTimedAction21.time;
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction21.getscheduler();
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction21.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, 0L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_41 = null;
        java.util.concurrent.TimeUnit timeUnit43 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription44 = testScheduler36.schedule(action0_41, (long) (byte) 0, timeUnit43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertNotNull(testScheduler36);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator5 = wildcardTimedActionComparator4.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = wildcardTimedActionComparator4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime7 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime8.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime7.thenComparing(wildcardTimedActionComparator9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = wildcardTimedActionComparator9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = wildcardTimedActionComparator6.thenComparing(wildcardTimedActionComparator9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime13.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime39.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime38.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator40.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = wildcardTimedActionComparator40.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = wildcardTimedActionComparator37.thenComparing(wildcardTimedActionComparator55);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = compareActionsByTime58.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator60 = compareActionsByTime57.thenComparing(wildcardTimedActionComparator59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = wildcardTimedActionComparator37.thenComparing(wildcardTimedActionComparator59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = wildcardTimedActionComparator37.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime62);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime65.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime64.thenComparing(wildcardTimedActionComparator66);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime64.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime69 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = compareActionsByTime69.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime64.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator37.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime64.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator73.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime75 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime76 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = compareActionsByTime76.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = compareActionsByTime75.thenComparing(wildcardTimedActionComparator77);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = wildcardTimedActionComparator78.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = wildcardTimedActionComparator74.thenComparing(wildcardTimedActionComparator79);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = wildcardTimedActionComparator6.thenComparing(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator5);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator60);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator77);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction22.isCancelled;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.getscheduler();
        long long25 = testScheduler24.now();
        long long26 = testScheduler24.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) 1, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        long long31 = testScheduler24.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue81 = testScheduler71.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue82 = testScheduler71.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue81);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue82);
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = strComparableTimedAction17.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        long long5 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        long long16 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        testScheduler0.triggerActions((long) (byte) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = strComparableTimedAction23.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler7.getqueue();
        testScheduler7.triggerActions();
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler7.schedule(action0_28);
        testScheduler7.time = (short) -1;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.time;
        long long26 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        long long29 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        long long33 = testScheduler32.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_34 = null;
        rx.Subscription subscription35 = testScheduler32.schedule(schedulerFunc1_34);
        long long36 = testScheduler32.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 100, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue41 = testScheduler32.queue;
        long long42 = testScheduler32.now();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (short) -1, schedulerFunc2_31, (rx.Scheduler) testScheduler32);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        testScheduler14.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        strComparableTimedAction31.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.getaction();
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction31.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = strComparableTimedAction31.action;
        long long37 = strComparableTimedAction31.gettime();
        java.lang.Class<?> wildcardClass38 = strComparableTimedAction31.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler14, (long) 10, schedulerFunc2_20, (java.lang.Object) wildcardClass38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (short) -1, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        long long44 = strComparableTimedAction43.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertNull(schedulerFunc2_36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction11.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_12);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        testScheduler0.triggerActions((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        long long15 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(schedulerFunc1_16);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        long long14 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler12, 35L, schedulerFunc2_16, compareActionsByTime17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(schedulerFunc1_21);
        testScheduler12.time = 0;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        long long13 = testScheduler0.time;
        testScheduler0.settime((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction16.isCancelled;
        strComparableTimedAction16.cancel();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction16.action;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, 10L, schedulerFunc2_11, strComparableTimedAction16);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean25 = strComparableTimedAction16.getisCancelled();
        long long26 = strComparableTimedAction16.gettime();
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction16.scheduler;
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNull(testScheduler22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(atomicBoolean25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNull(testScheduler27);
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        long long25 = testScheduler0.now();
        long long26 = testScheduler0.gettime();
        long long27 = testScheduler0.now();
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) -1, schedulerFunc2_18, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, strComparable23);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.time = 35L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_32 = null;
        java.util.concurrent.TimeUnit timeUnit34 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription35 = testScheduler0.schedule(subscriptionFunc0_32, (-1L), timeUnit34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.queue;
        long long19 = testScheduler17.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        java.lang.Comparable<java.lang.String> strComparable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 1L, schedulerFunc2_21, strComparable22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler17.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler17.schedulePeriodically(schedulerFunc1_25, (long) ' ', 97L, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        long long17 = strComparableTimedAction10.gettime();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        long long20 = testScheduler19.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler19.schedule(subscriptionFunc0_21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        long long11 = strComparableTimedAction10.time;
        long long12 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.action;
        long long15 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        testScheduler50.triggerActions((long) (byte) 100);
        long long57 = testScheduler50.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (short) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (short) 10, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction65.scheduler;
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction65.getstate();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (short) 10, schedulerFunc2_49, (java.lang.Object) strComparableTimedAction65);
        testScheduler47.time = 35L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction23.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.action;
        strComparableTimedAction23.cancel();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        long long33 = strComparableTimedAction32.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction32.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction32.getaction();
        int int36 = compareActionsByTime0.compare(strComparableTimedAction23, strComparableTimedAction32);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction32.state;
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction32.getscheduler();
        java.util.concurrent.TimeUnit timeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler38.advanceTimeTo(35L, timeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean34);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNotNull(testScheduler38);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction22.getstate();
        strComparableTimedAction22.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction22.getisCancelled();
        rx.concurrency.TestScheduler testScheduler28 = strComparableTimedAction22.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNotNull(testScheduler28);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        long long16 = testScheduler12.time;
        long long17 = testScheduler12.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction35.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = strComparableTimedAction35.action;
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.scheduler;
        testScheduler38.triggerActions();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) '4', schedulerFunc2_19, (java.lang.Object) testScheduler38);
        rx.util.functions.Action0 action0_41 = null;
        rx.Subscription subscription42 = testScheduler38.schedule(action0_41);
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler38.advanceTimeTo(0L, timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "" + "'", strComparable36, "");
        org.junit.Assert.assertNull(schedulerFunc2_37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(subscription42);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        long long52 = testScheduler49.now();
        long long53 = testScheduler49.gettime();
        testScheduler49.settime(32L);
        rx.util.functions.Action0 action0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(action0_56);
        long long58 = testScheduler49.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        long long25 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_27, strComparable28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction54.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction54.scheduler;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction54.getscheduler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = strComparableTimedAction54.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertNull(testScheduler61);
        org.junit.Assert.assertNull(testScheduler62);
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        long long15 = strComparableTimedAction10.gettime();
        long long16 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler0.now();
        long long19 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = testScheduler0.now();
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) 'a', timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        testScheduler0.time = 100L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_7 = null;
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription11 = testScheduler0.schedulePeriodically(subscriptionFunc0_7, 100L, (long) '#', timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        long long30 = strComparableTimedAction28.time;
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction28.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (short) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction35.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.isCancelled;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "hi!" + "'", strComparable36, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean37);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        long long8 = strComparableTimedAction4.gettime();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        long long10 = strComparableTimedAction4.time;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertNull(testScheduler9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_26 = null;
        java.lang.reflect.GenericDeclaration genericDeclaration27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, (long) '#', schedulerFunc2_26, genericDeclaration27);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction35.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = strComparableTimedAction35.getaction();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.getscheduler();
        rx.util.functions.Action0 action0_39 = null;
        rx.Subscription subscription40 = testScheduler38.schedule(action0_39);
        long long41 = testScheduler38.now();
        testScheduler38.time = 0;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 10, schedulerFunc2_30, testScheduler38);
        long long45 = testScheduler38.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "" + "'", strComparable36, "");
        org.junit.Assert.assertNull(schedulerFunc2_37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(subscription40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        testScheduler12.triggerActions(97L);
        long long39 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue40 = testScheduler12.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue40);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        long long25 = testScheduler0.now();
        testScheduler0.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Action0 action0_34 = null;
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription37 = testScheduler0.schedule(action0_34, 97L, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(subscriptionFunc0_21);
        testScheduler20.time = (short) 100;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler20.advanceTimeBy((long) (byte) 100, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.scheduler;
        long long21 = testScheduler20.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler20.schedule(schedulerFunc1_22, (-1L), timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction22.isCancelled;
        strComparableTimedAction22.cancel();
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction22.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler26.schedule(subscriptionFunc0_27);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction19.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.action;
        long long26 = strComparableTimedAction19.time;
        long long27 = strComparableTimedAction19.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        testScheduler0.settime((long) '#');
        long long28 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = strComparableTimedAction32.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator40.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime56 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler62 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) (byte) 10, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        int int67 = compareActionsByTime56.compare(strComparableTimedAction61, strComparableTimedAction66);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime44.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime56);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime69 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime70 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime70.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = compareActionsByTime69.thenComparing(wildcardTimedActionComparator71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = wildcardTimedActionComparator71.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime74 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler75 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, (long) (byte) 10, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler80 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler80, (long) (byte) 10, schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "");
        int int85 = compareActionsByTime74.compare(strComparableTimedAction79, strComparableTimedAction84);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = wildcardTimedActionComparator71.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = wildcardTimedActionComparator68.thenComparing(wildcardTimedActionComparator86);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator68.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = wildcardTimedActionComparator68.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = wildcardTimedActionComparator43.thenComparing(wildcardTimedActionComparator89);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime91 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = compareActionsByTime91.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator92.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator94 = wildcardTimedActionComparator43.thenComparing(wildcardTimedActionComparator92);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator94);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        strComparableTimedAction4.cancel();
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction4.action;
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction4.action;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertNull(schedulerFunc2_12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNull(testScheduler15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (short) 100, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = strComparableTimedAction57.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction57.isCancelled;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = strComparableTimedAction57.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNull(schedulerFunc2_58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction59.getisCancelled();
        long long66 = strComparableTimedAction59.gettime();
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction59.state;
        java.lang.Comparable<java.lang.String> strComparable68 = strComparableTimedAction59.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = strComparableTimedAction59.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "hi!" + "'", strComparable67, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable68 + "' != '" + "hi!" + "'", strComparable68, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_69);
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        testScheduler0.time = '4';
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler0.schedule(action0_27, (long) (byte) 1, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        testScheduler71.time = (short) 1;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_83 = null;
        rx.Subscription subscription84 = testScheduler71.schedule(schedulerFunc1_83);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(subscription84);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 97L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        long long29 = testScheduler12.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        long long19 = testScheduler16.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler16.schedule(schedulerFunc1_20);
        long long22 = testScheduler16.time;
        long long23 = testScheduler16.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 100, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.getscheduler();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.scheduler;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertNull(testScheduler10);
        org.junit.Assert.assertNull(testScheduler11);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        long long15 = testScheduler0.now();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(action0_16);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(subscriptionFunc0_20);
        testScheduler0.settime((long) 10);
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) 100, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.getscheduler();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(testScheduler6);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        testScheduler50.triggerActions();
        long long52 = testScheduler50.now();
        long long53 = testScheduler50.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction6.cancel();
        long long8 = strComparableTimedAction6.gettime();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction6.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = strComparableTimedAction6.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler9);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_94 = strComparableTimedAction71.getaction();
        java.lang.Comparable<java.lang.String> strComparable95 = strComparableTimedAction71.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_94);
        org.junit.Assert.assertEquals("'" + strComparable95 + "' != '" + "hi!" + "'", strComparable95, "hi!");
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction27.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, 0L, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_56 = null;
        java.util.concurrent.TimeUnit timeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription59 = testScheduler51.schedule(schedulerFunc1_56, (long) (byte) 10, timeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(testScheduler51);
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction16.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.getscheduler();
        long long19 = testScheduler18.gettime();
        rx.util.functions.Action0 action0_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler18.schedule(action0_20, (long) (short) 1, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler13.schedule(subscriptionFunc0_43);
        long long45 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = strComparableTimedAction49.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNull(schedulerFunc2_50);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction5.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction5.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction5.getstate();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction23.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler30, 100L, schedulerFunc2_32, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_35 = null;
        rx.Subscription subscription36 = testScheduler30.schedule(schedulerFunc1_35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass41 = strComparableTimedAction40.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (long) (byte) 1, schedulerFunc2_17, (java.lang.reflect.Type) wildcardClass41);
        testScheduler0.time = (byte) -1;
        long long45 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue46 = testScheduler0.getqueue();
        testScheduler0.settime((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue46);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction44.getisCancelled();
        strComparableTimedAction44.cancel();
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction44.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = strComparableTimedAction44.action;
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction44.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNull(schedulerFunc2_54);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "" + "'", strComparable55, "");
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 'a', schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction46.isCancelled;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = strComparableTimedAction46.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(atomicBoolean47);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = strComparableTimedAction44.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.getscheduler();
        testScheduler19.settime(35L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = 0L;
        long long18 = testScheduler15.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_47 = null;
        rx.Subscription subscription48 = testScheduler46.schedule(action0_47);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (short) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction58.getscheduler();
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction58.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = strComparableTimedAction58.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean68 = strComparableTimedAction58.getisCancelled();
        int int69 = compareActionsByTime21.compare(strComparableTimedAction52, strComparableTimedAction58);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction58.getscheduler();
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction58.scheduler;
        testScheduler71.time = 100L;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler15, 100L, schedulerFunc2_20, testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_75 = null;
        rx.Subscription subscription76 = testScheduler71.schedule(schedulerFunc1_75);
        java.util.concurrent.TimeUnit timeUnit78 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler71.advanceTimeTo((long) 1, timeUnit78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNull(schedulerFunc2_67);
        org.junit.Assert.assertNotNull(atomicBoolean68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription76);
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        long long10 = testScheduler0.now();
        long long11 = testScheduler0.gettime();
        long long12 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(subscriptionFunc0_13);
        testScheduler0.time = 32L;
        rx.util.functions.Action0 action0_17 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler0.schedule(action0_17, 32L, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler18.schedule(subscriptionFunc0_30);
        testScheduler18.time = (byte) 1;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription31);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.getscheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        testScheduler60.triggerActions((long) (byte) 100);
        long long67 = testScheduler60.gettime();
        long long68 = testScheduler60.now();
        testScheduler60.time = (short) 100;
        rx.util.functions.Action0 action0_71 = null;
        rx.Subscription subscription72 = testScheduler60.schedule(action0_71);
        rx.util.functions.Action0 action0_73 = null;
        rx.Subscription subscription74 = testScheduler60.schedule(action0_73);
        long long75 = testScheduler60.now();
        long long76 = testScheduler60.now();
        testScheduler60.settime((long) (byte) 10);
        testScheduler60.time = 97L;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, (long) (byte) 10, schedulerFunc2_59, (rx.Scheduler) testScheduler60);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_82 = null;
        rx.Subscription subscription83 = testScheduler60.schedule(subscriptionFunc0_82);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, 0L, schedulerFunc2_85, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable88 = strComparableTimedAction87.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_89 = strComparableTimedAction87.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(subscription72);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(subscription83);
        org.junit.Assert.assertEquals("'" + strComparable88 + "' != '" + "" + "'", strComparable88, "");
        org.junit.Assert.assertNull(schedulerFunc2_89);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        long long18 = testScheduler17.gettime();
        testScheduler17.time = (short) 100;
        testScheduler17.settime(32L);
        long long23 = testScheduler17.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "hi!");
        long long7 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(schedulerFunc1_8);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.isCancelled;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.getscheduler();
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeTo((long) (byte) 10, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.now();
        long long81 = testScheduler5.now();
        testScheduler5.triggerActions();
        rx.util.functions.Action0 action0_83 = null;
        rx.Subscription subscription84 = testScheduler5.schedule(action0_83);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_85 = null;
        rx.Subscription subscription86 = testScheduler5.schedule(subscriptionFunc0_85);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_88 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction90 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 100, schedulerFunc2_88, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(subscription84);
        org.junit.Assert.assertNotNull(subscription86);
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        testScheduler0.time = 10L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (-1), schedulerFunc2_15, "hi!");
        testScheduler0.triggerActions((long) '#');
        testScheduler0.settime((long) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(subscriptionFunc0_22);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        int int15 = compareActionsByTime4.compare(strComparableTimedAction9, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction14.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction14.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction14.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction14.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, (long) (byte) 1, schedulerFunc2_3, strComparableTimedAction14);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction14.state;
        java.lang.Class<?> wildcardClass22 = strComparable21.getClass();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue41 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        strComparableTimedAction54.cancel();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction54.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_58 = null;
        rx.Subscription subscription59 = testScheduler57.schedule(schedulerFunc1_58);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (-1), schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_64 = null;
        rx.Subscription subscription65 = testScheduler57.schedule(action0_64);
        java.lang.Class<?> wildcardClass66 = subscription65.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler12, 10L, schedulerFunc2_43, (java.lang.reflect.GenericDeclaration) wildcardClass66);
        rx.util.functions.Action0 action0_68 = null;
        java.util.concurrent.TimeUnit timeUnit70 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription71 = testScheduler12.schedule(action0_68, 0L, timeUnit70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue41);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(subscription59);
        org.junit.Assert.assertNotNull(subscription65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler50.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler50.schedule(subscriptionFunc0_52);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler50.getqueue();
        rx.util.functions.Action0 action0_55 = null;
        rx.Subscription subscription56 = testScheduler50.schedule(action0_55);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_57 = null;
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription60 = testScheduler50.schedule(subscriptionFunc0_57, (long) 10, timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertNotNull(subscription56);
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime(10L);
        long long17 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler0.schedulePeriodically(schedulerFunc1_18, (long) 1, (long) (short) 0, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 100);
        long long27 = testScheduler0.now();
        testScheduler0.settime(100L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        long long15 = testScheduler0.now();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(action0_16);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction15.getisCancelled();
        long long18 = strComparableTimedAction15.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(subscriptionFunc0_21);
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler20.schedule(action0_23, (long) 'a', timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        long long19 = testScheduler16.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler16.schedule(schedulerFunc1_20);
        long long22 = testScheduler16.now();
        long long23 = testScheduler16.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) '4', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = strComparableTimedAction27.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_7, strComparable8);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        long long11 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler14.schedule(schedulerFunc1_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 100L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        long long25 = strComparableTimedAction24.time;
        long long26 = strComparableTimedAction24.time;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction24.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) 0, schedulerFunc2_13, (rx.Scheduler) testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableTimedAction32.state;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(testScheduler27);
        org.junit.Assert.assertEquals("'" + strComparable33 + "' != '" + "" + "'", strComparable33, "");
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = strComparableTimedAction30.action;
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction30.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNull(schedulerFunc2_50);
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNull(schedulerFunc2_52);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction21.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction21.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction21.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(atomicBoolean34);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime45.compare(strComparableTimedAction50, strComparableTimedAction55);
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction50.getscheduler();
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction50.getscheduler();
        strComparableTimedAction50.cancel();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction64.getscheduler();
        int int66 = compareActionsByTime20.compare(strComparableTimedAction50, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction50.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue68 = testScheduler67.getqueue();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (byte) 100, schedulerFunc2_19, testScheduler67);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (short) -1, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = strComparableTimedAction73.action;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue68);
        org.junit.Assert.assertNull(schedulerFunc2_74);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        long long41 = testScheduler12.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler14.queue;
        testScheduler14.triggerActions((long) (byte) 10);
        testScheduler14.settime((long) 100);
        long long20 = testScheduler14.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction22.getisCancelled();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler25.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction39.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = strComparableTimedAction39.getaction();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction39.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue44 = testScheduler43.getqueue();
        java.lang.Class<?> wildcardClass45 = wildcardTimedActionQueue44.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler25, (long) (byte) -1, schedulerFunc2_28, (java.lang.reflect.AnnotatedElement) wildcardClass45);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler5, (long) ' ', schedulerFunc2_11, (java.lang.reflect.GenericDeclaration) wildcardClass45);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) -1, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler5.schedule(action0_52);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        java.util.concurrent.TimeUnit timeUnit57 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription58 = testScheduler5.schedulePeriodically(schedulerFunc1_54, (long) (byte) 10, (long) (short) 0, timeUnit57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertNull(schedulerFunc2_42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(subscription53);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        testScheduler13.time = (short) 0;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler13.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        testScheduler21.time = (short) 100;
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler21.schedule(action0_32);
        rx.util.functions.Action0 action0_34 = null;
        rx.Subscription subscription35 = testScheduler21.schedule(action0_34);
        long long36 = testScheduler21.now();
        rx.util.functions.Action0 action0_37 = null;
        rx.Subscription subscription38 = testScheduler21.schedule(action0_37);
        testScheduler21.time = (short) 100;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) -1, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue45 = testScheduler21.queue;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler13, (long) 'a', schedulerFunc2_20, testScheduler21);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_47 = null;
        java.util.concurrent.TimeUnit timeUnit49 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription50 = testScheduler13.schedule(subscriptionFunc0_47, (long) 'a', timeUnit49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue45);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (-1), schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        long long52 = testScheduler49.now();
        long long53 = testScheduler49.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (short) 100, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction57.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction6.cancel();
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction6.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler8.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction17.getscheduler();
        long long25 = testScheduler24.gettime();
        testScheduler24.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, 10L, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction31.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = strComparableTimedAction31.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.getaction();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler8, (long) 10, schedulerFunc2_11, strComparableTimedAction31);
        org.junit.Assert.assertNotNull(testScheduler8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNull(schedulerFunc2_33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        testScheduler0.settime((long) (byte) 0);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = testScheduler18.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler18.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime36.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime23.thenComparing(wildcardTimedActionComparator38);
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler46 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) ' ', schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction50.getisCancelled();
        int int52 = compareActionsByTime23.compare(strComparableTimedAction44, strComparableTimedAction50);
        long long53 = strComparableTimedAction50.time;
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableTimedAction50.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction50.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler18, (long) (short) 10, schedulerFunc2_22, (java.io.Serializable) atomicBoolean55);
        long long57 = testScheduler18.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue58 = testScheduler18.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable54 + "' != '" + "hi!" + "'", strComparable54, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue58);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction20.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNull(schedulerFunc2_21);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime40.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime39.thenComparing(wildcardTimedActionComparator41);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        testScheduler64.triggerActions((long) (byte) 100);
        long long71 = testScheduler64.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler57, (long) '4', schedulerFunc2_63, (rx.Scheduler) testScheduler64);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, 0L, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction76.cancel();
        int int78 = compareActionsByTime27.compare(strComparableTimedAction54, strComparableTimedAction76);
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction76.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction76.isCancelled;
        rx.concurrency.TestScheduler testScheduler81 = strComparableTimedAction76.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, 0L, schedulerFunc2_26, (java.lang.Object) strComparableTimedAction76);
        java.lang.Comparable<java.lang.String> strComparable83 = strComparableTimedAction76.state;
        java.lang.Comparable<java.lang.String> strComparable84 = strComparableTimedAction76.state;
        java.lang.Comparable<java.lang.String> strComparable85 = strComparableTimedAction76.getstate();
        java.lang.Comparable<java.lang.String> strComparable86 = strComparableTimedAction76.state;
        strComparableTimedAction76.cancel();
        java.lang.Comparable<java.lang.String> strComparable88 = strComparableTimedAction76.getstate();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "" + "'", strComparable56, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNotNull(testScheduler81);
        org.junit.Assert.assertEquals("'" + strComparable83 + "' != '" + "" + "'", strComparable83, "");
        org.junit.Assert.assertEquals("'" + strComparable84 + "' != '" + "" + "'", strComparable84, "");
        org.junit.Assert.assertEquals("'" + strComparable85 + "' != '" + "" + "'", strComparable85, "");
        org.junit.Assert.assertEquals("'" + strComparable86 + "' != '" + "" + "'", strComparable86, "");
        org.junit.Assert.assertEquals("'" + strComparable88 + "' != '" + "" + "'", strComparable88, "");
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler0.schedule(subscriptionFunc0_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        long long37 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction49.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) 'a', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        long long55 = strComparableTimedAction54.time;
        java.lang.Class<?> wildcardClass56 = strComparableTimedAction54.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler12, (long) ' ', schedulerFunc2_44, (java.lang.reflect.Type) wildcardClass56);
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy(0L, timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 97L + "'", long55 == 97L);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) 'a', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) 'a', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction73.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_75 = null;
        rx.Subscription subscription76 = testScheduler74.schedule(schedulerFunc1_75);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = null;
        java.lang.Comparable<java.lang.String> strComparable79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (short) 1, schedulerFunc2_78, strComparable79);
        rx.concurrency.TestScheduler testScheduler81 = strComparableTimedAction80.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler47, 0L, schedulerFunc2_57, testScheduler81);
        testScheduler81.settime(0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertNotNull(subscription76);
        org.junit.Assert.assertNotNull(testScheduler81);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = strComparableTimedAction28.getaction();
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction28.getscheduler();
        long long38 = testScheduler37.time;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_36);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        testScheduler0.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        long long15 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        testScheduler0.settime((long) (-1));
        long long20 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_21, 32L, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        long long7 = strComparableTimedAction6.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction6.getisCancelled();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction6.scheduler;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction6.getscheduler();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction6.scheduler;
        long long12 = strComparableTimedAction6.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertNotNull(testScheduler9);
        org.junit.Assert.assertNotNull(testScheduler10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler19.schedule(action0_20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        testScheduler24.triggerActions((long) (byte) 100);
        long long31 = testScheduler24.gettime();
        long long32 = testScheduler24.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler testScheduler35 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) ' ', schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction39.getisCancelled();
        java.lang.Class<?> wildcardClass41 = strComparableTimedAction39.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler24, 10L, schedulerFunc2_34, (java.lang.reflect.AnnotatedElement) wildcardClass41);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, (long) (-1), schedulerFunc2_23, (java.lang.reflect.AnnotatedElement) wildcardClass41);
        long long44 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) '#', schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction48.scheduler;
        java.lang.Class<?> wildcardClass50 = testScheduler49.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, 32L, schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass50);
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler15.schedule(action0_52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(subscription53);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.triggerActions();
        long long19 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction30.scheduler;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        testScheduler53.triggerActions((long) (byte) 100);
        long long60 = testScheduler53.gettime();
        long long61 = testScheduler53.now();
        testScheduler53.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 100, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction66.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_68 = null;
        rx.Subscription subscription69 = testScheduler67.schedule(schedulerFunc1_68);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue70 = testScheduler67.getqueue();
        long long71 = testScheduler67.now();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, testScheduler67);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_73 = null;
        rx.Subscription subscription74 = testScheduler67.schedule(schedulerFunc1_73);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue75 = testScheduler67.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNotNull(subscription69);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue75);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '4', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(schedulerFunc1_21);
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler0.schedulePeriodically(action0_23, (long) (byte) 0, (long) (short) 0, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction37.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction37.getstate();
        long long51 = strComparableTimedAction37.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        long long17 = testScheduler16.time;
        testScheduler16.time = (-1);
        long long20 = testScheduler16.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        long long25 = testScheduler16.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        long long3 = testScheduler0.now();
        long long4 = testScheduler0.now();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler12.schedulePeriodically(subscriptionFunc0_23, (long) 1, (long) (short) 0, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_13, atomicBoolean21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction28.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction28.getaction();
        long long31 = strComparableTimedAction28.gettime();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction28.getstate();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction28.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "hi!" + "'", strComparable32, "hi!");
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_2, strComparable3);
        testScheduler0.time = (short) 10;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_10 = null;
        rx.Subscription subscription11 = testScheduler9.schedule(action0_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        long long22 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) ' ', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction29.getisCancelled();
        java.lang.Class<?> wildcardClass31 = strComparableTimedAction29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, 10L, schedulerFunc2_24, (java.lang.reflect.AnnotatedElement) wildcardClass31);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler9, (long) (-1), schedulerFunc2_13, (java.lang.reflect.AnnotatedElement) wildcardClass31);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, 100L, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        long long42 = testScheduler9.gettime();
        java.lang.Class<?> wildcardClass43 = testScheduler9.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (byte) -1, schedulerFunc2_8, (java.lang.reflect.AnnotatedElement) wildcardClass43);
        rx.util.functions.Action0 action0_45 = null;
        rx.Subscription subscription46 = testScheduler0.schedule(action0_45);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(subscription46);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(schedulerFunc1_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler20.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler20.schedule(subscriptionFunc0_24);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (-1), schedulerFunc2_19, testScheduler20);
        long long27 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler0.schedulePeriodically(schedulerFunc1_28, 10L, (long) (short) 100, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(subscriptionFunc0_23);
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (byte) 1, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        long long22 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(subscriptionFunc0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.triggerActions(35L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.getscheduler();
        long long17 = testScheduler16.time;
        testScheduler16.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler16.schedule(subscriptionFunc0_19);
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler16.schedulePeriodically(action0_21, (long) '4', (long) 10, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler21.schedule(subscriptionFunc0_26);
        long long28 = testScheduler21.now();
        testScheduler21.time = (byte) 100;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        long long9 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.scheduler;
        long long11 = strComparableTimedAction4.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertNull(testScheduler10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean12);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction23.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.action;
        strComparableTimedAction23.cancel();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        long long33 = strComparableTimedAction32.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction32.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction32.getaction();
        int int36 = compareActionsByTime0.compare(strComparableTimedAction23, strComparableTimedAction32);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction23.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction23.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean34);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler12.schedule(subscriptionFunc0_43);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue45 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_46 = null;
        rx.Subscription subscription47 = testScheduler12.schedule(subscriptionFunc0_46);
        long long48 = testScheduler12.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_49 = null;
        rx.Subscription subscription50 = testScheduler12.schedule(schedulerFunc1_49);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue45);
        org.junit.Assert.assertNotNull(subscription47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(subscription50);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        long long14 = strComparableTimedAction11.time;
        long long15 = strComparableTimedAction11.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction11.action;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction11.scheduler;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        testScheduler22.triggerActions(10L);
        rx.util.functions.Action0 action0_25 = null;
        rx.Subscription subscription26 = testScheduler22.schedule(action0_25);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime29.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime41);
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_55 = null;
        rx.Subscription subscription56 = testScheduler54.schedule(action0_55);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (short) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler62 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) (byte) 10, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        int int72 = compareActionsByTime61.compare(strComparableTimedAction66, strComparableTimedAction71);
        rx.concurrency.TestScheduler testScheduler73 = strComparableTimedAction66.getscheduler();
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction66.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = strComparableTimedAction66.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction66.getisCancelled();
        int int77 = compareActionsByTime29.compare(strComparableTimedAction60, strComparableTimedAction66);
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction66.getscheduler();
        java.lang.Class<?> wildcardClass79 = testScheduler78.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler22, (long) (byte) 100, schedulerFunc2_28, (java.lang.reflect.Type) wildcardClass79);
        long long81 = testScheduler22.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue82 = testScheduler22.getqueue();
        long long83 = testScheduler22.gettime();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(testScheduler73);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertNull(schedulerFunc2_75);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 100L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler13.triggerActions();
        testScheduler13.settime((long) 'a');
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler13.schedule(subscriptionFunc0_27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler13.schedule(subscriptionFunc0_29);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.action;
        long long26 = strComparableTimedAction23.time;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction23.scheduler;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(testScheduler27);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        long long30 = strComparableTimedAction28.time;
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction28.getscheduler();
        long long32 = testScheduler31.time;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        testScheduler0.triggerActions();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction6.scheduler;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction6.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction6.getaction();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction6.state;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction6.getscheduler();
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "" + "'", strComparable8, "");
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
        org.junit.Assert.assertNotNull(testScheduler11);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.scheduler;
        testScheduler14.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler14.schedulePeriodically(subscriptionFunc0_16, 100L, 0L, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.now();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.time = 10L;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        testScheduler0.time = ' ';
        testScheduler0.triggerActions((long) (short) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(subscriptionFunc0_17);
        testScheduler0.time = 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler0.schedulePeriodically(schedulerFunc1_25, 0L, (long) (short) 100, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        long long17 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction10.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(subscriptionFunc0_12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction17.cancel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction12.getscheduler();
        testScheduler35.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue37 = testScheduler35.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        int int51 = compareActionsByTime40.compare(strComparableTimedAction45, strComparableTimedAction50);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = compareActionsByTime40.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime52);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler71 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        int int76 = compareActionsByTime65.compare(strComparableTimedAction70, strComparableTimedAction75);
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction70.getscheduler();
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction70.getscheduler();
        strComparableTimedAction70.cancel();
        rx.concurrency.TestScheduler testScheduler80 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler80, (long) (byte) 10, schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler85 = strComparableTimedAction84.getscheduler();
        int int86 = compareActionsByTime40.compare(strComparableTimedAction70, strComparableTimedAction84);
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction84.getscheduler();
        rx.concurrency.TestScheduler testScheduler88 = strComparableTimedAction84.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue89 = testScheduler88.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue90 = testScheduler88.getqueue();
        testScheduler88.time = (-1);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_93 = null;
        rx.Subscription subscription94 = testScheduler88.schedule(subscriptionFunc0_93);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_96 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction98 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler88, (long) 'a', schedulerFunc2_96, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction99 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler35, (long) 1, schedulerFunc2_39, (java.lang.Object) "");
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue37);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(testScheduler77);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(testScheduler85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(testScheduler87);
        org.junit.Assert.assertNotNull(testScheduler88);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue89);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue90);
        org.junit.Assert.assertNotNull(subscription94);
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_7, strComparable8);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(subscriptionFunc0_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_15, (long) (byte) -1, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction18.getstate();
        long long20 = strComparableTimedAction18.gettime();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction18.state;
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "hi!" + "'", strComparable23, "hi!");
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        long long15 = testScheduler0.now();
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (byte) -1, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler21.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        long long27 = testScheduler21.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler21.schedule(schedulerFunc1_28);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction37.getaction();
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        testScheduler52.settime(1L);
        java.util.concurrent.TimeUnit timeUnit56 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler52.advanceTimeBy(52L, timeUnit56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNotNull(testScheduler52);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        long long22 = testScheduler21.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler21.schedule(schedulerFunc1_23);
        java.lang.Class<?> wildcardClass25 = testScheduler21.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 0, schedulerFunc2_20, (java.io.Serializable) wildcardClass25);
        long long27 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler0.schedulePeriodically(subscriptionFunc0_28, (long) (byte) 0, 100L, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator5 = wildcardTimedActionComparator4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime7 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime7.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime6.thenComparing(wildcardTimedActionComparator8);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = wildcardTimedActionComparator8.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator13 = compareActionsByTime12.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime11.thenComparing(wildcardTimedActionComparator13);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = wildcardTimedActionComparator8.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = wildcardTimedActionComparator8.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime17.thenComparing(wildcardTimedActionComparator32);
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableTimedAction38.getstate();
        rx.concurrency.TestScheduler testScheduler40 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) ' ', schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean45 = strComparableTimedAction44.getisCancelled();
        int int46 = compareActionsByTime17.compare(strComparableTimedAction38, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator16.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = wildcardTimedActionComparator5.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        testScheduler50.settime((long) (byte) 0);
        long long57 = testScheduler50.now();
        long long58 = testScheduler50.gettime();
        testScheduler50.time = 1;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_61 = null;
        rx.Subscription subscription62 = testScheduler50.schedule(schedulerFunc1_61);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, 0L, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "hi!");
        long long67 = strComparableTimedAction66.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean68 = strComparableTimedAction66.isCancelled;
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction66.getscheduler();
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction66.scheduler;
        rx.concurrency.TestScheduler testScheduler71 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction75.getisCancelled();
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction75.scheduler;
        int int78 = compareActionsByTime17.compare(strComparableTimedAction66, strComparableTimedAction75);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = compareActionsByTime17.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator5);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertEquals("'" + strComparable39 + "' != '" + "" + "'", strComparable39, "");
        org.junit.Assert.assertNotNull(atomicBoolean45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(subscription62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean68);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertNull(testScheduler77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        testScheduler12.settime((long) (byte) 1);
        testScheduler12.settime((long) (byte) 0);
        long long25 = testScheduler12.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.getscheduler();
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler23.schedule(action0_24);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler23.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 0, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        long long31 = strComparableTimedAction30.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        testScheduler0.time = (byte) 100;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler0.queue;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        long long10 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction14.scheduler;
        long long16 = strComparableTimedAction14.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        long long25 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_27, strComparable28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        long long34 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_35 = null;
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription38 = testScheduler0.schedule(schedulerFunc1_35, 52L, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        strComparableTimedAction37.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction37.isCancelled;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        long long53 = testScheduler52.gettime();
        testScheduler52.triggerActions();
        java.util.concurrent.TimeUnit timeUnit56 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler52.advanceTimeBy(1L, timeUnit56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction27.time;
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableTimedAction27.getstate();
        long long32 = strComparableTimedAction27.time;
        strComparableTimedAction27.cancel();
        long long34 = strComparableTimedAction27.gettime();
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction27.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction27.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable31 + "' != '" + "hi!" + "'", strComparable31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertNull(testScheduler35);
        org.junit.Assert.assertNotNull(atomicBoolean36);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        long long47 = strComparableTimedAction44.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction44.action;
        long long49 = strComparableTimedAction44.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction44.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean50);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.CharSequence charSequence19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler15, (long) ' ', schedulerFunc2_18, charSequence19);
        java.lang.Class<?> wildcardClass21 = testScheduler15.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        testScheduler0.triggerActions();
        testScheduler0.triggerActions((long) (byte) 1);
        long long15 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        long long18 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) '#', schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        rx.Subscription subscription26 = testScheduler13.schedule(subscriptionFunc0_25);
        long long27 = testScheduler13.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler13.schedule(schedulerFunc1_28, 52L, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.now();
        long long20 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler13.schedule(schedulerFunc1_21, (long) (short) 1, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime28.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime27.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler19, (long) 10, schedulerFunc2_26, compareActionsByTime27);
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        testScheduler33.triggerActions((long) (byte) 100);
        long long40 = testScheduler33.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        int int61 = compareActionsByTime50.compare(strComparableTimedAction55, strComparableTimedAction60);
        strComparableTimedAction60.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction60.getisCancelled();
        long long64 = strComparableTimedAction60.time;
        long long65 = strComparableTimedAction60.gettime();
        int int66 = compareActionsByTime27.compare(strComparableTimedAction48, strComparableTimedAction60);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) (byte) 10, schedulerFunc2_18, compareActionsByTime27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime68 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (byte) 10, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        int int79 = compareActionsByTime68.compare(strComparableTimedAction73, strComparableTimedAction78);
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction78.getstate();
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableTimedAction78.getstate();
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction78.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean83 = strComparableTimedAction78.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = strComparableTimedAction78.action;
        rx.concurrency.TestScheduler testScheduler85 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler85, (long) (byte) 10, schedulerFunc2_87, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable90 = strComparableTimedAction89.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean91 = strComparableTimedAction89.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_92 = strComparableTimedAction89.getaction();
        strComparableTimedAction89.cancel();
        int int94 = compareActionsByTime27.compare(strComparableTimedAction78, strComparableTimedAction89);
        java.lang.Comparable<java.lang.String> strComparable95 = strComparableTimedAction89.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "" + "'", strComparable80, "");
        org.junit.Assert.assertEquals("'" + strComparable81 + "' != '" + "" + "'", strComparable81, "");
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertNotNull(atomicBoolean83);
        org.junit.Assert.assertNull(schedulerFunc2_84);
        org.junit.Assert.assertEquals("'" + strComparable90 + "' != '" + "" + "'", strComparable90, "");
        org.junit.Assert.assertNotNull(atomicBoolean91);
        org.junit.Assert.assertNull(schedulerFunc2_92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + strComparable95 + "' != '" + "" + "'", strComparable95, "");
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator36.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(schedulerFunc1_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler20.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler20.schedule(subscriptionFunc0_24);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (-1), schedulerFunc2_19, testScheduler20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler20.settime((long) 10);
        long long33 = testScheduler20.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction41.getscheduler();
        long long49 = testScheduler48.gettime();
        long long50 = testScheduler48.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_51 = null;
        rx.Subscription subscription52 = testScheduler48.schedule(subscriptionFunc0_51);
        rx.util.functions.Action0 action0_53 = null;
        rx.Subscription subscription54 = testScheduler48.schedule(action0_53);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler20, (long) (-1), schedulerFunc2_35, testScheduler48);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription60 = testScheduler48.schedulePeriodically(subscriptionFunc0_56, (long) (short) 10, (long) (byte) 0, timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(subscription52);
        org.junit.Assert.assertNotNull(subscription54);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler13.schedulePeriodically(schedulerFunc1_16, (long) (byte) 100, (long) (byte) 1, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.getaction();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler32.queue;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) 0, schedulerFunc2_16, (rx.Scheduler) testScheduler32);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        int int49 = compareActionsByTime38.compare(strComparableTimedAction43, strComparableTimedAction48);
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction43.getscheduler();
        long long51 = testScheduler50.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue52 = testScheduler50.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, 0L, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue57 = testScheduler50.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        rx.Subscription subscription59 = testScheduler50.schedule(subscriptionFunc0_58);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) '#', schedulerFunc2_37, subscription59);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue52);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue57);
        org.junit.Assert.assertNotNull(subscription59);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(subscriptionFunc0_20);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(subscriptionFunc0_22);
        long long24 = testScheduler0.time;
        long long25 = testScheduler0.time;
        testScheduler0.time = (short) 0;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 1, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35L + "'", long25 == 35L);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean11 = strComparableTimedAction4.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction4.scheduler;
        long long14 = strComparableTimedAction4.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction4.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_8);
        org.junit.Assert.assertNull(testScheduler9);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(atomicBoolean11);
        org.junit.Assert.assertNull(schedulerFunc2_12);
        org.junit.Assert.assertNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.isCancelled;
        long long7 = strComparableTimedAction4.gettime();
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.state;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.scheduler;
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(testScheduler8);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertNotNull(testScheduler10);
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        long long20 = testScheduler0.time;
        long long21 = testScheduler0.time;
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(action0_22);
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction28.cancel();
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction28.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = strComparableTimedAction28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.time = (short) 1;
        long long14 = testScheduler0.now();
        rx.util.functions.Action0 action0_15 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler0.schedulePeriodically(action0_15, (long) 100, (long) (short) -1, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.getstate();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.getscheduler();
        rx.util.functions.Action0 action0_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(action0_50);
        long long52 = testScheduler49.now();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        testScheduler22.triggerActions(10L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler22.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler22, 32L, schedulerFunc2_27, "");
        long long30 = testScheduler22.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue31 = testScheduler22.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_32 = null;
        rx.Subscription subscription33 = testScheduler22.schedule(subscriptionFunc0_32);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue31);
        org.junit.Assert.assertNotNull(subscription33);
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 52L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime(0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator71.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = compareActionsByTime0.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.queue;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo((-1L), timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction21.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction21.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction21.getisCancelled();
        long long34 = strComparableTimedAction21.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = ' ';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.getqueue();
        long long13 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        testScheduler20.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 0, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        long long27 = strComparableTimedAction26.gettime();
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableTimedAction26.getstate();
        rx.concurrency.TestScheduler testScheduler29 = strComparableTimedAction26.getscheduler();
        java.lang.Class<?> wildcardClass30 = testScheduler29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler17, 35L, schedulerFunc2_19, (java.io.Serializable) wildcardClass30);
        long long32 = testScheduler17.now();
        rx.util.functions.Action0 action0_33 = null;
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription37 = testScheduler17.schedulePeriodically(action0_33, (long) (byte) -1, (long) (byte) 0, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable28 + "' != '" + "" + "'", strComparable28, "");
        org.junit.Assert.assertNotNull(testScheduler29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        long long9 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction4.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean11 = strComparableTimedAction4.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
        org.junit.Assert.assertNotNull(atomicBoolean11);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_16 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler15.schedulePeriodically(action0_16, (long) '#', (long) (short) 100, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction27.getscheduler();
        long long52 = testScheduler51.time;
        testScheduler51.time = 10;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_55 = null;
        rx.Subscription subscription56 = testScheduler51.schedule(schedulerFunc1_55);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = compareActionsByTime59.thenComparing(wildcardTimedActionComparator61);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime59.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime64.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime59.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = compareActionsByTime59.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler51, (-1L), schedulerFunc2_58, compareActionsByTime59);
        long long72 = testScheduler51.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "hi!");
        long long77 = strComparableTimedAction76.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler7.schedule(subscriptionFunc0_18);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler7.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.time;
        long long19 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(subscriptionFunc0_25);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        long long18 = testScheduler17.gettime();
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler17.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler17.queue;
        long long22 = testScheduler17.time;
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler17.schedulePeriodically(action0_23, 0L, (long) ' ', timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(schedulerFunc1_16);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler22.schedule(schedulerFunc1_23);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler22.schedule(schedulerFunc1_25);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) 0, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        long long31 = testScheduler22.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_35 = null;
        rx.Subscription subscription36 = testScheduler34.schedule(action0_35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        testScheduler39.triggerActions((long) (byte) 100);
        long long46 = testScheduler39.gettime();
        long long47 = testScheduler39.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.lang.Class<?> wildcardClass56 = strComparableTimedAction54.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler39, 10L, schedulerFunc2_49, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler34, (long) (-1), schedulerFunc2_38, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler22, (long) 100, schedulerFunc2_33, (java.lang.reflect.Type) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) (short) 100, schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue61 = testScheduler15.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_62 = null;
        rx.Subscription subscription63 = testScheduler15.schedule(schedulerFunc1_62);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue61);
        org.junit.Assert.assertNotNull(subscription63);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = testScheduler20.now();
        long long22 = testScheduler20.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler20.schedule(schedulerFunc1_23, (long) 1, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.getqueue();
        long long23 = testScheduler12.gettime();
        long long24 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 0L, schedulerFunc2_26, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_13, atomicBoolean21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        long long25 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_14 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler5.schedulePeriodically(action0_14, (long) (short) 10, (long) 1, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) 0, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction30.scheduler;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (short) 100, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = strComparableTimedAction54.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNull(schedulerFunc2_55);
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        long long14 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(schedulerFunc1_15);
        long long17 = testScheduler13.now();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction23.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.action;
        strComparableTimedAction23.cancel();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        long long33 = strComparableTimedAction32.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction32.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction32.getaction();
        int int36 = compareActionsByTime0.compare(strComparableTimedAction23, strComparableTimedAction32);
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler37.schedule(action0_38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        testScheduler42.triggerActions((long) (byte) 100);
        long long49 = testScheduler42.gettime();
        long long50 = testScheduler42.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler testScheduler53 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) ' ', schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.getisCancelled();
        java.lang.Class<?> wildcardClass59 = strComparableTimedAction57.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler42, 10L, schedulerFunc2_52, (java.lang.reflect.AnnotatedElement) wildcardClass59);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler37, (long) (-1), schedulerFunc2_41, (java.lang.reflect.AnnotatedElement) wildcardClass59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 32L, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 0, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction69.cancel();
        long long71 = strComparableTimedAction69.gettime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime72 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler73 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler73, (long) (byte) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler78 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler78, (long) (byte) 10, schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "");
        int int83 = compareActionsByTime72.compare(strComparableTimedAction77, strComparableTimedAction82);
        java.lang.Comparable<java.lang.String> strComparable84 = strComparableTimedAction82.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = strComparableTimedAction82.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = strComparableTimedAction82.action;
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableTimedAction82.getstate();
        int int88 = compareActionsByTime0.compare(strComparableTimedAction69, strComparableTimedAction82);
        java.lang.Class<?> wildcardClass89 = strComparableTimedAction82.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean34);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + strComparable84 + "' != '" + "" + "'", strComparable84, "");
        org.junit.Assert.assertNull(schedulerFunc2_85);
        org.junit.Assert.assertNull(schedulerFunc2_86);
        org.junit.Assert.assertEquals("'" + strComparable87 + "' != '" + "" + "'", strComparable87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean72 = strComparableTimedAction59.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean73 = strComparableTimedAction59.isCancelled;
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction59.getscheduler();
        long long75 = testScheduler74.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_76 = null;
        rx.Subscription subscription77 = testScheduler74.schedule(schedulerFunc1_76);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue78 = testScheduler74.queue;
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean72);
        org.junit.Assert.assertNotNull(atomicBoolean73);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(subscription77);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue78);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        testScheduler12.triggerActions();
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler12.schedulePeriodically(action0_21, (long) 0, 0L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableTimedAction59.getstate();
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableTimedAction59.getstate();
        long long74 = strComparableTimedAction59.time;
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + strComparable72 + "' != '" + "" + "'", strComparable72, "");
        org.junit.Assert.assertEquals("'" + strComparable73 + "' != '" + "" + "'", strComparable73, "");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler50.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler50.schedule(subscriptionFunc0_52);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler50.getqueue();
        long long55 = testScheduler50.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        testScheduler50.settime((long) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime5.reversed();
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableTimedAction37.getstate();
        rx.concurrency.TestScheduler testScheduler40 = strComparableTimedAction37.getscheduler();
        long long41 = strComparableTimedAction37.gettime();
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction37.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableTimedAction37.state;
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction37.getstate();
        long long45 = strComparableTimedAction37.time;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_47 = null;
        rx.Subscription subscription48 = testScheduler46.schedule(action0_47);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        testScheduler51.triggerActions((long) (byte) 100);
        long long58 = testScheduler51.gettime();
        long long59 = testScheduler51.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler testScheduler62 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) ' ', schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean67 = strComparableTimedAction66.getisCancelled();
        java.lang.Class<?> wildcardClass68 = strComparableTimedAction66.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler51, 10L, schedulerFunc2_61, (java.lang.reflect.AnnotatedElement) wildcardClass68);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler46, (long) (-1), schedulerFunc2_50, (java.lang.reflect.AnnotatedElement) wildcardClass68);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) ' ', schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = strComparableTimedAction74.getaction();
        rx.concurrency.TestScheduler testScheduler76 = strComparableTimedAction74.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = strComparableTimedAction74.getaction();
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction74.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction74.action;
        int int80 = compareActionsByTime5.compare(strComparableTimedAction37, strComparableTimedAction74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertEquals("'" + strComparable39 + "' != '" + "hi!" + "'", strComparable39, "hi!");
        org.junit.Assert.assertNull(testScheduler40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertNull(testScheduler42);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "hi!" + "'", strComparable43, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "hi!" + "'", strComparable44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNull(schedulerFunc2_75);
        org.junit.Assert.assertNotNull(testScheduler76);
        org.junit.Assert.assertNull(schedulerFunc2_77);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime40.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime39.thenComparing(wildcardTimedActionComparator41);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        testScheduler64.triggerActions((long) (byte) 100);
        long long71 = testScheduler64.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler57, (long) '4', schedulerFunc2_63, (rx.Scheduler) testScheduler64);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, 0L, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction76.cancel();
        int int78 = compareActionsByTime27.compare(strComparableTimedAction54, strComparableTimedAction76);
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction76.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction76.isCancelled;
        rx.concurrency.TestScheduler testScheduler81 = strComparableTimedAction76.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, 0L, schedulerFunc2_26, (java.lang.Object) strComparableTimedAction76);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler testScheduler85 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_86 = null;
        rx.Subscription subscription87 = testScheduler85.schedule(schedulerFunc1_86);
        testScheduler85.settime((-1L));
        testScheduler85.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_92 = null;
        java.lang.Comparable<java.lang.String> strComparable93 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction94 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler85, 0L, schedulerFunc2_92, strComparable93);
        java.lang.Comparable<java.lang.String> strComparable95 = strComparableTimedAction94.getstate();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction96 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, 0L, schedulerFunc2_84, (java.lang.Object) strComparable95);
        long long97 = testScheduler0.now();
        rx.util.functions.Action0 action0_98 = null;
        rx.Subscription subscription99 = testScheduler0.schedule(action0_98);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "" + "'", strComparable56, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNotNull(testScheduler81);
        org.junit.Assert.assertNotNull(subscription87);
        org.junit.Assert.assertNull(strComparable95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(subscription99);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        testScheduler29.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (short) 0, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        long long36 = strComparableTimedAction35.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.isCancelled;
        java.lang.Class<?> wildcardClass38 = strComparableTimedAction35.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler26, 97L, schedulerFunc2_28, (java.lang.reflect.AnnotatedElement) wildcardClass38);
        rx.util.functions.Action0 action0_40 = null;
        java.util.concurrent.TimeUnit timeUnit43 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription44 = testScheduler26.schedulePeriodically(action0_40, (long) 'a', 52L, timeUnit43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        testScheduler0.triggerActions();
        long long15 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.util.functions.Action0 action0_22 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler21.schedule(action0_22, (long) 'a', timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.time = 10L;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction44.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 1, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler30.settime((long) (short) 1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue37 = testScheduler30.queue;
        testScheduler30.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue39 = testScheduler30.getqueue();
        testScheduler30.settime((-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue37);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue39);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler5.queue;
        testScheduler5.time = 'a';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler5.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_11 = null;
        java.io.Serializable serializable12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler5, 10L, schedulerFunc2_11, serializable12);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler5.schedule(schedulerFunc1_14);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertNotNull(subscription15);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler7.schedule(schedulerFunc1_20);
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler7.schedule(action0_22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) '4', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = strComparableTimedAction27.action;
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction27.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction27.action;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertNull(schedulerFunc2_29);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNull(schedulerFunc2_31);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = ' ';
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime14 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        int int25 = compareActionsByTime14.compare(strComparableTimedAction19, strComparableTimedAction24);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime14.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime14.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) 100, schedulerFunc2_13, compareActionsByTime14);
        rx.util.functions.Action0 action0_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(action0_29);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(subscription30);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler30.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler30.getqueue();
        long long34 = testScheduler30.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler30.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_36 = null;
        rx.Subscription subscription37 = testScheduler30.schedule(schedulerFunc1_36);
        long long38 = testScheduler30.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) 100, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        testScheduler0.time = (byte) 100;
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction34.getaction();
        long long36 = strComparableTimedAction34.time;
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction34.getstate();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "hi!" + "'", strComparable37, "hi!");
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (-1), schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 100, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, 0L, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableTimedAction37.getstate();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertEquals("'" + strComparable38 + "' != '" + "hi!" + "'", strComparable38, "hi!");
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction48.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction63.getscheduler();
        long long71 = testScheduler70.gettime();
        testScheduler70.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 10L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction77.getaction();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction77.state;
        int int81 = compareActionsByTime0.compare(strComparableTimedAction48, strComparableTimedAction77);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = compareActionsByTime0.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime9.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime21);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction39.getscheduler();
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction39.getscheduler();
        strComparableTimedAction39.cancel();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction53.getscheduler();
        int int55 = compareActionsByTime9.compare(strComparableTimedAction39, strComparableTimedAction53);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = compareActionsByTime8.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime5.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime8);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = wildcardTimedActionComparator57.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = wildcardTimedActionComparator58.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        testScheduler17.settime((long) (short) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.getqueue();
        testScheduler17.time = 32L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) '4', schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler17.schedule(subscriptionFunc0_27);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        long long9 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNull(schedulerFunc2_5);
        org.junit.Assert.assertNull(testScheduler6);
        org.junit.Assert.assertEquals("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7, "hi!");
        org.junit.Assert.assertNull(testScheduler8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean10);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler0.schedule(subscriptionFunc0_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        long long37 = strComparableTimedAction36.gettime();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction36.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertNotNull(testScheduler38);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_7, strComparable8);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(subscriptionFunc0_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_13 = null;
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription16 = testScheduler0.schedule(action0_13, (long) (short) 10, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = wildcardTimedActionComparator51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = wildcardTimedActionComparator51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = wildcardTimedActionComparator53.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = wildcardTimedActionComparator53.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        long long17 = strComparableTimedAction10.time;
        long long18 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction10.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.isCancelled;
        strComparableTimedAction44.cancel();
        strComparableTimedAction44.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(schedulerFunc1_18);
        long long20 = testScheduler15.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler15.schedule(subscriptionFunc0_21);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        rx.Subscription subscription24 = testScheduler15.schedule(subscriptionFunc0_23);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction17.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_18);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.now();
        long long18 = testScheduler15.now();
        testScheduler15.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 10L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        long long25 = strComparableTimedAction24.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        testScheduler0.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        long long15 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction19.isCancelled;
        java.lang.Class<?> wildcardClass21 = strComparableTimedAction19.getClass();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        strComparableTimedAction19.cancel();
        long long25 = strComparableTimedAction19.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction19.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction19.getaction();
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler29 = strComparableTimedAction19.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertNull(schedulerFunc2_27);
        org.junit.Assert.assertNotNull(testScheduler29);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(schedulerFunc1_16);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler22.schedule(schedulerFunc1_23);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler22.schedule(schedulerFunc1_25);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) 0, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        long long31 = testScheduler22.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_35 = null;
        rx.Subscription subscription36 = testScheduler34.schedule(action0_35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        testScheduler39.triggerActions((long) (byte) 100);
        long long46 = testScheduler39.gettime();
        long long47 = testScheduler39.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.lang.Class<?> wildcardClass56 = strComparableTimedAction54.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler39, 10L, schedulerFunc2_49, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler34, (long) (-1), schedulerFunc2_38, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler22, (long) 100, schedulerFunc2_33, (java.lang.reflect.Type) wildcardClass56);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) (short) 100, schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass56);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue61 = testScheduler15.getqueue();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.triggerActions((long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue61);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        rx.Subscription subscription31 = testScheduler21.schedule(schedulerFunc1_30);
        testScheduler21.settime((long) '4');
        testScheduler21.settime(32L);
        testScheduler21.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue38 = testScheduler21.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime41.thenComparing(wildcardTimedActionComparator43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime41.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime41.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime46);
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        testScheduler56.triggerActions((long) (byte) 100);
        long long63 = testScheduler56.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, (long) '4', schedulerFunc2_55, (rx.Scheduler) testScheduler56);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 100, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler73 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler73, (long) (byte) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        testScheduler73.triggerActions((long) (byte) 100);
        long long80 = testScheduler73.gettime();
        long long81 = testScheduler73.now();
        long long82 = testScheduler73.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler73, 10L, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean87 = strComparableTimedAction86.getisCancelled();
        int int88 = compareActionsByTime46.compare(strComparableTimedAction72, strComparableTimedAction86);
        java.lang.Class<?> wildcardClass89 = strComparableTimedAction72.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction90 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler21, (long) '#', schedulerFunc2_40, (java.lang.reflect.AnnotatedElement) wildcardClass89);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction91 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler18, (long) '#', schedulerFunc2_20, (java.lang.reflect.GenericDeclaration) wildcardClass89);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) ' ', schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction36.getisCancelled();
        java.lang.Class<?> wildcardClass38 = strComparableTimedAction36.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler21, 10L, schedulerFunc2_31, (java.lang.reflect.AnnotatedElement) wildcardClass38);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler16, (long) (-1), schedulerFunc2_20, (java.lang.reflect.AnnotatedElement) wildcardClass38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = strComparableTimedAction44.getaction();
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction44.getaction();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler48.schedule(action0_49);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) 1, schedulerFunc2_15, (rx.Scheduler) testScheduler48);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNull(schedulerFunc2_45);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(subscription50);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 97L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler5.time = (byte) 1;
        long long16 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler5.schedule(schedulerFunc1_21);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction23.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNull(schedulerFunc2_24);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(action0_21);
        testScheduler12.triggerActions((long) (short) -1);
        testScheduler12.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 0, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_30 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler12.schedulePeriodically(action0_30, (long) 10, 35L, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        long long17 = testScheduler16.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, 100L, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = strComparableTimedAction35.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler16, (long) (byte) 10, schedulerFunc2_19, strComparableTimedAction35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 0L, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_36);
        org.junit.Assert.assertNotNull(atomicBoolean37);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.time = '4';
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler12.schedule(subscriptionFunc0_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(schedulerFunc1_16);
        testScheduler15.time = (byte) 1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler15.schedulePeriodically(subscriptionFunc0_20, 32L, (long) 'a', timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription17);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler0.queue;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) ' ', timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        testScheduler71.time = (short) 1;
        testScheduler71.time = 10;
        long long85 = testScheduler71.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler71, (long) ' ', schedulerFunc2_87, "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue90 = testScheduler71.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue90);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.action;
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_8 = null;
        rx.Subscription subscription9 = testScheduler7.schedule(subscriptionFunc0_8);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime25.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator26);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction39.getstate();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        testScheduler49.triggerActions((long) (byte) 100);
        long long56 = testScheduler49.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler42, (long) '4', schedulerFunc2_48, (rx.Scheduler) testScheduler49);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 0L, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction61.cancel();
        int int63 = compareActionsByTime12.compare(strComparableTimedAction39, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction61.scheduler;
        long long65 = strComparableTimedAction61.time;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler7, (long) '#', schedulerFunc2_11, strComparableTimedAction61);
        testScheduler7.time = 1L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_69 = null;
        java.util.concurrent.TimeUnit timeUnit71 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription72 = testScheduler7.schedule(subscriptionFunc0_69, (long) 100, timeUnit71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction13.getisCancelled();
        long long17 = strComparableTimedAction13.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction15.cancel();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        testScheduler17.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 0, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction22.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNull(schedulerFunc2_23);
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction15.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction15.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction15.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction15.getaction();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(subscriptionFunc0_21);
        long long23 = testScheduler20.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNull(schedulerFunc2_16);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = strComparableTimedAction15.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction15.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction15.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        testScheduler20.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 100, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        rx.util.functions.Action0 action0_35 = null;
        rx.Subscription subscription36 = testScheduler34.schedule(action0_35);
        rx.util.functions.Action0 action0_37 = null;
        rx.Subscription subscription38 = testScheduler34.schedule(action0_37);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler15, (long) (byte) -1, schedulerFunc2_19, subscription38);
        long long40 = testScheduler15.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_41 = null;
        rx.Subscription subscription42 = testScheduler15.schedule(subscriptionFunc0_41);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(subscription42);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = strComparableTimedAction19.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Action0 action0_25 = null;
        rx.Subscription subscription26 = testScheduler24.schedule(action0_25);
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler24.advanceTimeTo((long) 1, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNull(schedulerFunc2_22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) 100, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        rx.Subscription subscription24 = testScheduler17.schedule(subscriptionFunc0_23);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        int int26 = compareActionsByTime15.compare(strComparableTimedAction20, strComparableTimedAction25);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction25.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = strComparableTimedAction25.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction25.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction25.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        int int42 = compareActionsByTime31.compare(strComparableTimedAction36, strComparableTimedAction41);
        strComparableTimedAction41.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction41.getisCancelled();
        strComparableTimedAction41.cancel();
        long long46 = strComparableTimedAction41.gettime();
        int int47 = compareActionsByTime13.compare(strComparableTimedAction25, strComparableTimedAction41);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction25.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, 10L, schedulerFunc2_12, (java.io.Serializable) atomicBoolean48);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler0.queue;
        testScheduler0.settime(100L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        long long57 = strComparableTimedAction56.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNull(schedulerFunc2_28);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35L + "'", long57 == 35L);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        long long53 = testScheduler52.gettime();
        rx.util.functions.Action0 action0_54 = null;
        rx.Subscription subscription55 = testScheduler52.schedule(action0_54);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean70 = strComparableTimedAction68.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = strComparableTimedAction68.action;
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction68.getscheduler();
        rx.concurrency.TestScheduler testScheduler73 = strComparableTimedAction68.getscheduler();
        long long74 = testScheduler73.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler73, 10L, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler52, 0L, schedulerFunc2_57, testScheduler73);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_81, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue86 = testScheduler52.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean70);
        org.junit.Assert.assertNull(schedulerFunc2_71);
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertNotNull(testScheduler73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue86);
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy(1L, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction17.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) 'a', schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, 0L, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        long long27 = strComparableTimedAction26.time;
        long long28 = strComparableTimedAction26.time;
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        testScheduler29.triggerActions((long) (byte) 100);
        long long36 = testScheduler29.gettime();
        long long37 = testScheduler29.now();
        testScheduler29.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 100, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction42.scheduler;
        rx.util.functions.Action0 action0_44 = null;
        rx.Subscription subscription45 = testScheduler43.schedule(action0_44);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime48.thenComparing(wildcardTimedActionComparator50);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime48.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime53.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = compareActionsByTime48.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime53);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime56 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler62 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) (byte) 10, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        int int67 = compareActionsByTime56.compare(strComparableTimedAction61, strComparableTimedAction66);
        strComparableTimedAction66.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction66.getisCancelled();
        strComparableTimedAction66.cancel();
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction66.state;
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        int int77 = compareActionsByTime53.compare(strComparableTimedAction66, strComparableTimedAction76);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler43, (long) ' ', schedulerFunc2_47, strComparableTimedAction66);
        long long79 = strComparableTimedAction66.time;
        int int80 = compareActionsByTime0.compare(strComparableTimedAction26, strComparableTimedAction66);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "" + "'", strComparable71, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        long long29 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction36.getstate();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction36.getscheduler();
        long long39 = strComparableTimedAction36.time;
        java.lang.Class<?> wildcardClass40 = strComparableTimedAction36.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler12, 32L, schedulerFunc2_31, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        long long42 = testScheduler12.gettime();
        testScheduler12.triggerActions((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 0, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue49 = testScheduler12.queue;
        testScheduler12.settime(32L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue49);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = strComparableTimedAction4.action;
        org.junit.Assert.assertNull(schedulerFunc2_5);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.action;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction6.scheduler;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction6.state;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction6.state;
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction6.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction6.getaction();
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "" + "'", strComparable8, "");
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
        org.junit.Assert.assertNull(schedulerFunc2_11);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) 'a', schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler18.advanceTimeTo((long) '4', timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler23.getqueue();
        testScheduler23.triggerActions((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler23.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler23.schedule(subscriptionFunc0_29);
        long long31 = testScheduler23.gettime();
        long long32 = testScheduler23.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        testScheduler13.triggerActions(32L);
        testScheduler13.time = 32L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction27.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction27.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, 97L, schedulerFunc2_16, strComparableTimedAction27);
        long long33 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_34 = null;
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription38 = testScheduler0.schedulePeriodically(subscriptionFunc0_34, (long) (byte) 1, (long) (short) -1, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        long long48 = strComparableTimedAction30.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_49);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler16.schedulePeriodically(subscriptionFunc0_17, (long) 'a', 0L, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime5.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction38.getscheduler();
        long long46 = strComparableTimedAction38.gettime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(schedulerFunc1_48);
        long long50 = testScheduler47.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) '#', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction54.state;
        int int56 = compareActionsByTime5.compare(strComparableTimedAction38, strComparableTimedAction54);
        long long57 = strComparableTimedAction54.gettime();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "hi!" + "'", strComparable55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35L + "'", long57 == 35L);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler14.now();
        long long22 = testScheduler14.now();
        testScheduler14.time = 1L;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler12.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler12.getqueue();
        testScheduler12.settime((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction27.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction27.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction27.isCancelled;
        long long64 = strComparableTimedAction27.time;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 32L + "'", long64 == 32L);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        testScheduler0.time = 100L;
        rx.util.functions.Action0 action0_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(action0_7);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions((long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription8);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction10.action;
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction16.getaction();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler18.schedule(schedulerFunc1_19, (long) (short) 0, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.getisCancelled();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.scheduler;
        testScheduler38.time = 100;
        testScheduler38.triggerActions();
        testScheduler38.triggerActions(1L);
        java.lang.Class<?> wildcardClass44 = testScheduler38.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler5, (long) (byte) 10, schedulerFunc2_24, (java.lang.reflect.GenericDeclaration) wildcardClass44);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue46 = testScheduler5.queue;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue46);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        long long15 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean9 = strComparableTimedAction4.getisCancelled();
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.getaction();
        long long12 = strComparableTimedAction4.gettime();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction4.state;
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction4.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction4.getisCancelled();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean9);
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_8);
        org.junit.Assert.assertNull(testScheduler9);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNull(testScheduler11);
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        long long17 = strComparableTimedAction10.time;
        long long18 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction10.getscheduler();
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.triggerActions((-1L));
        testScheduler12.time = 97L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction12.action;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction12.getscheduler();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertNotNull(testScheduler36);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        int int61 = compareActionsByTime50.compare(strComparableTimedAction55, strComparableTimedAction60);
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction55.getscheduler();
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction55.getscheduler();
        strComparableTimedAction55.cancel();
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction69.getscheduler();
        int int71 = compareActionsByTime25.compare(strComparableTimedAction55, strComparableTimedAction69);
        long long72 = strComparableTimedAction69.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = strComparableTimedAction69.action;
        long long74 = strComparableTimedAction69.time;
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableTimedAction69.state;
        strComparableTimedAction69.cancel();
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction69.state;
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction69.scheduler;
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction69.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction69.getisCancelled();
        rx.concurrency.TestScheduler testScheduler81 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler81, (long) ' ', schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean86 = strComparableTimedAction85.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_87 = strComparableTimedAction85.getaction();
        long long88 = strComparableTimedAction85.time;
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableTimedAction85.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean90 = strComparableTimedAction85.getisCancelled();
        strComparableTimedAction85.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_92 = strComparableTimedAction85.getaction();
        long long93 = strComparableTimedAction85.gettime();
        java.lang.Comparable<java.lang.String> strComparable94 = strComparableTimedAction85.state;
        int int95 = compareActionsByTime12.compare(strComparableTimedAction69, strComparableTimedAction85);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean96 = strComparableTimedAction85.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10L + "'", long72 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable75 + "' != '" + "" + "'", strComparable75, "");
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNotNull(atomicBoolean86);
        org.junit.Assert.assertNull(schedulerFunc2_87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 32L + "'", long88 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable89 + "' != '" + "hi!" + "'", strComparable89, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean90);
        org.junit.Assert.assertNull(schedulerFunc2_92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 32L + "'", long93 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable94 + "' != '" + "hi!" + "'", strComparable94, "hi!");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(atomicBoolean96);
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        testScheduler0.triggerActions();
        long long7 = testScheduler0.time;
        testScheduler0.settime((long) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.getscheduler();
        testScheduler19.settime((long) 10);
        long long22 = testScheduler19.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime44.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime43.thenComparing(wildcardTimedActionComparator45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator49.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = wildcardTimedActionComparator49.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime52);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = wildcardTimedActionComparator45.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime52);
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        testScheduler66.triggerActions((long) (byte) 100);
        long long73 = testScheduler66.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (short) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, 100L, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction81.cancel();
        rx.concurrency.TestScheduler testScheduler83 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler83, (long) ' ', schedulerFunc2_85, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean88 = strComparableTimedAction87.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_89 = strComparableTimedAction87.getaction();
        long long90 = strComparableTimedAction87.time;
        java.lang.Comparable<java.lang.String> strComparable91 = strComparableTimedAction87.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean92 = strComparableTimedAction87.getisCancelled();
        int int93 = compareActionsByTime52.compare(strComparableTimedAction81, strComparableTimedAction87);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator94 = wildcardTimedActionComparator42.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime52);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator95 = wildcardTimedActionComparator42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator96 = wildcardTimedActionComparator95.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean88);
        org.junit.Assert.assertNull(schedulerFunc2_89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 32L + "'", long90 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable91 + "' != '" + "hi!" + "'", strComparable91, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator94);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator95);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator96);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.action;
        long long15 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        long long17 = testScheduler16.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction44.scheduler;
        testScheduler50.settime((long) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_53 = null;
        java.util.concurrent.TimeUnit timeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription56 = testScheduler50.schedule(schedulerFunc1_53, 97L, timeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler17.schedule(subscriptionFunc0_20);
        testScheduler17.time = (byte) 0;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler17.schedulePeriodically(schedulerFunc1_24, 35L, 52L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.queue;
        testScheduler17.settime((long) (byte) 0);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler17.schedulePeriodically(subscriptionFunc0_21, (-1L), (long) (-1), timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.queue;
        testScheduler17.settime((long) (byte) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler17.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        testScheduler0.time = (short) 1;
        rx.util.functions.Action0 action0_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(action0_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 100L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler13.triggerActions();
        testScheduler13.settime((long) 'a');
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo((long) (short) 0, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue3 = testScheduler0.getqueue();
        long long4 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler7.schedule(schedulerFunc1_8);
        testScheduler7.settime((-1L));
        testScheduler7.triggerActions();
        long long13 = testScheduler7.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) 'a', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = strComparableTimedAction17.time;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction17.state;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction17.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction17.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler0.getqueue();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler testScheduler4 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) (byte) 10, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        testScheduler4.triggerActions((long) (byte) 100);
        long long11 = testScheduler4.gettime();
        long long12 = testScheduler4.now();
        long long13 = testScheduler4.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, 10L, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler4.now();
        long long19 = testScheduler4.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler4.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) 0, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        long long29 = strComparableTimedAction28.time;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 0, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction34.action;
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction34.state;
        long long37 = strComparableTimedAction34.time;
        int int38 = compareActionsByTime0.compare(strComparableTimedAction28, strComparableTimedAction34);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        testScheduler39.triggerActions((long) (byte) 100);
        long long46 = testScheduler39.gettime();
        long long47 = testScheduler39.now();
        testScheduler39.time = (short) 100;
        rx.util.functions.Action0 action0_50 = null;
        rx.Subscription subscription51 = testScheduler39.schedule(action0_50);
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler39.schedule(action0_52);
        long long54 = testScheduler39.now();
        long long55 = testScheduler39.now();
        testScheduler39.settime((long) (byte) 10);
        testScheduler39.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (short) 1, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction63.getscheduler();
        rx.concurrency.TestScheduler testScheduler65 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) ' ', schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean70 = strComparableTimedAction69.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = strComparableTimedAction69.getaction();
        long long72 = strComparableTimedAction69.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean73 = strComparableTimedAction69.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = strComparableTimedAction69.action;
        strComparableTimedAction69.cancel();
        strComparableTimedAction69.cancel();
        long long77 = strComparableTimedAction69.gettime();
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction69.scheduler;
        int int79 = compareActionsByTime0.compare(strComparableTimedAction63, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = compareActionsByTime0.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "hi!" + "'", strComparable36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(atomicBoolean70);
        org.junit.Assert.assertNull(schedulerFunc2_71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 32L + "'", long72 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean73);
        org.junit.Assert.assertNull(schedulerFunc2_74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 32L + "'", long77 == 32L);
        org.junit.Assert.assertNull(testScheduler78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(action0_16);
        testScheduler0.time = (short) 100;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.queue;
        rx.util.functions.Action0 action0_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler0.schedulePeriodically(action0_25, (long) (-1), 10L, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        long long17 = testScheduler13.time;
        testScheduler13.time = 32L;
        testScheduler13.settime((long) 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler12.schedule(subscriptionFunc0_43);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_45 = null;
        rx.Subscription subscription46 = testScheduler12.schedule(schedulerFunc1_45);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler12.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertNotNull(subscription46);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.getstate();
        long long65 = strComparableTimedAction59.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction59.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean66);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime45.compare(strComparableTimedAction50, strComparableTimedAction55);
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction50.getscheduler();
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction50.getscheduler();
        strComparableTimedAction50.cancel();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction64.getscheduler();
        int int66 = compareActionsByTime20.compare(strComparableTimedAction50, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction50.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue68 = testScheduler67.getqueue();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (byte) 100, schedulerFunc2_19, testScheduler67);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (short) -1, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        long long74 = strComparableTimedAction73.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue68);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_20, strComparable21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime4.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        strComparableTimedAction22.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean25 = strComparableTimedAction22.getisCancelled();
        strComparableTimedAction22.cancel();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction22.state;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime9.compare(strComparableTimedAction22, strComparableTimedAction32);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime9.reversed();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_42 = null;
        rx.Subscription subscription43 = testScheduler37.schedule(schedulerFunc1_42);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 100L, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        long long48 = strComparableTimedAction47.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction47.getisCancelled();
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction54.getscheduler();
        long long58 = strComparableTimedAction54.gettime();
        rx.concurrency.TestScheduler testScheduler59 = strComparableTimedAction54.getscheduler();
        int int60 = compareActionsByTime9.compare(strComparableTimedAction47, strComparableTimedAction54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean25);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(subscription43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "hi!" + "'", strComparable56, "hi!");
        org.junit.Assert.assertNull(testScheduler57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertNull(testScheduler59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction30.scheduler;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) ' ', schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction53.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction53.getisCancelled();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction53.getscheduler();
        long long57 = strComparableTimedAction53.time;
        strComparableTimedAction53.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler17.schedulePeriodically(schedulerFunc1_18, (long) 100, 0L, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        testScheduler12.triggerActions(97L);
        java.lang.Class<?> wildcardClass39 = testScheduler12.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler23.schedule(schedulerFunc1_24);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, 35L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        long long30 = strComparableTimedAction29.gettime();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        long long14 = testScheduler13.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler13.schedule(subscriptionFunc0_15, 0L, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler7.schedule(schedulerFunc1_20);
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler7.schedule(action0_22);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler7.schedule(subscriptionFunc0_24);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) -1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction29.getscheduler();
        long long31 = testScheduler30.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_6 = null;
        rx.Subscription subscription7 = testScheduler5.schedule(schedulerFunc1_6);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler5.schedule(schedulerFunc1_8);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.triggerActions((long) (byte) 100);
        long long19 = testScheduler12.gettime();
        long long20 = testScheduler12.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(subscriptionFunc0_21);
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(action0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 100L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler12.schedule(subscriptionFunc0_30);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler5, 10L, schedulerFunc2_11, testScheduler12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = strComparableTimedAction36.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction36.isCancelled;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNull(schedulerFunc2_37);
        org.junit.Assert.assertNotNull(atomicBoolean38);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction15.cancel();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler17.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        rx.util.functions.Action0 action0_43 = null;
        java.util.concurrent.TimeUnit timeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription46 = testScheduler41.schedule(action0_43, (long) (short) 1, timeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (byte) 10, schedulerFunc2_13, "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        long long20 = testScheduler0.now();
        long long21 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        int int16 = compareActionsByTime5.compare(strComparableTimedAction10, strComparableTimedAction15);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler18.triggerActions((long) (byte) 100);
        long long25 = testScheduler18.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction33.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction46.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction46.getaction();
        long long50 = strComparableTimedAction46.time;
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction46.scheduler;
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableTimedAction46.state;
        long long53 = strComparableTimedAction46.time;
        long long54 = strComparableTimedAction46.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction46.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction46.getisCancelled();
        int int57 = compareActionsByTime5.compare(strComparableTimedAction33, strComparableTimedAction46);
        java.lang.Comparable<java.lang.String> strComparable58 = strComparableTimedAction46.getstate();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertEquals("'" + strComparable52 + "' != '" + "" + "'", strComparable52, "");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + strComparable58 + "' != '" + "" + "'", strComparable58, "");
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.triggerActions((long) (byte) -1);
        testScheduler14.settime((long) (short) 1);
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler14.advanceTimeTo((long) 1, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.time = (byte) 0;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(subscriptionFunc0_17);
        long long19 = testScheduler14.now();
        long long20 = testScheduler14.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler14, (long) ' ', schedulerFunc2_22, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 35L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) '4');
        testScheduler7.time = 1L;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler7.schedule(subscriptionFunc0_18);
        long long20 = testScheduler7.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler7.getqueue();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue81 = testScheduler5.queue;
        long long82 = testScheduler5.time;
        testScheduler5.triggerActions(32L);
        long long85 = testScheduler5.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_86 = null;
        rx.Subscription subscription87 = testScheduler5.schedule(subscriptionFunc0_86);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_88 = null;
        rx.Subscription subscription89 = testScheduler5.schedule(subscriptionFunc0_88);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(subscription87);
        org.junit.Assert.assertNotNull(subscription89);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(schedulerFunc1_19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(action0_21);
        long long23 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        long long8 = testScheduler5.now();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        long long16 = testScheduler13.now();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        testScheduler13.time = 32L;
        testScheduler13.settime((long) (byte) 1);
        testScheduler13.time = 100L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.getscheduler();
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction4.state;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(testScheduler6);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "hi!" + "'", strComparable10, "hi!");
        org.junit.Assert.assertNull(testScheduler11);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime25.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime13.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        long long39 = testScheduler34.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime43.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime42.thenComparing(wildcardTimedActionComparator44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime42.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler34, (long) 10, schedulerFunc2_41, compareActionsByTime42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator33.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator33);
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 0, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = strComparableTimedAction54.getaction();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction54.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction62.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (short) 100, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction67.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction67.getisCancelled();
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction67.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction67.state;
        int int72 = compareActionsByTime0.compare(strComparableTimedAction54, strComparableTimedAction67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNull(schedulerFunc2_55);
        org.junit.Assert.assertNull(testScheduler56);
        org.junit.Assert.assertEquals("'" + strComparable57 + "' != '" + "hi!" + "'", strComparable57, "hi!");
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "hi!" + "'", strComparable71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.time;
        testScheduler0.settime((long) '4');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        testScheduler15.triggerActions();
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeBy(52L, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction15.action;
        long long19 = strComparableTimedAction15.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction15.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(subscriptionFunc0_15);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler14, (long) (short) 1, schedulerFunc2_20, "hi!");
        testScheduler14.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler14.schedule(schedulerFunc1_25);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 0, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler14.schedule(subscriptionFunc0_31, (long) (byte) 1, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        long long16 = testScheduler12.time;
        long long17 = testScheduler12.time;
        rx.util.functions.Action0 action0_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler12.schedulePeriodically(action0_18, (long) 100, (long) (-1), timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Action0 action0_2 = null;
        rx.Subscription subscription3 = testScheduler0.schedule(action0_2);
        long long4 = testScheduler0.time;
        rx.util.functions.Action0 action0_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(action0_5);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(subscription3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        long long13 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue74 = testScheduler0.getqueue();
        long long75 = testScheduler0.now();
        testScheduler0.time = (short) 0;
        long long78 = testScheduler0.gettime();
        long long79 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        long long48 = testScheduler47.time;
        testScheduler47.settime((long) (-1));
        testScheduler47.settime((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator46.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator73.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator21.thenComparing(wildcardTimedActionComparator74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = wildcardTimedActionComparator75.thenComparing(wildcardTimedActionComparator76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction11.cancel();
        strComparableTimedAction11.cancel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(subscriptionFunc0_29);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_41 = null;
        rx.Subscription subscription42 = testScheduler0.schedule(schedulerFunc1_41);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertNotNull(subscription42);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler12.queue;
        long long24 = testScheduler12.time;
        rx.util.functions.Action0 action0_25 = null;
        rx.Subscription subscription26 = testScheduler12.schedule(action0_25);
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler12.schedule(action0_27, (long) '4', timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        long long16 = testScheduler13.now();
        rx.util.functions.Action0 action0_17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler13.schedulePeriodically(action0_17, (long) '#', 0L, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        testScheduler11.triggerActions((long) (byte) 100);
        long long18 = testScheduler11.gettime();
        long long19 = testScheduler11.now();
        long long20 = testScheduler11.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, 10L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction24.scheduler;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, 97L, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction30.scheduler;
        long long32 = strComparableTimedAction30.gettime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableTimedAction37.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction37.isCancelled;
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction37.scheduler;
        int int42 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        strComparableTimedAction54.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = strComparableTimedAction54.getaction();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = compareActionsByTime0.compare(strComparableTimedAction43, strComparableTimedAction54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 97L + "'", long32 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable38 + "' != '" + "" + "'", strComparable38, "");
        org.junit.Assert.assertNull(schedulerFunc2_39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_57);
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (-1), schedulerFunc2_18, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.settime(100L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler12.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(subscriptionFunc0_24);
        long long26 = testScheduler12.now();
        rx.util.functions.Action0 action0_27 = null;
        rx.Subscription subscription28 = testScheduler12.schedule(action0_27);
        rx.util.functions.Action0 action0_29 = null;
        rx.Subscription subscription30 = testScheduler12.schedule(action0_29);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 1L, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction34.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertNull(schedulerFunc2_35);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction27.getisCancelled();
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction27.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction27.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction27.getisCancelled();
        long long65 = strComparableTimedAction27.gettime();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(testScheduler62);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction44.scheduler;
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler48.schedule(action0_49);
        testScheduler48.settime(97L);
        testScheduler48.settime((long) '4');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue55 = testScheduler48.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler48.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (-1), schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_62 = null;
        rx.Subscription subscription63 = testScheduler48.schedule(subscriptionFunc0_62);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(subscription50);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertNotNull(subscription63);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        testScheduler17.time = (short) -1;
        rx.util.functions.Action0 action0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler17.schedulePeriodically(action0_22, (long) (short) 10, 1L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler14.schedule(schedulerFunc1_27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler14.schedule(subscriptionFunc0_29);
        long long31 = testScheduler14.now();
        testScheduler14.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue34 = testScheduler14.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler14.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue34);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 1L, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.isCancelled;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction9.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction9.getaction();
        long long13 = strComparableTimedAction9.time;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNull(schedulerFunc2_12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        testScheduler12.triggerActions(97L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 1, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction42.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_44 = null;
        rx.Subscription subscription45 = testScheduler43.schedule(subscriptionFunc0_44);
        testScheduler43.settime(100L);
        rx.util.functions.Action0 action0_48 = null;
        java.util.concurrent.TimeUnit timeUnit50 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription51 = testScheduler43.schedule(action0_48, (long) 1, timeUnit50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertNotNull(subscription45);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        long long3 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_8 = null;
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription11 = testScheduler0.schedule(action0_8, 0L, timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean9 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = strComparableTimedAction4.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction4.getaction();
        strComparableTimedAction4.cancel();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNull(testScheduler8);
        org.junit.Assert.assertNotNull(atomicBoolean9);
        org.junit.Assert.assertNull(testScheduler10);
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertNull(schedulerFunc2_12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        long long10 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_11);
        long long13 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        long long20 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        long long22 = strComparableTimedAction19.time;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        long long24 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction19.getscheduler();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(testScheduler25);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        long long26 = testScheduler21.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime29.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler21, (long) 10, schedulerFunc2_28, compareActionsByTime29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction46.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction46.action;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction46.getscheduler();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction46.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction46.isCancelled;
        rx.concurrency.TestScheduler testScheduler53 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) ' ', schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction57.getaction();
        long long60 = strComparableTimedAction57.time;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction57.state;
        int int62 = compareActionsByTime29.compare(strComparableTimedAction46, strComparableTimedAction57);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction46.scheduler;
        testScheduler63.triggerActions((long) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(testScheduler63);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction11.state;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction11.isCancelled;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler19.schedulePeriodically(subscriptionFunc0_20, (long) (short) 0, (long) (short) -1, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        long long47 = strComparableTimedAction44.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction44.action;
        long long49 = strComparableTimedAction44.time;
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        strComparableTimedAction44.cancel();
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableTimedAction44.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction44.isCancelled;
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction44.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertEquals("'" + strComparable52 + "' != '" + "" + "'", strComparable52, "");
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(testScheduler54);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction30.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.action;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction30.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction30.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(atomicBoolean51);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler17.schedule(subscriptionFunc0_20, (long) (byte) 100, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        testScheduler21.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler21.schedule(action0_27, 100L, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        long long5 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime8.thenComparing(wildcardTimedActionComparator10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime8.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) 10, schedulerFunc2_7, compareActionsByTime8);
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (short) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (short) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction29.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        int int42 = compareActionsByTime31.compare(strComparableTimedAction36, strComparableTimedAction41);
        strComparableTimedAction41.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction41.getisCancelled();
        long long45 = strComparableTimedAction41.time;
        long long46 = strComparableTimedAction41.gettime();
        int int47 = compareActionsByTime8.compare(strComparableTimedAction29, strComparableTimedAction41);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        int int59 = compareActionsByTime48.compare(strComparableTimedAction53, strComparableTimedAction58);
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction58.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction58.action;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction58.getscheduler();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler testScheduler70 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, (long) (byte) 10, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        testScheduler70.triggerActions((long) (byte) 100);
        long long77 = testScheduler70.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler63, (long) '4', schedulerFunc2_69, (rx.Scheduler) testScheduler70);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 0L, schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler83 = strComparableTimedAction82.scheduler;
        rx.concurrency.TestScheduler testScheduler84 = strComparableTimedAction82.getscheduler();
        int int85 = compareActionsByTime8.compare(strComparableTimedAction58, strComparableTimedAction82);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = strComparableTimedAction82.getaction();
        long long87 = strComparableTimedAction82.gettime();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "" + "'", strComparable60, "");
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(testScheduler83);
        org.junit.Assert.assertNotNull(testScheduler84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(schedulerFunc2_86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        int int21 = compareActionsByTime10.compare(strComparableTimedAction15, strComparableTimedAction20);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction20.getisCancelled();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction20.scheduler;
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction20.state;
        long long25 = strComparableTimedAction20.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction20.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction20.isCancelled;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction38.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = strComparableTimedAction38.getaction();
        long long42 = strComparableTimedAction38.time;
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction38.scheduler;
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction38.state;
        long long45 = strComparableTimedAction38.time;
        long long46 = strComparableTimedAction38.time;
        int int47 = compareActionsByTime0.compare(strComparableTimedAction20, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        int int59 = compareActionsByTime48.compare(strComparableTimedAction53, strComparableTimedAction58);
        strComparableTimedAction58.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction58.getisCancelled();
        strComparableTimedAction58.cancel();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction58.state;
        long long64 = strComparableTimedAction58.time;
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableTimedAction58.state;
        long long66 = strComparableTimedAction58.gettime();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        testScheduler67.triggerActions((long) (byte) 100);
        long long74 = testScheduler67.gettime();
        long long75 = testScheduler67.now();
        testScheduler67.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 100, schedulerFunc2_78, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler67.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) -1, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction86.cancel();
        int int88 = compareActionsByTime0.compare(strComparableTimedAction58, strComparableTimedAction86);
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableTimedAction58.state;
        rx.concurrency.TestScheduler testScheduler90 = strComparableTimedAction58.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_91 = null;
        rx.Subscription subscription92 = testScheduler90.schedule(schedulerFunc1_91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNull(schedulerFunc2_41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "" + "'", strComparable63, "");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable65 + "' != '" + "" + "'", strComparable65, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + strComparable89 + "' != '" + "" + "'", strComparable89, "");
        org.junit.Assert.assertNotNull(testScheduler90);
        org.junit.Assert.assertNotNull(subscription92);
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler23.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, 10L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler23.schedule(subscriptionFunc0_30);
        testScheduler23.settime((long) '#');
        testScheduler23.settime((long) (short) 0);
        long long36 = testScheduler23.gettime();
        testScheduler23.settime((long) ' ');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        strComparableTimedAction30.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction30.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        long long30 = testScheduler18.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        rx.Subscription subscription32 = testScheduler18.schedule(subscriptionFunc0_31);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction45.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction45.action;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction45.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction45.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction45.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction45.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler18, 32L, schedulerFunc2_34, (java.io.Serializable) atomicBoolean52);
        long long54 = testScheduler18.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(subscription32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime14 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        int int25 = compareActionsByTime14.compare(strComparableTimedAction19, strComparableTimedAction24);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime14.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime26);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_40 = null;
        rx.Subscription subscription41 = testScheduler39.schedule(action0_40);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (short) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction51.getscheduler();
        rx.concurrency.TestScheduler testScheduler59 = strComparableTimedAction51.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = strComparableTimedAction51.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction51.getisCancelled();
        int int62 = compareActionsByTime14.compare(strComparableTimedAction45, strComparableTimedAction51);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction51.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (-1), schedulerFunc2_13, testScheduler63);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_65 = null;
        rx.Subscription subscription66 = testScheduler0.schedule(schedulerFunc1_65);
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertNotNull(testScheduler59);
        org.junit.Assert.assertNull(schedulerFunc2_60);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(subscription66);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_14 = null;
        rx.Subscription subscription15 = testScheduler0.schedule(action0_14);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler0.schedule(subscriptionFunc0_18, (long) (byte) -1, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(subscription17);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction34.getaction();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass36 = schedulerFunc2_35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_35);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (short) 100, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue56 = testScheduler49.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_57 = null;
        rx.Subscription subscription58 = testScheduler49.schedule(schedulerFunc1_57);
        long long59 = testScheduler49.gettime();
        rx.util.functions.Action0 action0_60 = null;
        java.util.concurrent.TimeUnit timeUnit63 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription64 = testScheduler49.schedulePeriodically(action0_60, (long) (byte) 100, 97L, timeUnit63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue56);
        org.junit.Assert.assertNotNull(subscription58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        long long58 = testScheduler47.now();
        rx.util.functions.Action0 action0_59 = null;
        rx.Subscription subscription60 = testScheduler47.schedule(action0_59);
        long long61 = testScheduler47.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_62 = null;
        rx.Subscription subscription63 = testScheduler47.schedule(schedulerFunc1_62);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 100, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_68 = null;
        rx.Subscription subscription69 = testScheduler47.schedule(action0_68);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(subscription60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(subscription63);
        org.junit.Assert.assertNotNull(subscription69);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler30.getqueue();
        long long33 = testScheduler30.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_34 = null;
        rx.Subscription subscription35 = testScheduler30.schedule(subscriptionFunc0_34);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(subscription35);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.state;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        java.util.concurrent.TimeUnit timeUnit52 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription53 = testScheduler49.schedule(schedulerFunc1_50, (long) (byte) 10, timeUnit52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        long long24 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(subscriptionFunc0_25);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        testScheduler16.time = 1L;
        testScheduler16.triggerActions();
        testScheduler16.time = 1L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.getstate();
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction59.getscheduler();
        long long66 = testScheduler65.time;
        rx.util.functions.Action0 action0_67 = null;
        java.util.concurrent.TimeUnit timeUnit69 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription70 = testScheduler65.schedule(action0_67, (long) (byte) 1, timeUnit69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.isCancelled;
        long long51 = strComparableTimedAction37.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        rx.util.functions.Action0 action0_53 = null;
        rx.Subscription subscription54 = testScheduler52.schedule(action0_53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(subscription54);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.getaction();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler32.queue;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) 0, schedulerFunc2_16, (rx.Scheduler) testScheduler32);
        long long35 = testScheduler0.gettime();
        long long36 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(subscriptionFunc0_13);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler14.schedule(schedulerFunc1_27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler14.schedule(subscriptionFunc0_29);
        long long31 = testScheduler14.now();
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler14.schedule(action0_32);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_34 = null;
        rx.Subscription subscription35 = testScheduler14.schedule(subscriptionFunc0_34);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue36 = testScheduler14.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue36);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler7.schedule(subscriptionFunc0_18);
        java.lang.Class<?> wildcardClass20 = subscription19.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction5.getisCancelled();
        long long18 = strComparableTimedAction5.gettime();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction27.getscheduler();
        long long35 = testScheduler34.gettime();
        testScheduler34.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, 10L, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction41.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = strComparableTimedAction41.getaction();
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction41.state;
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction41.scheduler;
        long long46 = testScheduler45.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue47 = testScheduler45.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, 10L, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler19, 10L, schedulerFunc2_21, (java.io.Serializable) atomicBoolean52);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler19.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertNull(schedulerFunc2_43);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "hi!" + "'", strComparable44, "hi!");
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue47);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(schedulerFunc1_16);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.triggerActions((long) (-1));
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        testScheduler0.settime(10L);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler19.schedule(schedulerFunc1_20);
        testScheduler19.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler19, (long) (byte) 0, schedulerFunc2_25, (java.lang.CharSequence) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler19.getqueue();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (short) -1, schedulerFunc2_18, testScheduler19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler19.queue;
        long long31 = testScheduler19.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_32 = null;
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription36 = testScheduler19.schedulePeriodically(subscriptionFunc0_32, 1L, 32L, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        long long10 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription16 = testScheduler0.schedulePeriodically(subscriptionFunc0_12, (long) 10, (long) (short) 0, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction36.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = strComparableTimedAction36.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean39 = strComparableTimedAction36.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction36.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean41 = strComparableTimedAction36.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, (long) 'a', schedulerFunc2_31, atomicBoolean41);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNull(schedulerFunc2_38);
        org.junit.Assert.assertNotNull(atomicBoolean39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(atomicBoolean41);
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.getscheduler();
        testScheduler16.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) -1, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 100L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler49, (long) (short) 0, schedulerFunc2_61, (java.lang.CharSequence) "hi!");
        rx.util.functions.Action0 action0_64 = null;
        rx.Subscription subscription65 = testScheduler49.schedule(action0_64);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler49.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription65);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime9.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        strComparableTimedAction34.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction34.getisCancelled();
        long long38 = strComparableTimedAction34.time;
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction34.getscheduler();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        testScheduler47.triggerActions((long) (byte) 100);
        long long54 = testScheduler47.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler40, (long) '4', schedulerFunc2_46, (rx.Scheduler) testScheduler47);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, 0L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction59.scheduler;
        long long61 = strComparableTimedAction59.gettime();
        strComparableTimedAction59.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction59.getisCancelled();
        int int64 = compareActionsByTime9.compare(strComparableTimedAction34, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction59.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction59.isCancelled;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(testScheduler60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction15.isCancelled;
        long long19 = strComparableTimedAction15.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        testScheduler12.time = 'a';
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(action0_24);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        testScheduler35.triggerActions((long) (byte) 100);
        long long42 = testScheduler35.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler28, (long) '4', schedulerFunc2_34, (rx.Scheduler) testScheduler35);
        testScheduler28.triggerActions((long) (byte) 1);
        testScheduler28.time = 10;
        testScheduler28.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (short) 100, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass53 = strComparableTimedAction52.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler12, 32L, schedulerFunc2_27, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        rx.util.functions.Action0 action0_55 = null;
        rx.Subscription subscription56 = testScheduler12.schedule(action0_55);
        long long57 = testScheduler12.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 97L + "'", long57 == 97L);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        testScheduler60.triggerActions((long) (byte) 100);
        long long67 = testScheduler60.gettime();
        long long68 = testScheduler60.now();
        testScheduler60.time = (short) 100;
        rx.util.functions.Action0 action0_71 = null;
        rx.Subscription subscription72 = testScheduler60.schedule(action0_71);
        rx.util.functions.Action0 action0_73 = null;
        rx.Subscription subscription74 = testScheduler60.schedule(action0_73);
        long long75 = testScheduler60.now();
        long long76 = testScheduler60.now();
        testScheduler60.settime((long) (byte) 10);
        testScheduler60.time = 97L;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, (long) (byte) 10, schedulerFunc2_59, (rx.Scheduler) testScheduler60);
        long long82 = testScheduler49.now();
        rx.util.functions.Action0 action0_83 = null;
        rx.Subscription subscription84 = testScheduler49.schedule(action0_83);
        long long85 = testScheduler49.time;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler49.triggerActions(35L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(subscription72);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(subscription84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        testScheduler26.triggerActions((long) (byte) 100);
        long long33 = testScheduler26.gettime();
        long long34 = testScheduler26.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_35 = null;
        rx.Subscription subscription36 = testScheduler26.schedule(schedulerFunc1_35);
        testScheduler26.settime((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction51.scheduler;
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction51.state;
        java.lang.Class<?> wildcardClass56 = strComparable55.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler26, (-1L), schedulerFunc2_40, (java.lang.reflect.Type) wildcardClass56);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_58 = null;
        rx.Subscription subscription59 = testScheduler26.schedule(schedulerFunc1_58);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_60 = null;
        rx.Subscription subscription61 = testScheduler26.schedule(subscriptionFunc0_60);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) ' ', schedulerFunc2_25, (rx.Scheduler) testScheduler26);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue63 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_64 = null;
        java.util.concurrent.TimeUnit timeUnit67 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription68 = testScheduler0.schedulePeriodically(subscriptionFunc0_64, (long) (-1), (long) 'a', timeUnit67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "" + "'", strComparable55, "");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(subscription59);
        org.junit.Assert.assertNotNull(subscription61);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue63);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        long long6 = testScheduler5.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler5.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) -1, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction12.getscheduler();
        long long14 = testScheduler13.now();
        testScheduler13.settime((long) (byte) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.getqueue();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        testScheduler13.settime((long) (short) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler13.schedule(schedulerFunc1_22);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction44.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue49 = testScheduler48.getqueue();
        testScheduler48.time = 0L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue49);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler30.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler30.getqueue();
        long long34 = testScheduler30.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler30.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_36 = null;
        rx.Subscription subscription37 = testScheduler30.schedule(schedulerFunc1_36);
        testScheduler30.time = 0;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_40 = null;
        rx.Subscription subscription41 = testScheduler30.schedule(subscriptionFunc0_40);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_42 = null;
        rx.Subscription subscription43 = testScheduler30.schedule(subscriptionFunc0_42);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertNotNull(subscription43);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNotNull(atomicBoolean5);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(subscriptionFunc0_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler16.schedule(subscriptionFunc0_19);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        testScheduler0.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction18.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.getisCancelled();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean20);
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction20.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction20.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime6.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime5.thenComparing(wildcardTimedActionComparator7);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = wildcardTimedActionComparator7.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        int int21 = compareActionsByTime10.compare(strComparableTimedAction15, strComparableTimedAction20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator7.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = wildcardTimedActionComparator4.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator4.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = wildcardTimedActionComparator24.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        long long18 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 1);
        testScheduler13.triggerActions((long) (-1));
        long long23 = testScheduler13.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler13.schedule(schedulerFunc1_24);
        testScheduler13.time = '#';
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeBy(10L, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        testScheduler0.triggerActions(1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.getqueue();
        testScheduler0.time = (short) 100;
        long long25 = testScheduler0.gettime();
        long long26 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_29, strComparable30);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription36 = testScheduler0.schedulePeriodically(schedulerFunc1_32, 0L, 35L, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime3 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler4 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) (byte) 10, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        int int14 = compareActionsByTime3.compare(strComparableTimedAction8, strComparableTimedAction13);
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction8.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler15, 100L, schedulerFunc2_17, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler15.schedule(subscriptionFunc0_20);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler15.schedule(schedulerFunc1_22);
        long long24 = testScheduler15.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) -1, schedulerFunc2_2, (rx.Scheduler) testScheduler15);
        testScheduler15.time = (byte) -1;
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler15.schedule(action0_32);
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeBy((long) (short) 1, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        int int21 = compareActionsByTime10.compare(strComparableTimedAction15, strComparableTimedAction20);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction20.getisCancelled();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction20.scheduler;
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction20.state;
        long long25 = strComparableTimedAction20.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction20.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction20.isCancelled;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction38.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = strComparableTimedAction38.getaction();
        long long42 = strComparableTimedAction38.time;
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction38.scheduler;
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction38.state;
        long long45 = strComparableTimedAction38.time;
        long long46 = strComparableTimedAction38.time;
        int int47 = compareActionsByTime0.compare(strComparableTimedAction20, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        int int59 = compareActionsByTime48.compare(strComparableTimedAction53, strComparableTimedAction58);
        strComparableTimedAction58.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction58.getisCancelled();
        strComparableTimedAction58.cancel();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction58.state;
        long long64 = strComparableTimedAction58.time;
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableTimedAction58.state;
        long long66 = strComparableTimedAction58.gettime();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        testScheduler67.triggerActions((long) (byte) 100);
        long long74 = testScheduler67.gettime();
        long long75 = testScheduler67.now();
        testScheduler67.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 100, schedulerFunc2_78, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler67.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) -1, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction86.cancel();
        int int88 = compareActionsByTime0.compare(strComparableTimedAction58, strComparableTimedAction86);
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableTimedAction58.state;
        rx.concurrency.TestScheduler testScheduler90 = strComparableTimedAction58.getscheduler();
        rx.util.functions.Action0 action0_91 = null;
        java.util.concurrent.TimeUnit timeUnit94 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription95 = testScheduler90.schedulePeriodically(action0_91, (long) (short) 10, (long) '#', timeUnit94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNull(schedulerFunc2_41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "" + "'", strComparable63, "");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable65 + "' != '" + "" + "'", strComparable65, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + strComparable89 + "' != '" + "" + "'", strComparable89, "");
        org.junit.Assert.assertNotNull(testScheduler90);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 100, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction9.getaction();
        long long11 = strComparableTimedAction9.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction9.isCancelled;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean12);
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler23.getqueue();
        long long26 = testScheduler23.gettime();
        long long27 = testScheduler23.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime43.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime42.thenComparing(wildcardTimedActionComparator44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime30.thenComparing(wildcardTimedActionComparator45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        strComparableTimedAction57.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction57.getisCancelled();
        strComparableTimedAction57.cancel();
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableTimedAction57.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime63 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        int int74 = compareActionsByTime63.compare(strComparableTimedAction68, strComparableTimedAction73);
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableTimedAction73.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = strComparableTimedAction73.action;
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction73.state;
        long long78 = strComparableTimedAction73.time;
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableTimedAction73.state;
        int int80 = compareActionsByTime30.compare(strComparableTimedAction57, strComparableTimedAction73);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = compareActionsByTime30.reversed();
        java.lang.Class<?> wildcardClass82 = compareActionsByTime30.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler23, (-1L), schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass82);
        testScheduler23.time = 32L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (short) 10, schedulerFunc2_87, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler90 = strComparableTimedAction89.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_91 = null;
        rx.Subscription subscription92 = testScheduler90.schedule(subscriptionFunc0_91);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable62 + "' != '" + "" + "'", strComparable62, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + strComparable75 + "' != '" + "" + "'", strComparable75, "");
        org.junit.Assert.assertNull(schedulerFunc2_76);
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10L + "'", long78 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable79 + "' != '" + "" + "'", strComparable79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(testScheduler90);
        org.junit.Assert.assertNotNull(subscription92);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime19.thenComparing(wildcardTimedActionComparator21);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime19.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime19.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime24);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction32.getscheduler();
        testScheduler39.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (-1), schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction45.action;
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction51.getstate();
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction51.getscheduler();
        int int55 = compareActionsByTime19.compare(strComparableTimedAction45, strComparableTimedAction51);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler13, (long) (byte) 1, schedulerFunc2_18, compareActionsByTime19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 32L, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler13.settime((long) '#');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "hi!" + "'", strComparable53, "hi!");
        org.junit.Assert.assertNull(testScheduler54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "hi!");
        long long7 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        testScheduler10.triggerActions((long) (byte) 100);
        long long17 = testScheduler10.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (short) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (short) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction25.scheduler;
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction25.getstate();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) ' ', schedulerFunc2_9, (java.lang.Object) strComparable27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction32.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 0, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.triggerActions((long) '4');
        long long17 = testScheduler14.now();
        testScheduler14.time = 10L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 35L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        long long15 = strComparableTimedAction13.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.scheduler;
        testScheduler16.triggerActions((long) ' ');
        testScheduler16.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction32.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction32.action;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction32.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction32.getisCancelled();
        long long38 = strComparableTimedAction32.gettime();
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableTimedAction32.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction32.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler16, (long) (byte) 0, schedulerFunc2_21, atomicBoolean40);
        rx.util.functions.Action0 action0_42 = null;
        rx.Subscription subscription43 = testScheduler16.schedule(action0_42);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 100, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean34);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertNotNull(testScheduler36);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable39 + "' != '" + "" + "'", strComparable39, "");
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(subscription43);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.settime((long) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 1L, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        testScheduler13.triggerActions((long) (short) -1);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        long long19 = testScheduler13.time;
        long long20 = testScheduler13.time;
        long long21 = testScheduler13.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler13.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction59.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (-1), schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        testScheduler64.triggerActions((long) (byte) 1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue71 = testScheduler64.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, 1L, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue76 = testScheduler64.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue76);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        long long17 = strComparableTimedAction10.time;
        long long18 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        long long15 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 100);
        testScheduler0.time = (short) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler0.schedulePeriodically(subscriptionFunc0_20, (long) (byte) 1, 32L, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        testScheduler12.time = 'a';
        long long24 = testScheduler12.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler12.queue;
        testScheduler12.triggerActions((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.scheduler;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(subscription27);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        testScheduler22.triggerActions(10L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler22.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_26 = null;
        rx.Subscription subscription27 = testScheduler22.schedule(schedulerFunc1_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler22.schedule(action0_28);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler22.schedulePeriodically(subscriptionFunc0_30, (long) (byte) 100, (long) (short) 1, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        long long35 = strComparableTimedAction12.time;
        strComparableTimedAction12.cancel();
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction12.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_38 = null;
        rx.Subscription subscription39 = testScheduler37.schedule(subscriptionFunc0_38);
        testScheduler37.settime((long) (short) 100);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(subscription39);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.queue;
        long long14 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(schedulerFunc1_15);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.time = 0L;
        testScheduler15.settime(100L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler15.schedule(schedulerFunc1_20);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler15.schedule(schedulerFunc1_22);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction19.getisCancelled();
        long long21 = strComparableTimedAction19.time;
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction9.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction9.getaction();
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction9.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction9.getaction();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        long long6 = strComparableTimedAction5.gettime();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction5.getscheduler();
        strComparableTimedAction5.cancel();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(testScheduler7);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction27.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction27.getaction();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction27.getscheduler();
        strComparableTimedAction27.cancel();
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction27.getscheduler();
        strComparableTimedAction27.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNull(testScheduler32);
        org.junit.Assert.assertNull(testScheduler34);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.isCancelled;
        long long51 = strComparableTimedAction37.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction37.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(schedulerFunc1_18);
        long long20 = testScheduler15.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler15.schedulePeriodically(schedulerFunc1_21, 0L, 100L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(subscriptionFunc0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        long long21 = testScheduler12.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler12.schedule(subscriptionFunc0_22);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(schedulerFunc1_24);
        testScheduler12.time = (short) -1;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        long long18 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 1);
        testScheduler13.settime((long) 1);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction29.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction29.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction29.isCancelled;
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (byte) -1, schedulerFunc2_24, (rx.Scheduler) testScheduler33);
        long long35 = testScheduler13.now();
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler13.schedule(action0_36);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        int int51 = compareActionsByTime40.compare(strComparableTimedAction45, strComparableTimedAction50);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = compareActionsByTime40.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime52);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler71 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        int int76 = compareActionsByTime65.compare(strComparableTimedAction70, strComparableTimedAction75);
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction70.getscheduler();
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction70.getscheduler();
        strComparableTimedAction70.cancel();
        rx.concurrency.TestScheduler testScheduler80 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler80, (long) (byte) 10, schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler85 = strComparableTimedAction84.getscheduler();
        int int86 = compareActionsByTime40.compare(strComparableTimedAction70, strComparableTimedAction84);
        long long87 = strComparableTimedAction84.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_88 = strComparableTimedAction84.action;
        long long89 = strComparableTimedAction84.time;
        long long90 = strComparableTimedAction84.time;
        rx.concurrency.TestScheduler testScheduler91 = strComparableTimedAction84.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_92 = null;
        rx.Subscription subscription93 = testScheduler91.schedule(subscriptionFunc0_92);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction94 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler13, (long) '#', schedulerFunc2_39, subscription93);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(testScheduler77);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(testScheduler85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10L + "'", long89 == 10L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10L + "'", long90 == 10L);
        org.junit.Assert.assertNotNull(testScheduler91);
        org.junit.Assert.assertNotNull(subscription93);
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.getqueue();
        long long28 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler0.getqueue();
        java.lang.Class<?> wildcardClass31 = testScheduler0.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler5 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) ' ', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction9.getaction();
        long long12 = strComparableTimedAction9.time;
        long long13 = strComparableTimedAction9.time;
        strComparableTimedAction9.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction9.action;
        long long16 = strComparableTimedAction9.time;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime17.thenComparing(wildcardTimedActionComparator32);
        rx.concurrency.TestScheduler testScheduler34 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (short) -1, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        long long39 = strComparableTimedAction38.time;
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableTimedAction38.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction51.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = strComparableTimedAction51.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = strComparableTimedAction51.getaction();
        int int56 = compareActionsByTime17.compare(strComparableTimedAction38, strComparableTimedAction51);
        rx.concurrency.TestScheduler testScheduler57 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) ' ', schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction61.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction61.getstate();
        strComparableTimedAction61.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction61.getaction();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        int int77 = compareActionsByTime66.compare(strComparableTimedAction71, strComparableTimedAction76);
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableTimedAction76.getstate();
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableTimedAction76.getstate();
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction76.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean81 = strComparableTimedAction76.isCancelled;
        int int82 = compareActionsByTime17.compare(strComparableTimedAction61, strComparableTimedAction76);
        int int83 = compareActionsByTime0.compare(strComparableTimedAction9, strComparableTimedAction61);
        long long84 = strComparableTimedAction9.time;
        strComparableTimedAction9.cancel();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + strComparable40 + "' != '" + "" + "'", strComparable40, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
        org.junit.Assert.assertNull(schedulerFunc2_54);
        org.junit.Assert.assertNull(schedulerFunc2_55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "hi!" + "'", strComparable63, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + strComparable78 + "' != '" + "" + "'", strComparable78, "");
        org.junit.Assert.assertEquals("'" + strComparable79 + "' != '" + "" + "'", strComparable79, "");
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertNotNull(atomicBoolean81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 32L + "'", long84 == 32L);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        strComparableTimedAction30.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.isCancelled;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction30.scheduler;
        testScheduler50.triggerActions((long) (short) 1);
        rx.util.functions.Action0 action0_53 = null;
        rx.Subscription subscription54 = testScheduler50.schedule(action0_53);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (-1), schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler50.advanceTimeBy(0L, timeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(subscription54);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.time = '#';
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_20, strComparable21);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        long long11 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.getaction();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler32.queue;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) 0, schedulerFunc2_16, (rx.Scheduler) testScheduler32);
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue36 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue36);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction51.getstate();
        strComparableTimedAction51.cancel();
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction51.getstate();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction51.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        int int68 = compareActionsByTime57.compare(strComparableTimedAction62, strComparableTimedAction67);
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction62.getscheduler();
        testScheduler69.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (-1), schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = strComparableTimedAction75.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = strComparableTimedAction75.action;
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction75.scheduler;
        int int79 = compareActionsByTime33.compare(strComparableTimedAction51, strComparableTimedAction75);
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction51.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "hi!" + "'", strComparable53, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "hi!" + "'", strComparable55, "hi!");
        org.junit.Assert.assertNull(testScheduler56);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNull(schedulerFunc2_76);
        org.junit.Assert.assertNull(schedulerFunc2_77);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.getqueue();
        long long23 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler12.queue;
        rx.util.functions.Action0 action0_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler12.schedulePeriodically(action0_25, (-1L), (long) 0, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        long long12 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction11.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction11.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction11.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler19.schedule(subscriptionFunc0_20);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "hi!" + "'", strComparable18, "hi!");
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler13.getqueue();
        long long22 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 1, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler13.triggerActions(1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        long long53 = testScheduler52.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler52, 1L, schedulerFunc2_55, "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue58 = testScheduler52.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue58);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction15.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime35.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime34.thenComparing(wildcardTimedActionComparator36);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime22.thenComparing(wildcardTimedActionComparator37);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction43.getstate();
        rx.concurrency.TestScheduler testScheduler45 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) ' ', schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction49.getisCancelled();
        int int51 = compareActionsByTime22.compare(strComparableTimedAction43, strComparableTimedAction49);
        long long52 = strComparableTimedAction49.time;
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction49.getstate();
        long long54 = strComparableTimedAction49.time;
        strComparableTimedAction49.cancel();
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler13, (long) (byte) 0, schedulerFunc2_21, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction49.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "hi!" + "'", strComparable53, "hi!");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32L + "'", long54 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "hi!" + "'", strComparable56, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean58);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        long long16 = strComparableTimedAction13.time;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.triggerActions((long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        testScheduler13.time = 0;
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler13.schedule(action0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler13, (long) '4', schedulerFunc2_26, (java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler12.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        long long39 = testScheduler38.gettime();
        testScheduler38.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction45.getaction();
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction45.state;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction45.scheduler;
        long long50 = testScheduler49.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler49.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 10L, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass56 = testScheduler49.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler12, (long) 1, schedulerFunc2_25, (java.lang.reflect.GenericDeclaration) wildcardClass56);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        rx.Subscription subscription59 = testScheduler12.schedule(subscriptionFunc0_58);
        rx.util.functions.Action0 action0_60 = null;
        java.util.concurrent.TimeUnit timeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription63 = testScheduler12.schedule(action0_60, 10L, timeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "hi!" + "'", strComparable48, "hi!");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(subscription59);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        long long20 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 10L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        long long22 = testScheduler21.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 0, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction26.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = strComparableTimedAction26.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_27);
        org.junit.Assert.assertNull(schedulerFunc2_28);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler12.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler12.queue;
        testScheduler12.settime((long) '4');
        testScheduler12.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(subscriptionFunc0_24);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(subscriptionFunc0_21);
        java.lang.Class<?> wildcardClass23 = subscription22.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        rx.Subscription subscription12 = testScheduler10.schedule(schedulerFunc1_11);
        testScheduler10.settime((-1L));
        testScheduler10.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, 0L, schedulerFunc2_17, strComparable18);
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        testScheduler27.triggerActions((long) (byte) 100);
        long long34 = testScheduler27.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler20, (long) '4', schedulerFunc2_26, (rx.Scheduler) testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, 0L, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = strComparableTimedAction39.scheduler;
        long long41 = strComparableTimedAction39.gettime();
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction39.getscheduler();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction39.getscheduler();
        int int44 = compareActionsByTime0.compare(strComparableTimedAction19, strComparableTimedAction39);
        long long45 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction19.scheduler;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(testScheduler46);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler0.now();
        long long19 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler22.schedule(schedulerFunc1_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, 100L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler22.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue34 = testScheduler22.getqueue();
        testScheduler22.settime((long) (byte) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_37 = null;
        rx.Subscription subscription38 = testScheduler22.schedule(subscriptionFunc0_37);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) '4', schedulerFunc2_21, subscription38);
        long long40 = testScheduler0.time;
        testScheduler0.time = (-1);
        rx.util.functions.Action0 action0_43 = null;
        rx.Subscription subscription44 = testScheduler0.schedule(action0_43);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue34);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(subscription44);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) '4', schedulerFunc2_25, "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        java.lang.Comparable<java.lang.String> strComparable30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_29, strComparable30);
        strComparableTimedAction31.cancel();
        java.lang.Class<?> wildcardClass33 = strComparableTimedAction31.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        long long22 = strComparableTimedAction19.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler24.queue;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.state;
        java.lang.Class<?> wildcardClass7 = strComparableTimedAction4.getClass();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "" + "'", strComparable6, "");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        testScheduler13.triggerActions((long) (short) -1);
        long long17 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        long long29 = testScheduler20.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, 10L, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction33.scheduler;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction33.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler13, 0L, schedulerFunc2_19, testScheduler36);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_38 = null;
        java.util.concurrent.TimeUnit timeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription41 = testScheduler36.schedule(subscriptionFunc0_38, 52L, timeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertNotNull(testScheduler36);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_2 = null;
        rx.Subscription subscription3 = testScheduler0.schedule(schedulerFunc1_2);
        rx.util.functions.Action0 action0_4 = null;
        java.util.concurrent.TimeUnit timeUnit6 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription7 = testScheduler0.schedule(action0_4, 0L, timeUnit6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(subscription3);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler22.getqueue();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        testScheduler0.settime((long) (short) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_25, strComparable26);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler0.queue;
        rx.util.functions.Action0 action0_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(action0_29);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_31 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler0.schedule(schedulerFunc1_31, (long) (byte) 0, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertNotNull(subscription30);
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = wildcardTimedActionComparator9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = wildcardTimedActionComparator9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = wildcardTimedActionComparator11.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = wildcardTimedActionComparator22.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator23.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler7.schedule(schedulerFunc1_20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler7, (long) (short) -1, schedulerFunc2_23, (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction48.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction63.getscheduler();
        long long71 = testScheduler70.gettime();
        testScheduler70.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 10L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction77.getaction();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction77.state;
        int int81 = compareActionsByTime0.compare(strComparableTimedAction48, strComparableTimedAction77);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction48.scheduler;
        testScheduler82.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, 35L, schedulerFunc2_86, (java.lang.Comparable<java.lang.String>) "");
        testScheduler82.settime(100L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_92 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction94 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, 10L, schedulerFunc2_92, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (short) 0);
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.triggerActions();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(action0_22);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        long long22 = strComparableTimedAction19.time;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        strComparableTimedAction19.cancel();
        long long25 = strComparableTimedAction19.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction19.isCancelled;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean26);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (short) 100, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler15.schedule(action0_20);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.getscheduler();
        org.junit.Assert.assertNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNull(testScheduler8);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction44.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableTimedAction44.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertEquals("'" + strComparable52 + "' != '" + "" + "'", strComparable52, "");
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        long long28 = strComparableTimedAction27.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction27.isCancelled;
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction27.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction27.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNull(schedulerFunc2_31);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.isCancelled;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction9.getscheduler();
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction9.scheduler;
        testScheduler12.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler12.schedule(schedulerFunc1_14);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription15);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.queue;
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler17.schedule(action0_21, 97L, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }
}

