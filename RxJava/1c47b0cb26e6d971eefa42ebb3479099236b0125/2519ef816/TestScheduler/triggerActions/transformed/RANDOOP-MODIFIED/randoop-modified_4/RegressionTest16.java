import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = wildcardTimedActionComparator30.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime32.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction44.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction44.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        int int61 = compareActionsByTime50.compare(strComparableTimedAction55, strComparableTimedAction60);
        strComparableTimedAction60.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction60.getisCancelled();
        strComparableTimedAction60.cancel();
        long long65 = strComparableTimedAction60.gettime();
        int int66 = compareActionsByTime32.compare(strComparableTimedAction44, strComparableTimedAction60);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime32.reversed();
        rx.concurrency.TestScheduler testScheduler68 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 0, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = strComparableTimedAction72.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction72.isCancelled;
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction72.scheduler;
        rx.concurrency.TestScheduler testScheduler76 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler76, (long) (byte) 0, schedulerFunc2_78, (java.lang.Comparable<java.lang.String>) "hi!");
        long long81 = strComparableTimedAction80.gettime();
        int int82 = compareActionsByTime32.compare(strComparableTimedAction72, strComparableTimedAction80);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = wildcardTimedActionComparator31.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = wildcardTimedActionComparator31.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNull(schedulerFunc2_73);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNull(testScheduler75);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.getaction();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler31.getqueue();
        java.lang.Class<?> wildcardClass33 = wildcardTimedActionQueue32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler13, (long) (byte) -1, schedulerFunc2_16, (java.lang.reflect.AnnotatedElement) wildcardClass33);
        testScheduler13.settime(97L);
        testScheduler13.settime((long) '#');
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_39 = null;
        java.util.concurrent.TimeUnit timeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription43 = testScheduler13.schedulePeriodically(schedulerFunc1_39, (-1L), (long) (byte) -1, timeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = strComparableTimedAction28.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction28.getaction();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(testScheduler29);
        org.junit.Assert.assertNull(schedulerFunc2_30);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler0.schedulePeriodically(action0_17, (long) (byte) 100, (long) (-1), timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        testScheduler14.settime((long) (short) 10);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler14.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler14.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler14.schedulePeriodically(schedulerFunc1_19, (long) 0, 52L, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.triggerActions();
        long long17 = testScheduler15.time;
        rx.util.functions.Action0 action0_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler15.schedulePeriodically(action0_18, (long) (byte) 10, (long) 10, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler13.schedule(subscriptionFunc0_16, (long) (byte) 0, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(schedulerFunc1_28);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        rx.Subscription subscription31 = testScheduler0.schedule(schedulerFunc1_30);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) 0, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(subscription31);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        long long31 = testScheduler30.now();
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler30.schedule(action0_32);
        rx.util.functions.Action0 action0_34 = null;
        rx.Subscription subscription35 = testScheduler30.schedule(action0_34);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, 1L, schedulerFunc2_29, subscription35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction40.getstate();
        long long42 = strComparableTimedAction40.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 97L + "'", long42 == 97L);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction23.isCancelled;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction23.scheduler;
        testScheduler27.settime(1L);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler16, (long) 0, schedulerFunc2_18, testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) '#', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler27.time = 'a';
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler27.schedule(schedulerFunc1_37);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(atomicBoolean26);
        org.junit.Assert.assertNotNull(testScheduler27);
        org.junit.Assert.assertNotNull(subscription38);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction17.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) '4', schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler18.schedulePeriodically(action0_23, (long) (byte) 0, (long) 'a', timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler15.getqueue();
        long long18 = testScheduler15.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler15.schedule(schedulerFunc1_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler15.schedule(subscriptionFunc0_25, (long) (short) -1, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction15.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction15.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction15.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction15.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        long long20 = testScheduler12.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime45.compare(strComparableTimedAction50, strComparableTimedAction55);
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction50.getscheduler();
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction50.getscheduler();
        strComparableTimedAction50.cancel();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction64.getscheduler();
        int int66 = compareActionsByTime20.compare(strComparableTimedAction50, strComparableTimedAction64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = wildcardTimedActionComparator19.thenComparing(wildcardTimedActionComparator67);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = wildcardTimedActionComparator67.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = wildcardTimedActionComparator69.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = wildcardTimedActionComparator70.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = wildcardTimedActionComparator70.thenComparing(wildcardTimedActionComparator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = strComparableTimedAction55.getaction();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_59 = null;
        rx.Subscription subscription60 = testScheduler58.schedule(action0_59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "hi!");
        int int65 = compareActionsByTime37.compare(strComparableTimedAction55, strComparableTimedAction64);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction55.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction55.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction55.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(schedulerFunc2_57);
        org.junit.Assert.assertNotNull(subscription60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "hi!" + "'", strComparable67, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_68);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(subscriptionFunc0_28);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler0.schedulePeriodically(schedulerFunc1_30, (long) (short) 100, (long) (byte) 0, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (-1));
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.time = 10L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler49.queue;
        long long55 = testScheduler49.now();
        long long56 = testScheduler49.gettime();
        long long57 = testScheduler49.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        java.util.concurrent.TimeUnit timeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription62 = testScheduler49.schedulePeriodically(subscriptionFunc0_58, (long) 0, (long) (-1), timeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler12, (long) (short) 1, schedulerFunc2_20, "");
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(action0_23);
        testScheduler12.time = 100L;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.triggerActions(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = strComparableTimedAction19.time;
        long long21 = strComparableTimedAction19.time;
        long long22 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler24.queue;
        testScheduler24.triggerActions();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        long long6 = testScheduler5.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler5.schedule(action0_8);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler5.getqueue();
        long long11 = testScheduler5.time;
        rx.util.functions.Action0 action0_12 = null;
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription15 = testScheduler5.schedule(action0_12, (long) (short) 1, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = strComparableTimedAction19.gettime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = strComparableTimedAction19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Action0 action0_10 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler0.schedule(action0_10, (long) (byte) 10, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        testScheduler11.triggerActions((long) (byte) 100);
        long long18 = testScheduler11.gettime();
        long long19 = testScheduler11.now();
        long long20 = testScheduler11.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, 10L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction24.scheduler;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, 97L, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction30.scheduler;
        long long32 = strComparableTimedAction30.gettime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableTimedAction37.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction37.isCancelled;
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction37.scheduler;
        int int42 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        testScheduler44.triggerActions((long) (byte) 100);
        long long51 = testScheduler44.gettime();
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler44.schedule(action0_52);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) '#', schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction57.scheduler;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction69.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = strComparableTimedAction69.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = strComparableTimedAction69.action;
        long long74 = strComparableTimedAction69.time;
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction69.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, 32L, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction79.getstate();
        int int81 = compareActionsByTime0.compare(strComparableTimedAction57, strComparableTimedAction79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 97L + "'", long32 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable38 + "' != '" + "" + "'", strComparable38, "");
        org.junit.Assert.assertNull(schedulerFunc2_39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "" + "'", strComparable71, "");
        org.junit.Assert.assertNull(schedulerFunc2_72);
        org.junit.Assert.assertNull(schedulerFunc2_73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
        org.junit.Assert.assertNotNull(testScheduler75);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "" + "'", strComparable80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_14, strComparable15);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, 97L, schedulerFunc2_20, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction21.getisCancelled();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction21.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction21.getstate();
        strComparableTimedAction21.cancel();
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableTimedAction21.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertEquals("'" + strComparable34 + "' != '" + "" + "'", strComparable34, "");
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler11.schedule(schedulerFunc1_14);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler11.triggerActions((long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(subscription15);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction18.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction18.getisCancelled();
        long long23 = strComparableTimedAction18.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction18.getaction();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction18.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = wildcardTimedActionComparator51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = wildcardTimedActionComparator52.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(subscriptionFunc0_21);
        long long23 = testScheduler12.gettime();
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy((long) (short) 0, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.state;
        long long16 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        long long18 = strComparableTimedAction10.gettime();
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction23.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.action;
        strComparableTimedAction23.cancel();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        long long33 = strComparableTimedAction32.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction32.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction32.getaction();
        int int36 = compareActionsByTime0.compare(strComparableTimedAction23, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator52);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime55 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime56 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime56.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime55.thenComparing(wildcardTimedActionComparator57);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = compareActionsByTime55.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = compareActionsByTime55.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime60);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime63 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        int int74 = compareActionsByTime63.compare(strComparableTimedAction68, strComparableTimedAction73);
        strComparableTimedAction73.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction73.getisCancelled();
        strComparableTimedAction73.cancel();
        java.lang.Comparable<java.lang.String> strComparable78 = strComparableTimedAction73.state;
        rx.concurrency.TestScheduler testScheduler79 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler79, (long) (byte) 10, schedulerFunc2_81, (java.lang.Comparable<java.lang.String>) "");
        int int84 = compareActionsByTime60.compare(strComparableTimedAction73, strComparableTimedAction83);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime60);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator87.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = wildcardTimedActionComparator88.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean34);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertEquals("'" + strComparable78 + "' != '" + "" + "'", strComparable78, "");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        long long6 = testScheduler5.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler5.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) -1, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction12.getscheduler();
        long long14 = testScheduler13.now();
        testScheduler13.settime((long) (byte) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.getqueue();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler13.schedule(subscriptionFunc0_20, (long) (byte) -1, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        testScheduler0.settime((long) (short) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_25, strComparable26);
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableTimedAction27.getstate();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(strComparable28);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        long long17 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler18.schedule(subscriptionFunc0_19, (long) (short) 100, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        int int26 = compareActionsByTime15.compare(strComparableTimedAction20, strComparableTimedAction25);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction25.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = strComparableTimedAction25.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction25.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction25.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        int int42 = compareActionsByTime31.compare(strComparableTimedAction36, strComparableTimedAction41);
        strComparableTimedAction41.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction41.getisCancelled();
        strComparableTimedAction41.cancel();
        long long46 = strComparableTimedAction41.gettime();
        int int47 = compareActionsByTime13.compare(strComparableTimedAction25, strComparableTimedAction41);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction25.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, 10L, schedulerFunc2_12, (java.io.Serializable) atomicBoolean48);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler0.queue;
        testScheduler0.settime(100L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction56.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        java.util.concurrent.TimeUnit timeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription62 = testScheduler57.schedulePeriodically(subscriptionFunc0_58, 32L, (long) ' ', timeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNull(schedulerFunc2_28);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
        org.junit.Assert.assertNotNull(testScheduler57);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator53);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = wildcardTimedActionComparator54.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.time;
        testScheduler0.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(action0_16);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(subscription17);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction54.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction54.scheduler;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction54.getscheduler();
        long long63 = strComparableTimedAction54.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertNull(testScheduler61);
        org.junit.Assert.assertNull(testScheduler62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.time;
        long long19 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime(10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.scheduler;
        long long11 = strComparableTimedAction4.time;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertNull(testScheduler10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction14.getaction();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = strComparableTimedAction14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(schedulerFunc2_15);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction22.cancel();
        strComparableTimedAction22.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction22.action;
        strComparableTimedAction22.cancel();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_25);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.settime(0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler14.now();
        testScheduler14.settime(35L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler14.schedulePeriodically(schedulerFunc1_24, 97L, (long) (short) 1, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = wildcardTimedActionComparator8.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime11.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator13 = compareActionsByTime10.thenComparing(wildcardTimedActionComparator12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime14 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime15.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = compareActionsByTime14.thenComparing(wildcardTimedActionComparator16);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime14.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime14.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime19);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        strComparableTimedAction32.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction32.getisCancelled();
        strComparableTimedAction32.cancel();
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction32.state;
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime19.compare(strComparableTimedAction32, strComparableTimedAction42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = wildcardTimedActionComparator12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator8.thenComparing(wildcardTimedActionComparator12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = wildcardTimedActionComparator12.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime49.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = compareActionsByTime54.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = compareActionsByTime49.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime54);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = compareActionsByTime49.reversed();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        testScheduler60.triggerActions((long) (byte) 100);
        long long67 = testScheduler60.gettime();
        long long68 = testScheduler60.now();
        long long69 = testScheduler60.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, 10L, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction73.scheduler;
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction73.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, 97L, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction79.scheduler;
        long long81 = strComparableTimedAction79.gettime();
        rx.concurrency.TestScheduler testScheduler82 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, (long) (byte) 10, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableTimedAction86.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_88 = strComparableTimedAction86.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean89 = strComparableTimedAction86.isCancelled;
        rx.concurrency.TestScheduler testScheduler90 = strComparableTimedAction86.scheduler;
        int int91 = compareActionsByTime49.compare(strComparableTimedAction79, strComparableTimedAction86);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = compareActionsByTime49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator48.thenComparing(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertNotNull(testScheduler75);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 97L + "'", long81 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable87 + "' != '" + "" + "'", strComparable87, "");
        org.junit.Assert.assertNull(schedulerFunc2_88);
        org.junit.Assert.assertNotNull(atomicBoolean89);
        org.junit.Assert.assertNotNull(testScheduler90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction37.getisCancelled();
        strComparableTimedAction37.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = strComparableTimedAction37.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNull(schedulerFunc2_53);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        long long22 = strComparableTimedAction19.time;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        strComparableTimedAction19.cancel();
        strComparableTimedAction19.cancel();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        testScheduler0.time = (short) 1;
        rx.util.functions.Action0 action0_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(action0_10);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription15 = testScheduler0.schedule(schedulerFunc1_12, (long) (byte) 0, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription11);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        long long17 = testScheduler16.time;
        testScheduler16.time = (-1);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler16.schedulePeriodically(subscriptionFunc0_20, (long) 10, (long) (byte) 10, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_6 = null;
        rx.Subscription subscription7 = testScheduler5.schedule(schedulerFunc1_6);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler5.schedule(schedulerFunc1_8);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.triggerActions((long) (byte) 100);
        long long19 = testScheduler12.gettime();
        long long20 = testScheduler12.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(subscriptionFunc0_21);
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(action0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 100L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler12.schedule(subscriptionFunc0_30);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler5, 10L, schedulerFunc2_11, testScheduler12);
        rx.util.functions.Action0 action0_33 = null;
        rx.Subscription subscription34 = testScheduler12.schedule(action0_33);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(subscription34);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        long long18 = testScheduler7.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler23.getqueue();
        testScheduler23.triggerActions(1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        testScheduler0.settime((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        int int26 = compareActionsByTime15.compare(strComparableTimedAction20, strComparableTimedAction25);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction25.getisCancelled();
        rx.concurrency.TestScheduler testScheduler28 = strComparableTimedAction25.scheduler;
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction25.state;
        java.lang.Class<?> wildcardClass30 = strComparable29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (-1L), schedulerFunc2_14, (java.lang.reflect.Type) wildcardClass30);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        rx.Subscription subscription33 = testScheduler0.schedule(schedulerFunc1_32);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction37.scheduler;
        testScheduler38.settime((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNotNull(testScheduler28);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(testScheduler38);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        long long5 = strComparableTimedAction4.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = strComparableTimedAction4.getaction();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableTimedAction4.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertNull(schedulerFunc2_7);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "" + "'", strComparable8, "");
        org.junit.Assert.assertNotNull(testScheduler9);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "" + "'", strComparable11, "");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        rx.Subscription subscription36 = testScheduler0.schedule(subscriptionFunc0_35);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler0.schedule(schedulerFunc1_37);
        long long39 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        java.util.concurrent.TimeUnit timeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription43 = testScheduler0.schedule(schedulerFunc1_40, (long) (byte) 1, timeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction17.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction17.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction17.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.triggerActions((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        int int27 = compareActionsByTime16.compare(strComparableTimedAction21, strComparableTimedAction26);
        strComparableTimedAction26.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction26.getisCancelled();
        long long30 = strComparableTimedAction26.time;
        long long31 = strComparableTimedAction26.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction26.isCancelled;
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.scheduler;
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction26.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) 100, schedulerFunc2_15, (java.io.Serializable) wildcardClass34);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        testScheduler38.triggerActions((long) (byte) 100);
        long long45 = testScheduler38.gettime();
        long long46 = testScheduler38.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_47 = null;
        rx.Subscription subscription48 = testScheduler38.schedule(subscriptionFunc0_47);
        java.lang.Class<?> wildcardClass49 = testScheduler38.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, (long) (byte) 0, schedulerFunc2_37, (java.lang.reflect.GenericDeclaration) wildcardClass49);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_51 = null;
        rx.Subscription subscription52 = testScheduler0.schedule(schedulerFunc1_51);
        rx.util.functions.Action0 action0_53 = null;
        rx.Subscription subscription54 = testScheduler0.schedule(action0_53);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(subscription52);
        org.junit.Assert.assertNotNull(subscription54);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(action0_19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler13.schedule(action0_21);
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler13.schedulePeriodically(action0_23, (long) 0, (-1L), timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction35.getstate();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue39 = testScheduler38.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_40 = null;
        rx.Subscription subscription41 = testScheduler38.schedule(subscriptionFunc0_40);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler5, (long) (byte) 1, schedulerFunc2_24, subscription41);
        long long43 = testScheduler5.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 32L, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 100, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler5.triggerActions();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue39);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler14.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(subscriptionFunc0_48);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler47.triggerActions((long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(subscription49);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (short) 100, schedulerFunc2_17, (java.io.Serializable) (-1L));
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler0.schedulePeriodically(subscriptionFunc0_22, (long) (byte) 100, (long) (byte) 1, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        long long5 = testScheduler0.gettime();
        long long6 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 100, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler17.settime(52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction37.getisCancelled();
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = strComparableTimedAction37.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = strComparableTimedAction37.action;
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction37.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNull(schedulerFunc2_53);
        org.junit.Assert.assertNull(schedulerFunc2_54);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "" + "'", strComparable55, "");
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(subscriptionFunc0_19);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler13.schedule(subscriptionFunc0_21);
        testScheduler13.time = 1L;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo((long) (byte) -1, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 0L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        long long22 = strComparableTimedAction21.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        testScheduler13.triggerActions();
        long long17 = testScheduler13.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler13.schedulePeriodically(subscriptionFunc0_18, 97L, (long) (byte) 0, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime17.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime35.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime34.thenComparing(wildcardTimedActionComparator36);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime22.thenComparing(wildcardTimedActionComparator37);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction43.getstate();
        rx.concurrency.TestScheduler testScheduler45 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) ' ', schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction49.getisCancelled();
        int int51 = compareActionsByTime22.compare(strComparableTimedAction43, strComparableTimedAction49);
        long long52 = strComparableTimedAction43.time;
        long long53 = strComparableTimedAction43.time;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction64.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = strComparableTimedAction64.getaction();
        rx.concurrency.TestScheduler testScheduler68 = strComparableTimedAction64.getscheduler();
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction64.scheduler;
        int int70 = compareActionsByTime17.compare(strComparableTimedAction43, strComparableTimedAction64);
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction43.getstate();
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction43.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean73 = strComparableTimedAction43.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "" + "'", strComparable66, "");
        org.junit.Assert.assertNull(schedulerFunc2_67);
        org.junit.Assert.assertNotNull(testScheduler68);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "" + "'", strComparable71, "");
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertNotNull(atomicBoolean73);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction30.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler49, 97L, schedulerFunc2_51, (java.lang.CharSequence) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler49.getqueue();
        java.lang.Class<?> wildcardClass55 = wildcardTimedActionQueue54.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        testScheduler11.triggerActions((long) (short) 10);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(action0_20);
        long long22 = testScheduler12.now();
        long long23 = testScheduler12.gettime();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator5 = wildcardTimedActionComparator4.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator5);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = testScheduler20.gettime();
        java.lang.Class<?> wildcardClass22 = testScheduler20.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction27.getscheduler();
        long long52 = testScheduler51.time;
        testScheduler51.time = 10;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_55 = null;
        rx.Subscription subscription56 = testScheduler51.schedule(schedulerFunc1_55);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = compareActionsByTime59.thenComparing(wildcardTimedActionComparator61);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime59.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime64.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime59.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = compareActionsByTime59.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler51, (-1L), schedulerFunc2_58, compareActionsByTime59);
        long long72 = testScheduler51.now();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler51.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        int int26 = compareActionsByTime15.compare(strComparableTimedAction20, strComparableTimedAction25);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction25.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = strComparableTimedAction25.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction25.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction25.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        int int42 = compareActionsByTime31.compare(strComparableTimedAction36, strComparableTimedAction41);
        strComparableTimedAction41.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction41.getisCancelled();
        strComparableTimedAction41.cancel();
        long long46 = strComparableTimedAction41.gettime();
        int int47 = compareActionsByTime13.compare(strComparableTimedAction25, strComparableTimedAction41);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction25.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, 10L, schedulerFunc2_12, (java.io.Serializable) atomicBoolean48);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler0.queue;
        long long51 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNull(schedulerFunc2_28);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler14.schedule(schedulerFunc1_27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler14.schedule(subscriptionFunc0_29);
        long long31 = testScheduler14.now();
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler14.schedule(action0_32);
        testScheduler14.time = (byte) 0;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler14.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = strComparableTimedAction55.getaction();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_59 = null;
        rx.Subscription subscription60 = testScheduler58.schedule(action0_59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "hi!");
        int int65 = compareActionsByTime37.compare(strComparableTimedAction55, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        testScheduler66.triggerActions((long) (byte) 100);
        long long73 = testScheduler66.gettime();
        long long74 = testScheduler66.now();
        long long75 = testScheduler66.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, 10L, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction79.getisCancelled();
        rx.concurrency.TestScheduler testScheduler81 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler81, (long) (byte) 0, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = strComparableTimedAction85.getaction();
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction85.getscheduler();
        int int88 = compareActionsByTime37.compare(strComparableTimedAction79, strComparableTimedAction85);
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableTimedAction85.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean90 = strComparableTimedAction85.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable91 = strComparableTimedAction85.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(schedulerFunc2_57);
        org.junit.Assert.assertNotNull(subscription60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNull(schedulerFunc2_86);
        org.junit.Assert.assertNull(testScheduler87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + strComparable89 + "' != '" + "hi!" + "'", strComparable89, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean90);
        org.junit.Assert.assertEquals("'" + strComparable91 + "' != '" + "hi!" + "'", strComparable91, "hi!");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.triggerActions((long) '4');
        testScheduler14.time = (byte) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) '4', schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction22.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_23);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.time = (byte) 0;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(subscriptionFunc0_17);
        long long19 = testScheduler14.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler14.schedule(subscriptionFunc0_20);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        testScheduler52.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        java.util.concurrent.TimeUnit timeUnit56 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription57 = testScheduler52.schedule(subscriptionFunc0_54, (long) (byte) 1, timeUnit56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction16.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(subscriptionFunc0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) -1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        rx.Subscription subscription26 = testScheduler18.schedule(subscriptionFunc0_25);
        long long27 = testScheduler18.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_7, strComparable8);
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction9.getstate();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction9.scheduler;
        long long12 = strComparableTimedAction9.gettime();
        long long13 = strComparableTimedAction9.time;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction9.getstate();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction9.state;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNull(strComparable10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(strComparable14);
        org.junit.Assert.assertNull(strComparable15);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(subscriptionFunc0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        long long21 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.settime(35L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler12.schedule(subscriptionFunc0_28, (long) ' ', timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.time = (byte) 0;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler14.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler5.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler5.queue;
        testScheduler5.settime((long) 'a');
        rx.util.functions.Action0 action0_14 = null;
        java.util.concurrent.TimeUnit timeUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription17 = testScheduler5.schedule(action0_14, (long) '#', timeUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.state;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.getscheduler();
        testScheduler49.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 0L, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        testScheduler49.time = (short) 100;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        long long43 = testScheduler13.time;
        long long44 = testScheduler13.gettime();
        testScheduler13.triggerActions((long) (short) 10);
        testScheduler13.settime((long) 0);
        long long49 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        java.util.concurrent.TimeUnit timeUnit52 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription53 = testScheduler13.schedule(schedulerFunc1_50, (long) (byte) 1, timeUnit52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.time = (short) 1;
        long long14 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = strComparableTimedAction40.getaction();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableTimedAction40.state;
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction40.scheduler;
        long long45 = testScheduler44.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue46 = testScheduler44.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, 10L, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_51 = null;
        rx.Subscription subscription52 = testScheduler44.schedule(subscriptionFunc0_51);
        testScheduler44.time = 0L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_55 = null;
        rx.Subscription subscription56 = testScheduler44.schedule(subscriptionFunc0_55);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) 10, schedulerFunc2_20, subscription56);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNull(schedulerFunc2_42);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "hi!" + "'", strComparable43, "hi!");
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue46);
        org.junit.Assert.assertNotNull(subscription52);
        org.junit.Assert.assertNotNull(subscription56);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime28.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime27.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler19, (long) 10, schedulerFunc2_26, compareActionsByTime27);
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        testScheduler33.triggerActions((long) (byte) 100);
        long long40 = testScheduler33.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        int int61 = compareActionsByTime50.compare(strComparableTimedAction55, strComparableTimedAction60);
        strComparableTimedAction60.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction60.getisCancelled();
        long long64 = strComparableTimedAction60.time;
        long long65 = strComparableTimedAction60.gettime();
        int int66 = compareActionsByTime27.compare(strComparableTimedAction48, strComparableTimedAction60);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) (byte) 10, schedulerFunc2_18, compareActionsByTime27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime68 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (byte) 10, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        int int79 = compareActionsByTime68.compare(strComparableTimedAction73, strComparableTimedAction78);
        strComparableTimedAction78.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean81 = strComparableTimedAction78.getisCancelled();
        long long82 = strComparableTimedAction78.time;
        rx.concurrency.TestScheduler testScheduler83 = strComparableTimedAction78.getscheduler();
        rx.concurrency.TestScheduler testScheduler84 = strComparableTimedAction78.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = strComparableTimedAction78.getaction();
        rx.concurrency.TestScheduler testScheduler86 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_88 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction90 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) (byte) 10, schedulerFunc2_88, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler91 = strComparableTimedAction90.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable92 = strComparableTimedAction90.getstate();
        int int93 = compareActionsByTime27.compare(strComparableTimedAction78, strComparableTimedAction90);
        rx.concurrency.TestScheduler testScheduler94 = strComparableTimedAction90.scheduler;
        rx.concurrency.TestScheduler testScheduler95 = strComparableTimedAction90.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertNotNull(testScheduler83);
        org.junit.Assert.assertNotNull(testScheduler84);
        org.junit.Assert.assertNull(schedulerFunc2_85);
        org.junit.Assert.assertNotNull(testScheduler91);
        org.junit.Assert.assertEquals("'" + strComparable92 + "' != '" + "" + "'", strComparable92, "");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(testScheduler94);
        org.junit.Assert.assertNotNull(testScheduler95);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass14 = strComparableTimedAction13.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler8.schedulePeriodically(subscriptionFunc0_9, (long) (short) 10, 32L, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNotNull(testScheduler8);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        long long16 = strComparableTimedAction13.time;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler17.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler17.queue;
        java.lang.Class<?> wildcardClass23 = testScheduler17.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        long long6 = testScheduler5.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler5.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler5.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler5.schedule(schedulerFunc1_10);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler5.schedule(schedulerFunc1_12);
        long long14 = testScheduler5.time;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction21.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction21.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler5, (-1L), schedulerFunc2_16, (java.io.Serializable) atomicBoolean24);
        java.lang.Class<?> wildcardClass26 = testScheduler5.getClass();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        long long16 = testScheduler15.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler15.getqueue();
        testScheduler15.triggerActions(0L);
        testScheduler15.triggerActions((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        long long8 = strComparableTimedAction4.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean11 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction4.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(atomicBoolean11);
        org.junit.Assert.assertNull(testScheduler12);
        org.junit.Assert.assertNotNull(atomicBoolean13);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        long long58 = testScheduler47.now();
        long long59 = testScheduler47.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler47, (long) 100, schedulerFunc2_61, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_14 = null;
        java.lang.Object obj15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, 0L, schedulerFunc2_14, obj15);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler0.schedulePeriodically(subscriptionFunc0_19, (long) (-1), (long) (short) 100, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler12.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 100, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(atomicBoolean28);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        testScheduler23.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) -1, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_29 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler23.schedule(action0_29, (long) (short) 100, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(schedulerFunc1_11);
        long long13 = testScheduler0.time;
        testScheduler0.settime((long) (short) 1);
        rx.util.functions.Action0 action0_16 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler0.schedulePeriodically(action0_16, 0L, (long) 'a', timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction19.getaction();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "hi!" + "'", strComparable21, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(testScheduler24);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction15.isCancelled;
        long long18 = strComparableTimedAction15.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction15.isCancelled;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.action;
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.time;
        rx.util.functions.Action0 action0_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler17.schedulePeriodically(action0_19, (long) (short) 1, (long) (short) 100, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.time;
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 10, timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.time = 10L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler49.queue;
        long long55 = testScheduler49.now();
        testScheduler49.time = 10L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        testScheduler0.settime((long) (short) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_25, strComparable26);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler0.queue;
        long long29 = testScheduler0.gettime();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        testScheduler60.triggerActions((long) (byte) 100);
        long long67 = testScheduler60.gettime();
        long long68 = testScheduler60.now();
        testScheduler60.time = (short) 100;
        rx.util.functions.Action0 action0_71 = null;
        rx.Subscription subscription72 = testScheduler60.schedule(action0_71);
        rx.util.functions.Action0 action0_73 = null;
        rx.Subscription subscription74 = testScheduler60.schedule(action0_73);
        long long75 = testScheduler60.now();
        long long76 = testScheduler60.now();
        testScheduler60.settime((long) (byte) 10);
        testScheduler60.time = 97L;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, (long) (byte) 10, schedulerFunc2_59, (rx.Scheduler) testScheduler60);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_82 = null;
        rx.Subscription subscription83 = testScheduler60.schedule(subscriptionFunc0_82);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, 0L, schedulerFunc2_85, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler88 = strComparableTimedAction87.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_89 = null;
        rx.Subscription subscription90 = testScheduler88.schedule(schedulerFunc1_89);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler88.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(subscription72);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(subscription83);
        org.junit.Assert.assertNotNull(testScheduler88);
        org.junit.Assert.assertNotNull(subscription90);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        java.util.concurrent.TimeUnit timeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler49.advanceTimeBy(10L, timeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(schedulerFunc1_28);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        rx.Subscription subscription31 = testScheduler0.schedule(schedulerFunc1_30);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) 'a', timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(subscription31);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction54.getisCancelled();
        long long60 = strComparableTimedAction54.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction54.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction54.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction54.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "hi!" + "'", strComparable63, "hi!");
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.isCancelled;
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction30.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(testScheduler51);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 35L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime36);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler62 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) (byte) 10, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        int int72 = compareActionsByTime61.compare(strComparableTimedAction66, strComparableTimedAction71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime49.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime61);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator48.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime61);
        rx.concurrency.TestScheduler testScheduler75 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, (long) ' ', schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction79.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = strComparableTimedAction79.getaction();
        rx.concurrency.TestScheduler testScheduler82 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_83 = null;
        rx.Subscription subscription84 = testScheduler82.schedule(action0_83);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, (long) (short) 10, schedulerFunc2_86, (java.lang.Comparable<java.lang.String>) "hi!");
        int int89 = compareActionsByTime61.compare(strComparableTimedAction79, strComparableTimedAction88);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = strComparableTimedAction88.getaction();
        java.lang.Comparable<java.lang.String> strComparable91 = strComparableTimedAction88.state;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler7, (long) 100, schedulerFunc2_23, strComparableTimedAction88);
        testScheduler7.triggerActions(52L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNull(schedulerFunc2_81);
        org.junit.Assert.assertNotNull(subscription84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNull(schedulerFunc2_90);
        org.junit.Assert.assertEquals("'" + strComparable91 + "' != '" + "hi!" + "'", strComparable91, "hi!");
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.time = 0L;
        testScheduler15.settime(100L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler15.schedule(schedulerFunc1_20);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime25.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator26);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime29.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = wildcardTimedActionComparator30.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = wildcardTimedActionComparator30.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator26.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime65.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime64.thenComparing(wildcardTimedActionComparator66);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime52.thenComparing(wildcardTimedActionComparator67);
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableTimedAction73.getstate();
        rx.concurrency.TestScheduler testScheduler75 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, (long) ' ', schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction79.getisCancelled();
        int int81 = compareActionsByTime52.compare(strComparableTimedAction73, strComparableTimedAction79);
        long long82 = strComparableTimedAction73.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean83 = strComparableTimedAction73.isCancelled;
        int int84 = compareActionsByTime33.compare(strComparableTimedAction51, strComparableTimedAction73);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean85 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction51.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean87 = strComparableTimedAction51.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean88 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler15, 32L, schedulerFunc2_23, (java.io.Serializable) atomicBoolean88);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_90 = null;
        java.util.concurrent.TimeUnit timeUnit93 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription94 = testScheduler15.schedulePeriodically(subscriptionFunc0_90, 100L, (long) 0, timeUnit93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "" + "'", strComparable74, "");
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean85);
        org.junit.Assert.assertNull(testScheduler86);
        org.junit.Assert.assertNotNull(atomicBoolean87);
        org.junit.Assert.assertNotNull(atomicBoolean88);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        testScheduler15.time = 32L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) -1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_24 = null;
        java.io.Serializable serializable25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler15, (long) (short) 100, schedulerFunc2_24, serializable25);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        rx.Subscription subscription28 = testScheduler15.schedule(subscriptionFunc0_27);
        long long29 = testScheduler15.now();
        testScheduler15.time = 100;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler21.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        long long27 = testScheduler21.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler21.schedule(subscriptionFunc0_28, (long) (-1), timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = strComparableTimedAction10.getaction();
        long long23 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertNull(schedulerFunc2_22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 100L, schedulerFunc2_23, strComparable24);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_2, strComparable3);
        testScheduler0.time = (short) 10;
        testScheduler0.time = 0;
        testScheduler0.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_10 = null;
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription14 = testScheduler0.schedulePeriodically(subscriptionFunc0_10, (long) 0, 32L, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler50.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler50.schedule(subscriptionFunc0_52);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler50.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        testScheduler57.triggerActions((long) (byte) 100);
        long long64 = testScheduler57.gettime();
        long long65 = testScheduler57.now();
        testScheduler57.time = (short) 100;
        rx.util.functions.Action0 action0_68 = null;
        rx.Subscription subscription69 = testScheduler57.schedule(action0_68);
        rx.util.functions.Action0 action0_70 = null;
        rx.Subscription subscription71 = testScheduler57.schedule(action0_70);
        long long72 = testScheduler57.now();
        rx.util.functions.Action0 action0_73 = null;
        rx.Subscription subscription74 = testScheduler57.schedule(action0_73);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler50, (long) '4', schedulerFunc2_56, subscription74);
        rx.util.functions.Action0 action0_76 = null;
        rx.Subscription subscription77 = testScheduler50.schedule(action0_76);
        long long78 = testScheduler50.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(subscription69);
        org.junit.Assert.assertNotNull(subscription71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertNotNull(subscription77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = strComparableTimedAction28.getaction();
        java.lang.Class<?> wildcardClass30 = strComparableTimedAction28.getClass();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(schedulerFunc2_29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        java.lang.Class<?> wildcardClass17 = testScheduler14.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        strComparableTimedAction19.cancel();
        long long23 = strComparableTimedAction19.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction19.isCancelled;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction19.scheduler;
        long long26 = testScheduler25.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, 0L, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        long long10 = strComparableTimedAction4.gettime();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.scheduler;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNull(testScheduler9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertNull(testScheduler11);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler16.schedulePeriodically(subscriptionFunc0_17, (long) (short) 1, (long) ' ', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction19.getaction();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        testScheduler24.triggerActions();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "hi!" + "'", strComparable21, "hi!");
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(testScheduler24);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_50 = null;
        rx.Subscription subscription51 = testScheduler41.schedule(action0_50);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler41.schedule(subscriptionFunc0_52);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_61 = null;
        rx.Subscription subscription62 = testScheduler56.schedule(schedulerFunc1_61);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, 100L, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        long long67 = strComparableTimedAction66.time;
        long long68 = strComparableTimedAction66.time;
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction66.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = strComparableTimedAction66.action;
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction66.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler41, (long) '#', schedulerFunc2_55, testScheduler71);
        java.util.concurrent.TimeUnit timeUnit74 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler71.advanceTimeTo(97L, timeUnit74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(subscription62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNull(schedulerFunc2_70);
        org.junit.Assert.assertNotNull(testScheduler71);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction45.getisCancelled();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction45.scheduler;
        testScheduler48.time = 100;
        long long51 = testScheduler48.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_52 = null;
        rx.Subscription subscription53 = testScheduler48.schedule(schedulerFunc1_52);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, 97L, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, 10L, schedulerFunc2_34, (java.io.Serializable) atomicBoolean58);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue60 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_61 = null;
        rx.Subscription subscription62 = testScheduler0.schedule(schedulerFunc1_61);
        long long63 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_64 = null;
        java.util.concurrent.TimeUnit timeUnit66 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription67 = testScheduler0.schedule(schedulerFunc1_64, 0L, timeUnit66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue60);
        org.junit.Assert.assertNotNull(subscription62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.state;
        long long16 = strComparableTimedAction10.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime5.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 100, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean19);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction23.isCancelled;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction23.scheduler;
        testScheduler27.settime(1L);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler16, (long) 0, schedulerFunc2_18, testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) '#', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler27.time = 'a';
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_37 = null;
        rx.Subscription subscription38 = testScheduler27.schedule(subscriptionFunc0_37);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_39 = null;
        java.util.concurrent.TimeUnit timeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription42 = testScheduler27.schedule(schedulerFunc1_39, (long) (short) 100, timeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(atomicBoolean26);
        org.junit.Assert.assertNotNull(testScheduler27);
        org.junit.Assert.assertNotNull(subscription38);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction13.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        long long18 = testScheduler17.time;
        long long19 = testScheduler17.gettime();
        testScheduler17.triggerActions(97L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler17.queue;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.advanceTimeTo((long) (byte) 10, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "hi!" + "'", strComparable16, "hi!");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        long long15 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(schedulerFunc1_16);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(subscriptionFunc0_18);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler13.schedule(schedulerFunc1_20, (long) '#', timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        long long19 = testScheduler16.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler16.getqueue();
        testScheduler16.time = (-1L);
        testScheduler16.time = 10L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler16, (long) (short) 1, schedulerFunc2_26, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(schedulerFunc1_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_18, strComparable19);
        testScheduler0.settime(1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler0.queue;
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler0.schedule(action0_24);
        testScheduler0.settime(52L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        testScheduler8.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler8.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (short) 10, schedulerFunc2_7, testScheduler8);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler8.schedule(action0_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler8.queue;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime17.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        int int53 = compareActionsByTime42.compare(strComparableTimedAction47, strComparableTimedAction52);
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction47.getscheduler();
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction47.getscheduler();
        strComparableTimedAction47.cancel();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction61.getscheduler();
        int int63 = compareActionsByTime17.compare(strComparableTimedAction47, strComparableTimedAction61);
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction61.getstate();
        java.lang.Comparable<java.lang.String> strComparable65 = strComparableTimedAction61.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        int int77 = compareActionsByTime66.compare(strComparableTimedAction71, strComparableTimedAction76);
        strComparableTimedAction76.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean79 = strComparableTimedAction76.getisCancelled();
        long long80 = strComparableTimedAction76.time;
        long long81 = strComparableTimedAction76.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean82 = strComparableTimedAction76.isCancelled;
        rx.concurrency.TestScheduler testScheduler83 = strComparableTimedAction76.scheduler;
        java.lang.Comparable<java.lang.String> strComparable84 = strComparableTimedAction76.getstate();
        int int85 = compareActionsByTime0.compare(strComparableTimedAction61, strComparableTimedAction76);
        strComparableTimedAction76.cancel();
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction76.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable88 = strComparableTimedAction76.getstate();
        rx.concurrency.TestScheduler testScheduler89 = strComparableTimedAction76.scheduler;
        long long90 = testScheduler89.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "" + "'", strComparable64, "");
        org.junit.Assert.assertEquals("'" + strComparable65 + "' != '" + "" + "'", strComparable65, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10L + "'", long81 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean82);
        org.junit.Assert.assertNotNull(testScheduler83);
        org.junit.Assert.assertEquals("'" + strComparable84 + "' != '" + "" + "'", strComparable84, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(testScheduler87);
        org.junit.Assert.assertEquals("'" + strComparable88 + "' != '" + "" + "'", strComparable88, "");
        org.junit.Assert.assertNotNull(testScheduler89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        testScheduler12.time = '#';
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler24);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(subscriptionFunc0_15);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(subscriptionFunc0_17);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        testScheduler0.settime((long) (short) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction23.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.getaction();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler15.queue;
        long long19 = testScheduler15.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions((long) (byte) 100);
        testScheduler13.settime((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 0, schedulerFunc2_19, strComparable20);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction21.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction21.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction21.getisCancelled();
        strComparableTimedAction21.cancel();
        java.lang.Class<?> wildcardClass26 = strComparableTimedAction21.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.isCancelled;
        long long18 = strComparableTimedAction10.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_19);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.now();
        testScheduler17.time = 1L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 32L, schedulerFunc2_22, strComparable23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 32L, schedulerFunc2_26, strComparable27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (short) -1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction32.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        long long15 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler12.schedulePeriodically(schedulerFunc1_20, (long) 10, (long) '4', timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        testScheduler0.settime((long) '#');
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(subscriptionFunc0_28);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (short) 1, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        long long41 = testScheduler12.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_42 = null;
        java.util.concurrent.TimeUnit timeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription46 = testScheduler12.schedulePeriodically(subscriptionFunc0_42, 1L, (long) 10, timeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime4.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        strComparableTimedAction22.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean25 = strComparableTimedAction22.getisCancelled();
        strComparableTimedAction22.cancel();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction22.state;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime9.compare(strComparableTimedAction22, strComparableTimedAction32);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = wildcardTimedActionComparator2.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator52);
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction58.getstate();
        rx.concurrency.TestScheduler testScheduler60 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) ' ', schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction64.getisCancelled();
        int int66 = compareActionsByTime37.compare(strComparableTimedAction58, strComparableTimedAction64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime37.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = wildcardTimedActionComparator67.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = wildcardTimedActionComparator36.thenComparing(wildcardTimedActionComparator68);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = wildcardTimedActionComparator68.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = wildcardTimedActionComparator68.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator68.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean25);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "" + "'", strComparable59, "");
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        testScheduler0.time = ' ';
        testScheduler0.triggerActions((long) (short) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(subscriptionFunc0_17);
        testScheduler0.time = 0;
        testScheduler0.settime((long) (short) -1);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(subscriptionFunc0_23);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler0.schedule(subscriptionFunc0_25, (long) (byte) 10, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler0.getqueue();
        java.lang.Class<?> wildcardClass31 = wildcardTimedActionQueue30.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction48.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction63.getscheduler();
        long long71 = testScheduler70.gettime();
        testScheduler70.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 10L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction77.getaction();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction77.state;
        int int81 = compareActionsByTime0.compare(strComparableTimedAction48, strComparableTimedAction77);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction48.scheduler;
        testScheduler82.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, 35L, schedulerFunc2_86, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_89 = null;
        rx.Subscription subscription90 = testScheduler82.schedule(subscriptionFunc0_89);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertNotNull(subscription90);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        long long48 = strComparableTimedAction44.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction44.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(testScheduler50);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        strComparableTimedAction19.cancel();
        long long25 = strComparableTimedAction19.time;
        long long26 = strComparableTimedAction19.gettime();
        strComparableTimedAction19.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = wildcardTimedActionComparator30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = wildcardTimedActionComparator31.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = ' ';
        long long11 = testScheduler0.now();
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) (short) 10, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        testScheduler0.triggerActions();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(action0_15);
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo(0L, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction54.getisCancelled();
        long long60 = strComparableTimedAction54.time;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction54.state;
        strComparableTimedAction54.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        long long16 = testScheduler12.time;
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 35L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        long long23 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        testScheduler27.triggerActions((long) (byte) 100);
        long long34 = testScheduler27.gettime();
        long long35 = testScheduler27.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_36 = null;
        rx.Subscription subscription37 = testScheduler27.schedule(subscriptionFunc0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler27.schedule(action0_38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, 100L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue44 = testScheduler27.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_45 = null;
        rx.Subscription subscription46 = testScheduler27.schedule(schedulerFunc1_45);
        rx.util.functions.Action0 action0_47 = null;
        rx.Subscription subscription48 = testScheduler27.schedule(action0_47);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue49 = testScheduler27.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_50 = null;
        rx.Subscription subscription51 = testScheduler27.schedule(subscriptionFunc0_50);
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler27.schedule(action0_52);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler12, (long) (short) 100, schedulerFunc2_26, (rx.Scheduler) testScheduler27);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue55 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        java.util.concurrent.TimeUnit timeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription59 = testScheduler12.schedule(subscriptionFunc0_56, 0L, timeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue44);
        org.junit.Assert.assertNotNull(subscription46);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue55);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(action0_16);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) ' ', schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction35.getisCancelled();
        java.lang.Class<?> wildcardClass37 = strComparableTimedAction35.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler20, 10L, schedulerFunc2_30, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) (-1), schedulerFunc2_19, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, 1L, schedulerFunc2_14, (java.lang.reflect.GenericDeclaration) wildcardClass37);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction53.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = strComparableTimedAction53.getaction();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction53.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = strComparableTimedAction53.getaction();
        long long59 = strComparableTimedAction53.gettime();
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction53.scheduler;
        long long61 = testScheduler60.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue62 = testScheduler60.queue;
        long long63 = testScheduler60.now();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 1, schedulerFunc2_42, testScheduler60);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) 100, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        long long69 = strComparableTimedAction68.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "" + "'", strComparable55, "");
        org.junit.Assert.assertNull(schedulerFunc2_56);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNull(schedulerFunc2_58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(testScheduler60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        long long14 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(schedulerFunc1_15);
        long long17 = testScheduler13.now();
        testScheduler13.settime(0L);
        rx.util.functions.Action0 action0_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler13.schedule(action0_20, (long) 10, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator5 = wildcardTimedActionComparator4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime7 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime7.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime6.thenComparing(wildcardTimedActionComparator8);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = wildcardTimedActionComparator8.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator13 = compareActionsByTime12.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime11.thenComparing(wildcardTimedActionComparator13);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = wildcardTimedActionComparator8.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = wildcardTimedActionComparator8.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime17.thenComparing(wildcardTimedActionComparator32);
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableTimedAction38.getstate();
        rx.concurrency.TestScheduler testScheduler40 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) ' ', schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean45 = strComparableTimedAction44.getisCancelled();
        int int46 = compareActionsByTime17.compare(strComparableTimedAction38, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator16.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = wildcardTimedActionComparator5.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        testScheduler50.settime((long) (byte) 0);
        long long57 = testScheduler50.now();
        long long58 = testScheduler50.gettime();
        testScheduler50.time = 1;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_61 = null;
        rx.Subscription subscription62 = testScheduler50.schedule(schedulerFunc1_61);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, 0L, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "hi!");
        long long67 = strComparableTimedAction66.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean68 = strComparableTimedAction66.isCancelled;
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction66.getscheduler();
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction66.scheduler;
        rx.concurrency.TestScheduler testScheduler71 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction75.getisCancelled();
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction75.scheduler;
        int int78 = compareActionsByTime17.compare(strComparableTimedAction66, strComparableTimedAction75);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = compareActionsByTime17.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator5);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertEquals("'" + strComparable39 + "' != '" + "" + "'", strComparable39, "");
        org.junit.Assert.assertNotNull(atomicBoolean45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(subscription62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean68);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertNull(testScheduler77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction19.scheduler;
        strComparableTimedAction19.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction19.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction19.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = strComparableTimedAction19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNull(schedulerFunc2_27);
        org.junit.Assert.assertNotNull(atomicBoolean28);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler15.queue;
        rx.util.functions.Action0 action0_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler15.schedulePeriodically(action0_18, 1L, (long) (short) 10, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        long long32 = testScheduler30.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction31.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.action;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator50);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler testScheduler58 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) ' ', schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction62.getisCancelled();
        int int64 = compareActionsByTime35.compare(strComparableTimedAction56, strComparableTimedAction62);
        long long65 = strComparableTimedAction56.time;
        int int66 = compareActionsByTime17.compare(strComparableTimedAction31, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction56.getscheduler();
        testScheduler67.time = (byte) 1;
        rx.util.functions.Action0 action0_70 = null;
        rx.Subscription subscription71 = testScheduler67.schedule(action0_70);
        long long72 = testScheduler67.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertEquals("'" + strComparable57 + "' != '" + "" + "'", strComparable57, "");
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNotNull(subscription71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        testScheduler13.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        long long19 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        testScheduler22.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (short) 0, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        long long29 = strComparableTimedAction28.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction28.isCancelled;
        java.lang.Class<?> wildcardClass31 = strComparableTimedAction28.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler13, 1L, schedulerFunc2_21, (java.lang.reflect.Type) wildcardClass31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        long long15 = strComparableTimedAction14.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction14.scheduler;
        testScheduler16.settime((long) '4');
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_15 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler0.schedule(action0_15, (long) (byte) 10, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime22.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime21.thenComparing(wildcardTimedActionComparator23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime21.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime26);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        strComparableTimedAction39.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction39.getisCancelled();
        strComparableTimedAction39.cancel();
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction39.state;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        int int50 = compareActionsByTime26.compare(strComparableTimedAction39, strComparableTimedAction49);
        long long51 = strComparableTimedAction49.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler16, (long) (byte) 1, schedulerFunc2_20, (java.io.Serializable) atomicBoolean53);
        long long55 = testScheduler16.gettime();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler16.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions((long) (short) 1);
        rx.util.functions.Action0 action0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(action0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        long long58 = testScheduler49.gettime();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler49.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = strComparableTimedAction8.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction8.getaction();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction8.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        testScheduler11.settime((long) (byte) 1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler11.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler11.schedule(subscriptionFunc0_19);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.getqueue();
        testScheduler17.time = 'a';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 1L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.getqueue();
        long long23 = testScheduler12.gettime();
        rx.util.functions.Action0 action0_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler12.schedulePeriodically(action0_24, (long) (short) 100, 0L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction33.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction33.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime37.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction67.getscheduler();
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction67.getscheduler();
        strComparableTimedAction67.cancel();
        rx.concurrency.TestScheduler testScheduler77 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler77, (long) (byte) 10, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction81.getscheduler();
        int int83 = compareActionsByTime37.compare(strComparableTimedAction67, strComparableTimedAction81);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean84 = strComparableTimedAction67.isCancelled;
        long long85 = strComparableTimedAction67.time;
        int int86 = compareActionsByTime9.compare(strComparableTimedAction33, strComparableTimedAction67);
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableTimedAction33.getstate();
        java.lang.Comparable<java.lang.String> strComparable88 = strComparableTimedAction33.state;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertNotNull(atomicBoolean36);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertNotNull(testScheduler75);
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10L + "'", long85 == 10L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertEquals("'" + strComparable87 + "' != '" + "" + "'", strComparable87, "");
        org.junit.Assert.assertEquals("'" + strComparable88 + "' != '" + "" + "'", strComparable88, "");
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        testScheduler12.time = '4';
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(testScheduler12);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        long long20 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        testScheduler23.triggerActions((long) (byte) 100);
        long long30 = testScheduler23.gettime();
        long long31 = testScheduler23.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        rx.Subscription subscription33 = testScheduler23.schedule(schedulerFunc1_32);
        testScheduler23.settime((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        int int49 = compareActionsByTime38.compare(strComparableTimedAction43, strComparableTimedAction48);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction48.scheduler;
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableTimedAction48.state;
        java.lang.Class<?> wildcardClass53 = strComparable52.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler23, (-1L), schedulerFunc2_37, (java.lang.reflect.Type) wildcardClass53);
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (short) 100, schedulerFunc2_22, (java.io.Serializable) wildcardClass53);
        testScheduler0.settime(52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertEquals("'" + strComparable52 + "' != '" + "" + "'", strComparable52, "");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) 0, schedulerFunc2_6, (java.lang.CharSequence) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler0.schedulePeriodically(schedulerFunc1_9, (long) (byte) 1, 100L, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 97L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler20.schedule(schedulerFunc1_21, 0L, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler20);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction13.getscheduler();
        testScheduler20.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (-1), schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction26.action;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableTimedAction32.getstate();
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction32.getscheduler();
        int int36 = compareActionsByTime0.compare(strComparableTimedAction26, strComparableTimedAction32);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction32.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction32.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = strComparableTimedAction32.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction32.isCancelled;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_27);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertEquals("'" + strComparable34 + "' != '" + "hi!" + "'", strComparable34, "hi!");
        org.junit.Assert.assertNull(testScheduler35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(testScheduler37);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNull(schedulerFunc2_39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        long long6 = testScheduler5.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler5.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) -1, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler5.schedule(schedulerFunc1_13);
        long long15 = testScheduler5.now();
        rx.util.functions.Action0 action0_16 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler5.schedulePeriodically(action0_16, (long) '#', (long) '#', timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler16.schedulePeriodically(subscriptionFunc0_19, 1L, (long) (short) 0, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator46.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator73.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator21.thenComparing(wildcardTimedActionComparator74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = wildcardTimedActionComparator75.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.now();
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_15, 10L, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        long long18 = testScheduler15.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler15.triggerActions((long) 'a');
        testScheduler15.time = 1L;
        long long27 = testScheduler15.now();
        testScheduler15.triggerActions();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction28.isCancelled;
        strComparableTimedAction28.cancel();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean36);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 10;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(subscriptionFunc0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 100, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        long long23 = strComparableTimedAction22.gettime();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.scheduler;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(testScheduler25);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) 'a', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        long long52 = testScheduler47.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (-1L), schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction54.getstate();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction54.getstate();
        strComparableTimedAction54.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction54.scheduler;
        strComparableTimedAction54.cancel();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = strComparableTimedAction54.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "hi!" + "'", strComparable59, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertNull(testScheduler63);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 1, schedulerFunc2_20, strComparable21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction22.action;
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction22.getstate();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction22.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNull(strComparable24);
        org.junit.Assert.assertNull(strComparable25);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        long long17 = strComparableTimedAction10.gettime();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction10.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
        org.junit.Assert.assertNull(schedulerFunc2_21);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue74 = testScheduler0.getqueue();
        long long75 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_76 = null;
        java.util.concurrent.TimeUnit timeUnit79 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription80 = testScheduler0.schedulePeriodically(subscriptionFunc0_76, (long) (byte) 1, (long) 0, timeUnit79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction31.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.action;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator50);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler testScheduler58 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) ' ', schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction62.getisCancelled();
        int int64 = compareActionsByTime35.compare(strComparableTimedAction56, strComparableTimedAction62);
        long long65 = strComparableTimedAction56.time;
        int int66 = compareActionsByTime17.compare(strComparableTimedAction31, strComparableTimedAction56);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean67 = strComparableTimedAction31.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction31.getaction();
        java.lang.Comparable<java.lang.String> strComparable69 = strComparableTimedAction31.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertEquals("'" + strComparable57 + "' != '" + "" + "'", strComparable57, "");
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertEquals("'" + strComparable69 + "' != '" + "" + "'", strComparable69, "");
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        long long14 = strComparableTimedAction11.time;
        long long15 = strComparableTimedAction11.time;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction20.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNull(schedulerFunc2_21);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler7.schedule(subscriptionFunc0_18);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler7.schedule(schedulerFunc1_20);
        testScheduler7.time = (byte) 1;
        rx.util.functions.Action0 action0_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler7.schedulePeriodically(action0_24, (long) (short) 1, 10L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction48.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction63.getscheduler();
        long long71 = testScheduler70.gettime();
        testScheduler70.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 10L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction77.getaction();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction77.state;
        int int81 = compareActionsByTime0.compare(strComparableTimedAction48, strComparableTimedAction77);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction48.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_83 = null;
        java.util.concurrent.TimeUnit timeUnit85 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription86 = testScheduler82.schedule(schedulerFunc1_83, (long) 10, timeUnit85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 100, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction26.state;
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableTimedAction26.state;
        strComparableTimedAction26.cancel();
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction26.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
        org.junit.Assert.assertEquals("'" + strComparable28 + "' != '" + "" + "'", strComparable28, "");
        org.junit.Assert.assertNotNull(testScheduler30);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        testScheduler13.settime((long) 'a');
        long long21 = testScheduler13.now();
        testScheduler13.settime(52L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler13.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        testScheduler28.triggerActions((long) (byte) 100);
        long long35 = testScheduler28.gettime();
        long long36 = testScheduler28.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler testScheduler39 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) ' ', schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean44 = strComparableTimedAction43.getisCancelled();
        java.lang.Class<?> wildcardClass45 = strComparableTimedAction43.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler28, 10L, schedulerFunc2_38, (java.lang.reflect.AnnotatedElement) wildcardClass45);
        rx.util.functions.Action0 action0_47 = null;
        rx.Subscription subscription48 = testScheduler28.schedule(action0_47);
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler28.schedule(action0_49);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_51 = null;
        rx.Subscription subscription52 = testScheduler28.schedule(schedulerFunc1_51);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler28.queue;
        rx.util.functions.Action0 action0_54 = null;
        rx.Subscription subscription55 = testScheduler28.schedule(action0_54);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler21, (long) (byte) -1, schedulerFunc2_27, (rx.Scheduler) testScheduler28);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_57 = null;
        java.util.concurrent.TimeUnit timeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription61 = testScheduler28.schedulePeriodically(subscriptionFunc0_57, 10L, (-1L), timeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertNotNull(subscription50);
        org.junit.Assert.assertNotNull(subscription52);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction56.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction56.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction56.isCancelled;
        rx.concurrency.TestScheduler testScheduler67 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 0, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler73 = strComparableTimedAction71.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableTimedAction71.getstate();
        int int75 = compareActionsByTime49.compare(strComparableTimedAction56, strComparableTimedAction71);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = strComparableTimedAction56.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean77 = strComparableTimedAction56.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = strComparableTimedAction56.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction56.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertNull(schedulerFunc2_72);
        org.junit.Assert.assertNull(testScheduler73);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "hi!" + "'", strComparable74, "hi!");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(schedulerFunc2_76);
        org.junit.Assert.assertNotNull(atomicBoolean77);
        org.junit.Assert.assertNull(schedulerFunc2_78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler17.queue;
        long long20 = testScheduler17.now();
        testScheduler17.time = (short) 1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler17.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler17.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler17.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction36.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = strComparableTimedAction36.action;
        rx.concurrency.TestScheduler testScheduler40 = strComparableTimedAction36.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) 1, schedulerFunc2_25, (rx.Scheduler) testScheduler40);
        testScheduler0.settime((long) '4');
        long long44 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNull(schedulerFunc2_39);
        org.junit.Assert.assertNotNull(testScheduler40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        testScheduler0.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        long long15 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        testScheduler0.settime((long) (-1));
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(subscriptionFunc0_20);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) 1, schedulerFunc2_17, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Action0 action0_25 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler0.schedule(action0_25, (long) (short) 1, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        testScheduler41.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue44 = testScheduler41.queue;
        rx.util.functions.Action0 action0_45 = null;
        java.util.concurrent.TimeUnit timeUnit47 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription48 = testScheduler41.schedule(action0_45, (long) (byte) 0, timeUnit47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue44);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        testScheduler13.settime((long) 'a');
        testScheduler13.settime((long) (short) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler13.schedule(subscriptionFunc0_24);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_8 = null;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription12 = testScheduler7.schedulePeriodically(subscriptionFunc0_8, 1L, 0L, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.triggerActions((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 100L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = testScheduler12.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler12.schedulePeriodically(schedulerFunc1_21, 0L, 0L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        testScheduler17.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler17.schedule(subscriptionFunc0_19);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.triggerActions((long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler11.schedule(schedulerFunc1_14);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler11.getqueue();
        long long17 = testScheduler11.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_19, strComparable20);
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler11.advanceTimeBy((long) (short) 10, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = wildcardTimedActionComparator46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = wildcardTimedActionComparator51.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        testScheduler0.triggerActions();
        testScheduler0.triggerActions(10L);
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 97L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction19.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        strComparableTimedAction19.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_22, strComparable23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction24.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNull(schedulerFunc2_25);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = 32L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 100L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        long long60 = strComparableTimedAction59.time;
        long long61 = strComparableTimedAction59.time;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction59.getscheduler();
        java.lang.Class<?> wildcardClass63 = testScheduler62.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler12, (long) (byte) 100, schedulerFunc2_48, (java.lang.reflect.Type) wildcardClass63);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_65 = null;
        java.util.concurrent.TimeUnit timeUnit67 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription68 = testScheduler12.schedule(subscriptionFunc0_65, 97L, timeUnit67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(subscriptionFunc0_19);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_21, (long) (-1), timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = strComparableTimedAction55.getaction();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_59 = null;
        rx.Subscription subscription60 = testScheduler58.schedule(action0_59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "hi!");
        int int65 = compareActionsByTime37.compare(strComparableTimedAction55, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        testScheduler66.triggerActions((long) (byte) 100);
        long long73 = testScheduler66.gettime();
        long long74 = testScheduler66.now();
        long long75 = testScheduler66.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, 10L, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean80 = strComparableTimedAction79.getisCancelled();
        rx.concurrency.TestScheduler testScheduler81 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler81, (long) (byte) 0, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = strComparableTimedAction85.getaction();
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction85.getscheduler();
        int int88 = compareActionsByTime37.compare(strComparableTimedAction79, strComparableTimedAction85);
        java.lang.Comparable<java.lang.String> strComparable89 = strComparableTimedAction85.getstate();
        long long90 = strComparableTimedAction85.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(schedulerFunc2_57);
        org.junit.Assert.assertNotNull(subscription60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean80);
        org.junit.Assert.assertNull(schedulerFunc2_86);
        org.junit.Assert.assertNull(testScheduler87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + strComparable89 + "' != '" + "hi!" + "'", strComparable89, "hi!");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(atomicBoolean19);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(schedulerFunc1_18);
        testScheduler15.time = 0;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction10.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        long long21 = testScheduler18.time;
        testScheduler18.settime(32L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler18.schedulePeriodically(subscriptionFunc0_24, 97L, 0L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = wildcardTimedActionComparator49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = wildcardTimedActionComparator52.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime33.thenComparing(wildcardTimedActionComparator52);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = wildcardTimedActionComparator52.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = wildcardTimedActionComparator55.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        long long16 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler0.schedulePeriodically(subscriptionFunc0_17, 97L, 52L, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler12.schedule(action0_13);
        long long15 = testScheduler12.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler12.schedule(schedulerFunc1_16, (long) (byte) 1, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        testScheduler12.triggerActions(97L);
        long long39 = testScheduler12.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_44 = null;
        rx.Subscription subscription45 = testScheduler12.schedule(schedulerFunc1_44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction49.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(testScheduler50);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = wildcardTimedActionComparator61.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = wildcardTimedActionComparator62.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = wildcardTimedActionComparator62.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 100, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction46.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(testScheduler47);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = strComparableTimedAction28.getaction();
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction28.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction28.getaction();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction28.getscheduler();
        long long33 = strComparableTimedAction28.time;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(schedulerFunc2_29);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = wildcardTimedActionComparator43.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = wildcardTimedActionComparator43.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime47.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime46.thenComparing(wildcardTimedActionComparator48);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime46.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime46.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = compareActionsByTime46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = wildcardTimedActionComparator43.thenComparing(wildcardTimedActionComparator55);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        int int68 = compareActionsByTime57.compare(strComparableTimedAction62, strComparableTimedAction67);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime69 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime70 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime70.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = compareActionsByTime69.thenComparing(wildcardTimedActionComparator71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime57.thenComparing(wildcardTimedActionComparator72);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator72.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator55.thenComparing(wildcardTimedActionComparator72);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = wildcardTimedActionComparator75.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = wildcardTimedActionComparator75.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = wildcardTimedActionComparator77.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator77);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_94 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler95 = strComparableTimedAction71.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable96 = strComparableTimedAction71.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_94);
        org.junit.Assert.assertNotNull(testScheduler95);
        org.junit.Assert.assertEquals("'" + strComparable96 + "' != '" + "hi!" + "'", strComparable96, "hi!");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "hi!");
        long long7 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(schedulerFunc1_8);
        testScheduler0.time = (byte) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction19.action;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        long long20 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler14, (long) '4', schedulerFunc2_20, (rx.Scheduler) testScheduler21);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler14.schedule(subscriptionFunc0_30);
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler14.schedule(action0_32);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) (short) 0, schedulerFunc2_13, subscription33);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, 100L, schedulerFunc2_37, "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        testScheduler42.triggerActions((long) (byte) 100);
        long long49 = testScheduler42.gettime();
        testScheduler42.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue52 = testScheduler42.queue;
        testScheduler42.triggerActions();
        long long54 = testScheduler42.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_55 = null;
        rx.Subscription subscription56 = testScheduler42.schedule(schedulerFunc1_55);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue57 = testScheduler42.queue;
        testScheduler42.time = (byte) 100;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, 1L, schedulerFunc2_41, testScheduler42);
        java.util.concurrent.TimeUnit timeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler42.advanceTimeTo((long) 100, timeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue57);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(action0_17);
        testScheduler13.settime((long) 'a');
        long long21 = testScheduler13.time;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction29.getscheduler();
        long long37 = strComparableTimedAction29.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction29.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler13, (-1L), schedulerFunc2_23, (java.io.Serializable) atomicBoolean38);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_40 = null;
        rx.Subscription subscription41 = testScheduler13.schedule(subscriptionFunc0_40);
        java.lang.Class<?> wildcardClass42 = testScheduler13.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(testScheduler36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.queue;
        testScheduler0.time = (byte) 100;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler0.schedulePeriodically(schedulerFunc1_19, (long) (byte) 10, (long) (short) -1, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(schedulerFunc1_18);
        long long20 = testScheduler13.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler13.schedulePeriodically(subscriptionFunc0_21, (long) '4', 0L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        long long13 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (-1), schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        long long20 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler0.schedulePeriodically(subscriptionFunc0_21, (long) ' ', 97L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler18.triggerActions((long) (byte) 100);
        long long25 = testScheduler18.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        long long35 = testScheduler34.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler testScheduler38 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) ' ', schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean43 = strComparableTimedAction42.getisCancelled();
        java.lang.Class<?> wildcardClass44 = strComparableTimedAction42.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler34, (long) ' ', schedulerFunc2_37, (java.lang.reflect.Type) wildcardClass44);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (-1L), schedulerFunc2_17, (java.lang.Object) schedulerFunc2_37);
        testScheduler13.settime((long) (short) 100);
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler13.schedule(action0_49);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_51 = null;
        rx.Subscription subscription52 = testScheduler13.schedule(subscriptionFunc0_51);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 1, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(subscription50);
        org.junit.Assert.assertNotNull(subscription52);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.time;
        testScheduler0.time = 32L;
        long long29 = testScheduler0.now();
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription34 = testScheduler0.schedule(subscriptionFunc0_31, (long) 'a', timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) '#');
        testScheduler0.time = 35L;
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        long long35 = strComparableTimedAction12.time;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction12.scheduler;
        testScheduler36.triggerActions();
        long long38 = testScheduler36.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_39 = null;
        java.util.concurrent.TimeUnit timeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription42 = testScheduler36.schedule(subscriptionFunc0_39, 0L, timeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(testScheduler36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        long long16 = strComparableTimedAction13.time;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler17.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler17.queue;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        testScheduler37.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler37, (long) '4', schedulerFunc2_41, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) 1, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction47.getstate();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction47.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler17, (long) 100, schedulerFunc2_24, (rx.Scheduler) testScheduler49);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        testScheduler53.triggerActions((long) (byte) 100);
        long long60 = testScheduler53.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (short) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (short) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction68.scheduler;
        long long70 = testScheduler69.time;
        testScheduler69.triggerActions(0L);
        java.lang.Class<?> wildcardClass73 = testScheduler69.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) 100, schedulerFunc2_52, (java.lang.reflect.AnnotatedElement) wildcardClass73);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_75 = null;
        java.util.concurrent.TimeUnit timeUnit77 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription78 = testScheduler17.schedule(schedulerFunc1_75, (long) (short) 0, timeUnit77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction27.getisCancelled();
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction27.scheduler;
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction27.state;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(testScheduler62);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "hi!" + "'", strComparable63, "hi!");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction12.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction12.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction12.getisCancelled();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "" + "'", strComparable36, "");
        org.junit.Assert.assertNotNull(atomicBoolean37);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime22.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime21.thenComparing(wildcardTimedActionComparator23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime21.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime26);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        strComparableTimedAction39.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction39.getisCancelled();
        strComparableTimedAction39.cancel();
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction39.state;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        int int50 = compareActionsByTime26.compare(strComparableTimedAction39, strComparableTimedAction49);
        long long51 = strComparableTimedAction49.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler16, (long) (byte) 1, schedulerFunc2_20, (java.io.Serializable) atomicBoolean53);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue55 = testScheduler16.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 0, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_60 = null;
        java.util.concurrent.TimeUnit timeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription63 = testScheduler16.schedule(action0_60, (long) 0, timeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue55);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction59.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (-1), schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue69 = testScheduler64.getqueue();
        testScheduler64.settime(0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue69);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        long long14 = strComparableTimedAction11.time;
        long long15 = strComparableTimedAction11.time;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler16.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler16, 100L, schedulerFunc2_23, (java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        testScheduler30.triggerActions((long) (byte) 100);
        long long37 = testScheduler30.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (short) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction41.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableTimedAction41.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime44.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction56.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction56.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction56.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        strComparableTimedAction72.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean75 = strComparableTimedAction72.getisCancelled();
        strComparableTimedAction72.cancel();
        long long77 = strComparableTimedAction72.gettime();
        int int78 = compareActionsByTime44.compare(strComparableTimedAction56, strComparableTimedAction72);
        long long79 = strComparableTimedAction56.time;
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction56.scheduler;
        int int81 = compareActionsByTime5.compare(strComparableTimedAction41, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction56.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable83 = strComparableTimedAction56.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = strComparableTimedAction56.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "" + "'", strComparable43, "");
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertEquals("'" + strComparable83 + "' != '" + "" + "'", strComparable83, "");
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        long long7 = strComparableTimedAction6.gettime();
        strComparableTimedAction6.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction6.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        long long10 = testScheduler0.time;
        long long11 = testScheduler0.now();
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler0.schedule(schedulerFunc1_14);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(subscription15);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        long long16 = testScheduler15.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 100, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler15.queue;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeTo((long) ' ', timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        testScheduler12.time = '#';
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(action0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        testScheduler12.settime((long) (byte) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) '4', schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.triggerActions((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        long long16 = strComparableTimedAction13.time;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        long long20 = testScheduler17.now();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction27.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction27.getisCancelled();
        long long63 = strComparableTimedAction27.gettime();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction27.scheduler;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertNull(testScheduler64);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(schedulerFunc1_15);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(subscriptionFunc0_17);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction21.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction21.getisCancelled();
        long long33 = strComparableTimedAction21.time;
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction21.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler34.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_36 = null;
        rx.Subscription subscription37 = testScheduler34.schedule(subscriptionFunc0_36);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
        org.junit.Assert.assertNotNull(subscription37);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction23.action;
        long long25 = strComparableTimedAction23.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction23.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean26);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction11.getscheduler();
        long long16 = testScheduler15.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler15.schedule(subscriptionFunc0_17, (long) 0, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime9.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        strComparableTimedAction34.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction34.getisCancelled();
        long long38 = strComparableTimedAction34.time;
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction34.getscheduler();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        testScheduler47.triggerActions((long) (byte) 100);
        long long54 = testScheduler47.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler40, (long) '4', schedulerFunc2_46, (rx.Scheduler) testScheduler47);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, 0L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction59.scheduler;
        long long61 = strComparableTimedAction59.gettime();
        strComparableTimedAction59.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction59.getisCancelled();
        int int64 = compareActionsByTime9.compare(strComparableTimedAction34, strComparableTimedAction59);
        long long65 = strComparableTimedAction34.time;
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction34.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean67 = strComparableTimedAction34.isCancelled;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(testScheduler60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "" + "'", strComparable66, "");
        org.junit.Assert.assertNotNull(atomicBoolean67);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_13, atomicBoolean21);
        rx.util.functions.Action0 action0_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler0.schedule(action0_23, (long) (byte) 0, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(action0_21);
        testScheduler12.settime((long) (short) 0);
        long long25 = testScheduler12.now();
        long long26 = testScheduler12.gettime();
        long long27 = testScheduler12.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler12.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        long long26 = testScheduler7.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler7.getqueue();
        rx.util.functions.Action0 action0_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler7.schedule(action0_28, 0L, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 100, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction18.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction18.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        long long2 = testScheduler0.now();
        testScheduler0.triggerActions();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        testScheduler0.settime((long) '4');
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime15 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        int int26 = compareActionsByTime15.compare(strComparableTimedAction20, strComparableTimedAction25);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction25.getisCancelled();
        rx.concurrency.TestScheduler testScheduler28 = strComparableTimedAction25.scheduler;
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction25.state;
        java.lang.Class<?> wildcardClass30 = strComparable29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (-1L), schedulerFunc2_14, (java.lang.reflect.Type) wildcardClass30);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        rx.Subscription subscription33 = testScheduler0.schedule(schedulerFunc1_32);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        java.lang.Comparable<java.lang.String> strComparable36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_35, strComparable36);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNotNull(testScheduler28);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(subscription33);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        long long18 = testScheduler7.time;
        long long19 = testScheduler7.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler7.queue;
        testScheduler7.triggerActions();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction21.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction21.state;
        long long33 = strComparableTimedAction21.time;
        long long34 = strComparableTimedAction21.time;
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction21.getscheduler();
        long long36 = strComparableTimedAction21.time;
        long long37 = strComparableTimedAction21.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction13.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        long long18 = testScheduler17.time;
        long long19 = testScheduler17.gettime();
        testScheduler17.triggerActions(97L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 32L, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler17.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler17.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "hi!" + "'", strComparable16, "hi!");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler7.settime((long) (short) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler7.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler7.schedule(subscriptionFunc0_19, (long) (-1), timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        testScheduler0.time = 10L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (-1), schedulerFunc2_15, "hi!");
        testScheduler0.triggerActions((long) '#');
        testScheduler0.settime((long) 100);
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) '4', timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.getqueue();
        testScheduler17.time = 'a';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = strComparableTimedAction24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler12.schedule(action0_13);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (long) 100, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass34);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_38 = null;
        rx.Subscription subscription39 = testScheduler0.schedule(subscriptionFunc0_38);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        java.util.concurrent.TimeUnit timeUnit43 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription44 = testScheduler0.schedulePeriodically(schedulerFunc1_40, (long) '4', (long) 'a', timeUnit43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription39);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        testScheduler0.time = (short) 1;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        testScheduler30.triggerActions((long) (byte) 100);
        long long37 = testScheduler30.gettime();
        long long38 = testScheduler30.now();
        testScheduler30.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 100, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction43.scheduler;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        testScheduler45.triggerActions((long) (byte) 100);
        long long52 = testScheduler45.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (short) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction56.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable58 = strComparableTimedAction56.state;
        int int59 = compareActionsByTime5.compare(strComparableTimedAction43, strComparableTimedAction56);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler61 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler61, (long) (byte) 10, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime60.compare(strComparableTimedAction65, strComparableTimedAction70);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime72 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler73 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler73, (long) (byte) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler78 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler78, (long) (byte) 10, schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "");
        int int83 = compareActionsByTime72.compare(strComparableTimedAction77, strComparableTimedAction82);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = compareActionsByTime60.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime72);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = wildcardTimedActionComparator84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = wildcardTimedActionComparator85.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = wildcardTimedActionComparator86.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator86.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = compareActionsByTime5.thenComparing(wildcardTimedActionComparator88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = wildcardTimedActionComparator88.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = wildcardTimedActionComparator90.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertEquals("'" + strComparable58 + "' != '" + "" + "'", strComparable58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription16 = testScheduler0.schedule(subscriptionFunc0_13, 97L, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(subscription12);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableTimedAction4.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = strComparableTimedAction4.getaction();
        long long9 = strComparableTimedAction4.gettime();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler21.getqueue();
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler21.schedule(action0_27, (long) (byte) 100, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction70.scheduler;
        long long73 = testScheduler72.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_78 = null;
        rx.Subscription subscription79 = testScheduler72.schedule(action0_78);
        long long80 = testScheduler72.now();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(subscription79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.getqueue();
        testScheduler13.settime(100L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler13.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler13.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction10.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction19.isCancelled;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction31.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler48, (long) (short) 0, schedulerFunc2_50, (java.lang.CharSequence) "hi!");
        long long53 = testScheduler48.now();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction28.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertNotNull(atomicBoolean30);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        testScheduler16.time = 1L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler16.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = strComparableTimedAction23.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        long long20 = strComparableTimedAction19.gettime();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction19.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        long long22 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) ' ', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction29.getisCancelled();
        java.lang.Class<?> wildcardClass31 = strComparableTimedAction29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, 10L, schedulerFunc2_24, (java.lang.reflect.AnnotatedElement) wildcardClass31);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 100L, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        long long37 = strComparableTimedAction36.time;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, 32L, schedulerFunc2_13, strComparableTimedAction36);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_39 = null;
        java.util.concurrent.TimeUnit timeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription42 = testScheduler0.schedule(subscriptionFunc0_39, (long) (-1), timeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        testScheduler0.settime((long) ' ');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        long long48 = strComparableTimedAction44.time;
        long long49 = strComparableTimedAction44.gettime();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = strComparableTimedAction44.getaction();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction44.state;
        long long54 = strComparableTimedAction44.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNull(schedulerFunc2_52);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler19.queue;
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler19.schedulePeriodically(action0_21, (long) 1, 1L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        testScheduler71.settime(100L);
        long long76 = testScheduler71.time;
        long long77 = testScheduler71.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue78 = testScheduler71.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L + "'", long76 == 100L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue78);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.triggerActions((long) '4');
        long long17 = testScheduler14.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler14.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, (long) (short) 0, schedulerFunc2_21, (java.lang.CharSequence) "hi!");
        rx.util.functions.Action0 action0_24 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler14.schedule(action0_24, (long) (byte) 1, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = strComparableTimedAction15.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction15.isCancelled;
        long long21 = strComparableTimedAction15.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction15.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean22);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction11.cancel();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        long long9 = testScheduler0.now();
        long long10 = testScheduler0.time;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 100, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        long long13 = strComparableTimedAction5.time;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction5.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction5.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.queue;
        testScheduler0.time = (byte) 100;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        testScheduler0.time = 97L;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction45.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime62.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = compareActionsByTime61.thenComparing(wildcardTimedActionComparator63);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator64);
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction70.getstate();
        rx.concurrency.TestScheduler testScheduler72 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) ' ', schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean77 = strComparableTimedAction76.getisCancelled();
        int int78 = compareActionsByTime49.compare(strComparableTimedAction70, strComparableTimedAction76);
        int int79 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction70);
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction70.scheduler;
        long long81 = strComparableTimedAction70.gettime();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "" + "'", strComparable71, "");
        org.junit.Assert.assertNotNull(atomicBoolean77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10L + "'", long81 == 10L);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = testScheduler18.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler18.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime36.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime23.thenComparing(wildcardTimedActionComparator38);
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler46 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) ' ', schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction50.getisCancelled();
        int int52 = compareActionsByTime23.compare(strComparableTimedAction44, strComparableTimedAction50);
        long long53 = strComparableTimedAction50.time;
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableTimedAction50.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction50.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler18, (long) (short) 10, schedulerFunc2_22, (java.io.Serializable) atomicBoolean55);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_57 = null;
        rx.Subscription subscription58 = testScheduler18.schedule(schedulerFunc1_57);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler18.triggerActions((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable54 + "' != '" + "hi!" + "'", strComparable54, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(subscription58);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        testScheduler9.triggerActions((long) (byte) 100);
        long long16 = testScheduler9.gettime();
        long long17 = testScheduler9.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler9.schedule(subscriptionFunc0_18);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler9.schedule(subscriptionFunc0_20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, 10L, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction25.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler6, (long) '#', schedulerFunc2_8, testScheduler26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler6, (long) '#', schedulerFunc2_29, "");
        long long32 = testScheduler6.gettime();
        java.util.concurrent.TimeUnit timeUnit34 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler6.advanceTimeTo((-1L), timeUnit34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNotNull(testScheduler6);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue74 = testScheduler0.getqueue();
        long long75 = testScheduler0.now();
        testScheduler0.time = (short) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        testScheduler48.triggerActions((long) (byte) 100);
        long long55 = testScheduler48.gettime();
        long long56 = testScheduler48.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_57 = null;
        rx.Subscription subscription58 = testScheduler48.schedule(subscriptionFunc0_57);
        java.lang.Class<?> wildcardClass59 = testScheduler48.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler41, (long) '4', schedulerFunc2_47, (java.lang.reflect.AnnotatedElement) wildcardClass59);
        long long61 = testScheduler41.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(subscription58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction13.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction13.isCancelled;
        long long18 = strComparableTimedAction13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction13.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_19);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler20.schedule(subscriptionFunc0_29);
        long long31 = testScheduler20.now();
        testScheduler20.triggerActions((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        strComparableTimedAction46.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction46.getisCancelled();
        long long50 = strComparableTimedAction46.time;
        long long51 = strComparableTimedAction46.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction46.isCancelled;
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction46.scheduler;
        java.lang.Class<?> wildcardClass54 = strComparableTimedAction46.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler20, (long) 100, schedulerFunc2_35, (java.io.Serializable) wildcardClass54);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, 100L, schedulerFunc2_19, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction60.getaction();
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableTimedAction60.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertEquals("'" + strComparable62 + "' != '" + "hi!" + "'", strComparable62, "hi!");
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.triggerActions((-1L));
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler12.schedule(subscriptionFunc0_43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription44);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        long long17 = strComparableTimedAction10.time;
        long long18 = strComparableTimedAction10.time;
        strComparableTimedAction10.cancel();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction10.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(subscriptionFunc0_19);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler13.schedule(subscriptionFunc0_21, (long) (byte) 100, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler testScheduler4 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) (byte) 10, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        testScheduler4.triggerActions((long) (byte) 100);
        long long11 = testScheduler4.gettime();
        long long12 = testScheduler4.now();
        long long13 = testScheduler4.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, 10L, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler4.now();
        long long19 = testScheduler4.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler4.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) 0, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        long long29 = strComparableTimedAction28.time;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 0, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = strComparableTimedAction34.action;
        java.lang.Comparable<java.lang.String> strComparable36 = strComparableTimedAction34.state;
        long long37 = strComparableTimedAction34.time;
        int int38 = compareActionsByTime0.compare(strComparableTimedAction28, strComparableTimedAction34);
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction28.getscheduler();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_35);
        org.junit.Assert.assertEquals("'" + strComparable36 + "' != '" + "hi!" + "'", strComparable36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(testScheduler39);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction49.isCancelled;
        long long52 = strComparableTimedAction49.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "hi!" + "'", strComparable50, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        testScheduler21.triggerActions(100L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler21.schedulePeriodically(subscriptionFunc0_24, (long) (byte) 10, (long) 100, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction17.scheduler;
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions((long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (short) 100, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue56 = testScheduler49.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_57 = null;
        rx.Subscription subscription58 = testScheduler49.schedule(schedulerFunc1_57);
        testScheduler49.settime((-1L));
        long long61 = testScheduler49.now();
        testScheduler49.settime((long) (short) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue56);
        org.junit.Assert.assertNotNull(subscription58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction6.cancel();
        strComparableTimedAction6.cancel();
        long long9 = strComparableTimedAction6.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction6.isCancelled;
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean10);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        testScheduler12.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        long long25 = strComparableTimedAction24.gettime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = strComparableTimedAction24.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) '#', schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, 0L, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(testScheduler26);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler16.schedule(subscriptionFunc0_17, (long) (short) 1, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        testScheduler49.settime((long) 0);
        long long55 = testScheduler49.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (short) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_60 = null;
        java.util.concurrent.TimeUnit timeUnit63 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription64 = testScheduler49.schedulePeriodically(action0_60, (long) (byte) 0, (long) (short) -1, timeUnit63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler7.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler7.schedule(schedulerFunc1_27, (long) (short) -1, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 0, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = strComparableTimedAction18.time;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction18.getscheduler();
        testScheduler20.settime(100L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler20.getqueue();
        long long24 = testScheduler20.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_31 = null;
        rx.Subscription subscription32 = testScheduler0.schedule(schedulerFunc1_31);
        long long33 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_42 = null;
        rx.Subscription subscription43 = testScheduler41.schedule(schedulerFunc1_42);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (-1L), schedulerFunc2_35, testScheduler41);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions(35L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(subscription43);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime51.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator53);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = compareActionsByTime49.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableTimedAction9.getstate();
        long long12 = strComparableTimedAction9.time;
        long long13 = strComparableTimedAction9.gettime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = strComparableTimedAction9.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "hi!" + "'", strComparable11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime22.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime21.thenComparing(wildcardTimedActionComparator23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime21.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime21.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime26);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        strComparableTimedAction39.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction39.getisCancelled();
        strComparableTimedAction39.cancel();
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction39.state;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        int int50 = compareActionsByTime26.compare(strComparableTimedAction39, strComparableTimedAction49);
        long long51 = strComparableTimedAction49.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler16, (long) (byte) 1, schedulerFunc2_20, (java.io.Serializable) atomicBoolean53);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue55 = testScheduler16.queue;
        java.util.concurrent.TimeUnit timeUnit57 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler16.advanceTimeBy((long) '4', timeUnit57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue55);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_32 = null;
        rx.Subscription subscription33 = testScheduler30.schedule(subscriptionFunc0_32);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue34 = testScheduler30.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue34);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        testScheduler0.triggerActions(32L);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(action0_17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean9 = strComparableTimedAction4.getisCancelled();
        strComparableTimedAction4.cancel();
        strComparableTimedAction4.cancel();
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction4.scheduler;
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction4.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean9);
        org.junit.Assert.assertNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean14);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction36.getisCancelled();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction36.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue40 = testScheduler39.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction53.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = strComparableTimedAction53.getaction();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction53.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue58 = testScheduler57.getqueue();
        java.lang.Class<?> wildcardClass59 = wildcardTimedActionQueue58.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler39, (long) (byte) -1, schedulerFunc2_42, (java.lang.reflect.AnnotatedElement) wildcardClass59);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler23, (long) (short) 0, schedulerFunc2_25, (java.lang.reflect.AnnotatedElement) wildcardClass59);
        testScheduler23.time = (-1);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_64 = null;
        java.util.concurrent.TimeUnit timeUnit66 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription67 = testScheduler23.schedule(subscriptionFunc0_64, (long) '4', timeUnit66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue40);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "" + "'", strComparable55, "");
        org.junit.Assert.assertNull(schedulerFunc2_56);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        testScheduler47.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler63, 100L, schedulerFunc2_65, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_68 = null;
        rx.Subscription subscription69 = testScheduler63.schedule(schedulerFunc1_68);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass74 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler47, (long) (short) 100, schedulerFunc2_50, (java.lang.reflect.AnnotatedElement) wildcardClass74);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue76 = testScheduler47.getqueue();
        rx.util.functions.Action0 action0_77 = null;
        java.util.concurrent.TimeUnit timeUnit80 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription81 = testScheduler47.schedulePeriodically(action0_77, (long) (short) 100, 0L, timeUnit80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(subscription69);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue76);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        long long13 = strComparableTimedAction11.gettime();
        strComparableTimedAction11.cancel();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.getstate();
        strComparableTimedAction11.cancel();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction11.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.state;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.scheduler;
        long long50 = testScheduler49.gettime();
        testScheduler49.settime(97L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) 1, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = strComparableTimedAction22.gettime();
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction22.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNull(schedulerFunc2_26);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        long long17 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler18.advanceTimeBy((long) (byte) -1, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        long long17 = testScheduler16.time;
        testScheduler16.triggerActions(0L);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) ' ', schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction26.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = strComparableTimedAction26.getaction();
        long long29 = strComparableTimedAction26.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction26.isCancelled;
        java.lang.Class<?> wildcardClass31 = atomicBoolean30.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler16, 35L, schedulerFunc2_21, (java.io.Serializable) wildcardClass31);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler16.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNull(schedulerFunc2_28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) -1, schedulerFunc2_18, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, strComparable23);
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNull(strComparable25);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        strComparableTimedAction16.cancel();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = strComparableTimedAction16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        long long35 = strComparableTimedAction34.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction34.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = strComparableTimedAction34.getaction();
        java.lang.Comparable<java.lang.String> strComparable38 = strComparableTimedAction34.state;
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction34.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction34.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction34.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction34.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_44 = null;
        rx.Subscription subscription45 = testScheduler43.schedule(schedulerFunc1_44);
        testScheduler43.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) 100, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 0, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        int int56 = compareActionsByTime5.compare(strComparableTimedAction34, strComparableTimedAction55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = strComparableTimedAction34.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean36);
        org.junit.Assert.assertNull(schedulerFunc2_37);
        org.junit.Assert.assertEquals("'" + strComparable38 + "' != '" + "" + "'", strComparable38, "");
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(action0_16);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) ' ', schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction35.getisCancelled();
        java.lang.Class<?> wildcardClass37 = strComparableTimedAction35.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler20, 10L, schedulerFunc2_30, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) (-1), schedulerFunc2_19, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, 1L, schedulerFunc2_14, (java.lang.reflect.GenericDeclaration) wildcardClass37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction44.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.scheduler;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertNotNull(testScheduler47);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction13.getscheduler();
        long long21 = testScheduler20.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler20.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, 0L, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime40.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime39.thenComparing(wildcardTimedActionComparator41);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        testScheduler64.triggerActions((long) (byte) 100);
        long long71 = testScheduler64.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler57, (long) '4', schedulerFunc2_63, (rx.Scheduler) testScheduler64);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, 0L, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction76.cancel();
        int int78 = compareActionsByTime27.compare(strComparableTimedAction54, strComparableTimedAction76);
        int int79 = compareActionsByTime5.compare(strComparableTimedAction26, strComparableTimedAction76);
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction76.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue81 = testScheduler80.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_82 = null;
        java.util.concurrent.TimeUnit timeUnit84 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription85 = testScheduler80.schedule(subscriptionFunc0_82, (long) 100, timeUnit84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "" + "'", strComparable56, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue81);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler12.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler12.queue;
        testScheduler12.settime((long) '4');
        testScheduler12.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (short) 0, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeTo(1L, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        testScheduler13.triggerActions((long) (byte) -1);
        testScheduler13.settime(97L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler13.schedulePeriodically(subscriptionFunc0_21, (long) '#', (long) ' ', timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler12.getqueue();
        long long17 = testScheduler12.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (-1L), schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler12.schedulePeriodically(schedulerFunc1_22, (long) 10, (long) (short) 10, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(schedulerFunc1_18);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler15.schedule(schedulerFunc1_20, (long) (byte) 0, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        long long14 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(schedulerFunc1_15);
        long long17 = testScheduler13.time;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler12.schedule(action0_13);
        long long15 = testScheduler12.gettime();
        testScheduler12.settime((long) 'a');
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler12.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction31.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.action;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator50);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler testScheduler58 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) ' ', schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction62.getisCancelled();
        int int64 = compareActionsByTime35.compare(strComparableTimedAction56, strComparableTimedAction62);
        long long65 = strComparableTimedAction56.time;
        int int66 = compareActionsByTime17.compare(strComparableTimedAction31, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_72 = null;
        rx.Subscription subscription73 = testScheduler67.schedule(schedulerFunc1_72);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, 100L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        long long78 = strComparableTimedAction77.time;
        long long79 = strComparableTimedAction77.time;
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction77.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = strComparableTimedAction77.action;
        rx.concurrency.TestScheduler testScheduler82 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_83 = null;
        rx.Subscription subscription84 = testScheduler82.schedule(schedulerFunc1_83);
        testScheduler82.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_88 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction90 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, (long) 100, schedulerFunc2_88, (java.lang.Comparable<java.lang.String>) "");
        int int91 = compareActionsByTime17.compare(strComparableTimedAction77, strComparableTimedAction90);
        rx.concurrency.TestScheduler testScheduler92 = strComparableTimedAction77.scheduler;
        rx.util.functions.Action0 action0_93 = null;
        rx.Subscription subscription94 = testScheduler92.schedule(action0_93);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_95 = null;
        rx.Subscription subscription96 = testScheduler92.schedule(subscriptionFunc0_95);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertEquals("'" + strComparable57 + "' != '" + "" + "'", strComparable57, "");
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(subscription73);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertNull(schedulerFunc2_81);
        org.junit.Assert.assertNotNull(subscription84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(testScheduler92);
        org.junit.Assert.assertNotNull(subscription94);
        org.junit.Assert.assertNotNull(subscription96);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_14, strComparable15);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(schedulerFunc1_19);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction51.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        long long60 = strComparableTimedAction59.gettime();
        int int61 = compareActionsByTime0.compare(strComparableTimedAction51, strComparableTimedAction59);
        long long62 = strComparableTimedAction51.gettime();
        long long63 = strComparableTimedAction51.time;
        long long64 = strComparableTimedAction51.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 32L + "'", long64 == 32L);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        testScheduler13.triggerActions((long) (byte) -1);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(action0_19);
        long long21 = testScheduler13.gettime();
        long long22 = testScheduler13.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler13.schedule(subscriptionFunc0_24);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction27.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, 0L, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_56 = null;
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription60 = testScheduler51.schedulePeriodically(schedulerFunc1_56, (long) (byte) 100, 52L, timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(testScheduler51);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime8.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime20);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime45.compare(strComparableTimedAction50, strComparableTimedAction55);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime33.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = wildcardTimedActionComparator32.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime71 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler77 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler77, (long) (byte) 10, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "");
        int int82 = compareActionsByTime71.compare(strComparableTimedAction76, strComparableTimedAction81);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = compareActionsByTime59.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = compareActionsByTime45.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = wildcardTimedActionComparator7.thenComparing(wildcardTimedActionComparator84);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = wildcardTimedActionComparator84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = wildcardTimedActionComparator86.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator87.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) 0, schedulerFunc2_6, (java.lang.CharSequence) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler0.getqueue();
        testScheduler0.time = '#';
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription16 = testScheduler0.schedulePeriodically(subscriptionFunc0_12, (long) (short) 10, 97L, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        long long14 = strComparableTimedAction11.time;
        long long15 = strComparableTimedAction11.time;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler16.getqueue();
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler16.advanceTimeTo((long) (byte) 100, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        rx.util.functions.Action0 action0_14 = null;
        rx.Subscription subscription15 = testScheduler0.schedule(action0_14);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(action0_23);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler0.schedule(schedulerFunc1_25, (long) '4', timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = wildcardTimedActionComparator43.reversed();
        java.lang.Class<?> wildcardClass45 = wildcardTimedActionComparator44.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        testScheduler13.triggerActions((long) (byte) -1);
        testScheduler13.settime(97L);
        long long21 = testScheduler13.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.settime((long) (byte) 1);
        rx.util.functions.Action0 action0_25 = null;
        rx.Subscription subscription26 = testScheduler12.schedule(action0_25);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime41.thenComparing(wildcardTimedActionComparator43);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.lang.Comparable<java.lang.String> strComparable58 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        testScheduler66.triggerActions((long) (byte) 100);
        long long73 = testScheduler66.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler59, (long) '4', schedulerFunc2_65, (rx.Scheduler) testScheduler66);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, 0L, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction78.cancel();
        int int80 = compareActionsByTime29.compare(strComparableTimedAction56, strComparableTimedAction78);
        rx.concurrency.TestScheduler testScheduler81 = strComparableTimedAction78.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean82 = strComparableTimedAction78.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean83 = strComparableTimedAction78.getisCancelled();
        java.lang.Class<?> wildcardClass84 = atomicBoolean83.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler12, (long) (short) 1, schedulerFunc2_28, (java.io.Serializable) wildcardClass84);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue86 = testScheduler12.queue;
        rx.util.functions.Action0 action0_87 = null;
        java.util.concurrent.TimeUnit timeUnit89 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription90 = testScheduler12.schedule(action0_87, 0L, timeUnit89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription26);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + strComparable58 + "' != '" + "" + "'", strComparable58, "");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(testScheduler81);
        org.junit.Assert.assertNotNull(atomicBoolean82);
        org.junit.Assert.assertNotNull(atomicBoolean83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue86);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        long long28 = strComparableTimedAction27.gettime();
        rx.concurrency.TestScheduler testScheduler29 = strComparableTimedAction27.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction27.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction27.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(testScheduler29);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertNull(schedulerFunc2_31);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        long long8 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.state;
        long long10 = strComparableTimedAction4.gettime();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.getaction();
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        long long19 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(subscriptionFunc0_21);
        long long23 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        long long28 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        long long33 = strComparableTimedAction32.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        testScheduler12.time = '#';
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction22.action;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = strComparableTimedAction22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNull(schedulerFunc2_23);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.isCancelled;
        strComparableTimedAction9.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction9.isCancelled;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(atomicBoolean12);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.time;
        long long81 = testScheduler5.now();
        testScheduler5.triggerActions((long) (byte) 10);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.settime(0L);
        long long13 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction17.isCancelled;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction17.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler19.schedule(schedulerFunc1_20, (long) 100, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        rx.concurrency.TestScheduler testScheduler94 = strComparableTimedAction92.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_95 = null;
        java.util.concurrent.TimeUnit timeUnit97 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription98 = testScheduler94.schedule(schedulerFunc1_95, (long) '#', timeUnit97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(testScheduler94);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        long long18 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 1);
        testScheduler13.triggerActions((long) (-1));
        long long23 = testScheduler13.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler13.schedule(schedulerFunc1_24);
        testScheduler13.time = '#';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler13.queue;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_50 = null;
        rx.Subscription subscription51 = testScheduler41.schedule(action0_50);
        testScheduler41.time = '#';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, 0L, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertNotNull(subscription51);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        testScheduler12.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        int int27 = compareActionsByTime16.compare(strComparableTimedAction21, strComparableTimedAction26);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction26.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = strComparableTimedAction26.action;
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction26.getscheduler();
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction26.getscheduler();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction26.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableTimedAction39.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = strComparableTimedAction39.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction39.isCancelled;
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction39.scheduler;
        testScheduler43.settime(1L);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler32, (long) 0, schedulerFunc2_34, testScheduler43);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (short) 0, schedulerFunc2_15, (java.lang.Object) testSchedulerTimedAction46);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertNull(schedulerFunc2_29);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertEquals("'" + strComparable40 + "' != '" + "" + "'", strComparable40, "");
        org.junit.Assert.assertNull(schedulerFunc2_41);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler26.schedule(schedulerFunc1_27);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        long long12 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction5.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNull(schedulerFunc2_14);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.state;
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNotNull(testScheduler8);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        int int22 = compareActionsByTime11.compare(strComparableTimedAction16, strComparableTimedAction21);
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler23, 100L, schedulerFunc2_25, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler23.schedule(schedulerFunc1_28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, 10L, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        long long34 = strComparableTimedAction33.gettime();
        strComparableTimedAction33.cancel();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction46.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction46.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction46.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction46.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction46.isCancelled;
        int int53 = compareActionsByTime0.compare(strComparableTimedAction33, strComparableTimedAction46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        long long67 = testScheduler66.gettime();
        testScheduler66.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue70 = testScheduler66.getqueue();
        long long71 = testScheduler66.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (-1L), schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = compareActionsByTime0.compare(strComparableTimedAction75, strComparableTimedAction76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions(10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_5 = null;
        rx.Subscription subscription6 = testScheduler0.schedule(schedulerFunc1_5);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        long long11 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        long long13 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.getisCancelled();
        java.lang.Class<?> wildcardClass15 = strComparableTimedAction10.getClass();
        org.junit.Assert.assertNotNull(subscription6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) 100, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction21.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler22.schedule(subscriptionFunc0_23, (long) 'a', timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(testScheduler22);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler19.schedule(subscriptionFunc0_28);
        rx.util.functions.Action0 action0_30 = null;
        rx.Subscription subscription31 = testScheduler19.schedule(action0_30);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, 100L, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue36 = testScheduler19.queue;
        long long37 = testScheduler19.now();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler16, (long) 0, schedulerFunc2_18, (rx.Scheduler) testScheduler19);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_39 = null;
        rx.Subscription subscription40 = testScheduler19.schedule(schedulerFunc1_39);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(subscription40);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        long long17 = strComparableTimedAction10.gettime();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) 1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler19.schedulePeriodically(schedulerFunc1_24, (long) (-1), 52L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.time = (short) 0;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.getqueue();
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) 100, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler13.getqueue();
        testScheduler13.triggerActions(97L);
        long long24 = testScheduler13.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue74 = testScheduler0.getqueue();
        testScheduler0.time = (byte) -1;
        long long77 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = strComparableTimedAction81.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNull(schedulerFunc2_82);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue5 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction17.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction17.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) '4');
        rx.util.functions.Action0 action0_4 = null;
        java.util.concurrent.TimeUnit timeUnit7 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription8 = testScheduler0.schedulePeriodically(action0_4, (long) (short) 10, (long) (short) -1, timeUnit7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction29.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction29.getaction();
        strComparableTimedAction29.cancel();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.scheduler;
        long long34 = strComparableTimedAction29.gettime();
        strComparableTimedAction29.cancel();
        long long36 = strComparableTimedAction29.gettime();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35L + "'", long36 == 35L);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction59.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction59.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean67 = strComparableTimedAction59.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertNotNull(atomicBoolean67);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        long long17 = testScheduler13.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(schedulerFunc1_18);
        long long20 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime23.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = strComparableTimedAction35.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean39 = strComparableTimedAction35.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableTimedAction35.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        strComparableTimedAction51.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        strComparableTimedAction51.cancel();
        long long56 = strComparableTimedAction51.gettime();
        int int57 = compareActionsByTime23.compare(strComparableTimedAction35, strComparableTimedAction51);
        java.lang.Class<?> wildcardClass58 = strComparableTimedAction51.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler13, (long) (byte) 1, schedulerFunc2_22, (java.lang.reflect.GenericDeclaration) wildcardClass58);
        long long60 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime63 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        int int74 = compareActionsByTime63.compare(strComparableTimedAction68, strComparableTimedAction73);
        strComparableTimedAction73.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction73.getisCancelled();
        long long77 = strComparableTimedAction73.time;
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction73.getscheduler();
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction73.scheduler;
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction73.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = strComparableTimedAction73.action;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) (short) 100, schedulerFunc2_62, (java.lang.Object) strComparableTimedAction73);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 35L, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNull(schedulerFunc2_38);
        org.junit.Assert.assertNotNull(atomicBoolean39);
        org.junit.Assert.assertEquals("'" + strComparable40 + "' != '" + "" + "'", strComparable40, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "" + "'", strComparable80, "");
        org.junit.Assert.assertNull(schedulerFunc2_81);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) -1, schedulerFunc2_18, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, strComparable23);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        long long48 = strComparableTimedAction44.time;
        long long49 = strComparableTimedAction44.gettime();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = strComparableTimedAction44.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction44.getisCancelled();
        long long54 = strComparableTimedAction44.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNull(schedulerFunc2_52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) -1, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 100L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction59.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = strComparableTimedAction59.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler60);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        long long19 = strComparableTimedAction10.gettime();
        long long20 = strComparableTimedAction10.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        long long23 = strComparableTimedAction22.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction22.getisCancelled();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(atomicBoolean24);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction11.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction11.getaction();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_14);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        long long14 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction16.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.getscheduler();
        long long19 = testScheduler18.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) -1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler18.time;
        long long25 = testScheduler18.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        strComparableTimedAction19.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        testScheduler24.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler24.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler24.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler24.schedulePeriodically(schedulerFunc1_28, 97L, 0L, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction51.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        long long60 = strComparableTimedAction59.gettime();
        int int61 = compareActionsByTime0.compare(strComparableTimedAction51, strComparableTimedAction59);
        long long62 = strComparableTimedAction51.gettime();
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction51.getstate();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction51.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "hi!" + "'", strComparable63, "hi!");
        org.junit.Assert.assertNull(testScheduler64);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction27.isCancelled;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction27.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, 32L, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler53.advanceTimeTo((long) '#', timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(testScheduler53);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler7.settime((long) (short) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler7.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler7.schedule(schedulerFunc1_15);
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler7.advanceTimeBy((long) (byte) -1, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, 35L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler19.schedule(subscriptionFunc0_24);
        rx.util.functions.Action0 action0_26 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler19.schedule(action0_26, (long) 1, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 100L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.time = (short) 10;
        rx.util.functions.Action0 action0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler15.schedulePeriodically(action0_22, (long) (byte) 0, (long) (byte) 100, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 1, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler30.time = 32L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_37 = null;
        java.util.concurrent.TimeUnit timeUnit40 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription41 = testScheduler30.schedulePeriodically(subscriptionFunc0_37, 0L, 32L, timeUnit40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction16.isCancelled;
        strComparableTimedAction16.cancel();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction16.action;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, 10L, schedulerFunc2_11, strComparableTimedAction16);
        strComparableTimedAction16.cancel();
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction16.scheduler;
        long long27 = strComparableTimedAction16.gettime();
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNull(testScheduler22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        rx.Subscription subscription36 = testScheduler0.schedule(subscriptionFunc0_35);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler0.schedule(schedulerFunc1_37);
        testScheduler0.time = (-1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue41 = testScheduler0.queue;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue41);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        long long19 = testScheduler13.time;
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler13.schedule(action0_20);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.getqueue();
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo(100L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = wildcardTimedActionComparator24.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        long long19 = testScheduler16.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler16.schedule(schedulerFunc1_20);
        long long22 = testScheduler16.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler16.schedule(schedulerFunc1_23);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        long long47 = strComparableTimedAction44.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction44.action;
        long long49 = strComparableTimedAction44.time;
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction44.action;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction44.scheduler;
        testScheduler52.settime((long) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        long long59 = strComparableTimedAction58.gettime();
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction58.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_61 = null;
        java.util.concurrent.TimeUnit timeUnit64 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription65 = testScheduler60.schedulePeriodically(schedulerFunc1_61, (long) (-1), (long) 'a', timeUnit64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(testScheduler60);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction24.scheduler;
        long long26 = strComparableTimedAction24.gettime();
        long long27 = strComparableTimedAction24.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator1 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime2 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler3 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler3, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        int int13 = compareActionsByTime2.compare(strComparableTimedAction7, strComparableTimedAction12);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction12.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction12.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction12.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction12.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime18.compare(strComparableTimedAction23, strComparableTimedAction28);
        strComparableTimedAction28.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.getisCancelled();
        strComparableTimedAction28.cancel();
        long long33 = strComparableTimedAction28.gettime();
        int int34 = compareActionsByTime0.compare(strComparableTimedAction12, strComparableTimedAction28);
        strComparableTimedAction12.cancel();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = strComparableTimedAction12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        testScheduler0.time = '4';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler0.schedule(schedulerFunc1_23, (long) 100, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) ' ', schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction11.getaction();
        long long14 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_6, (java.io.Serializable) atomicBoolean16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(schedulerFunc1_19);
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler0.schedulePeriodically(action0_21, (long) 'a', (long) (byte) -1, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        testScheduler12.triggerActions(97L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 1, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction42.getscheduler();
        java.lang.Class<?> wildcardClass44 = testScheduler43.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler18.schedulePeriodically(subscriptionFunc0_19, 32L, 1L, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction31.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction31.getaction();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction21.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        long long32 = strComparableTimedAction21.time;
        long long33 = strComparableTimedAction21.time;
        java.lang.Comparable<java.lang.String> strComparable34 = strComparableTimedAction21.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable34 + "' != '" + "" + "'", strComparable34, "");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        long long17 = testScheduler16.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler16.schedule(schedulerFunc1_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) -1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction23.action;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction23.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.getaction();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction23.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator13 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction18.getaction();
        long long21 = strComparableTimedAction18.time;
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction18.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction35.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = strComparableTimedAction35.action;
        java.lang.Comparable<java.lang.String> strComparable39 = strComparableTimedAction35.state;
        long long40 = strComparableTimedAction35.time;
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction35.state;
        int int42 = compareActionsByTime0.compare(strComparableTimedAction18, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction35.getscheduler();
        testScheduler43.time = 35L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator13);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(atomicBoolean24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNull(schedulerFunc2_38);
        org.junit.Assert.assertEquals("'" + strComparable39 + "' != '" + "" + "'", strComparable39, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(testScheduler43);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        long long18 = testScheduler13.time;
        testScheduler13.settime((long) (byte) 1);
        testScheduler13.settime((long) 1);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction29.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction29.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction29.isCancelled;
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (byte) -1, schedulerFunc2_24, (rx.Scheduler) testScheduler33);
        testScheduler13.time = (short) 10;
        testScheduler13.triggerActions((long) (byte) -1);
        testScheduler13.triggerActions();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        long long15 = strComparableTimedAction13.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.scheduler;
        long long17 = testScheduler16.gettime();
        long long18 = testScheduler16.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = wildcardTimedActionComparator42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = wildcardTimedActionComparator44.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator44.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = wildcardTimedActionComparator46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator47.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = wildcardTimedActionComparator47.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.time;
        long long13 = testScheduler0.now();
        testScheduler0.triggerActions();
        java.util.concurrent.TimeUnit timeUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) '#', timeUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        testScheduler12.time = '#';
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean24 = strComparableTimedAction22.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = strComparableTimedAction22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(atomicBoolean24);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = wildcardTimedActionComparator30.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = compareActionsByTime32.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = compareActionsByTime58.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator60 = compareActionsByTime57.thenComparing(wildcardTimedActionComparator59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = wildcardTimedActionComparator59.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator59.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime62);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator56.thenComparing(wildcardTimedActionComparator74);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime76 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime77 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = compareActionsByTime77.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = compareActionsByTime76.thenComparing(wildcardTimedActionComparator78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = wildcardTimedActionComparator56.thenComparing(wildcardTimedActionComparator78);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime81 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = wildcardTimedActionComparator56.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime81);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime83 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime84 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = compareActionsByTime84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = compareActionsByTime83.thenComparing(wildcardTimedActionComparator85);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = compareActionsByTime83.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime88 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = compareActionsByTime88.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = compareActionsByTime83.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = wildcardTimedActionComparator56.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime83);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = wildcardTimedActionComparator56.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator30.thenComparing(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator60);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler20.schedule(subscriptionFunc0_29);
        long long31 = testScheduler20.now();
        testScheduler20.triggerActions((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        strComparableTimedAction46.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction46.getisCancelled();
        long long50 = strComparableTimedAction46.time;
        long long51 = strComparableTimedAction46.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction46.isCancelled;
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction46.scheduler;
        java.lang.Class<?> wildcardClass54 = strComparableTimedAction46.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler20, (long) 100, schedulerFunc2_35, (java.io.Serializable) wildcardClass54);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, 100L, schedulerFunc2_19, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        testScheduler0.triggerActions((long) (byte) 0);
        long long59 = testScheduler0.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction13.action;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription20 = testScheduler16.schedule(subscriptionFunc0_17, 100L, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (byte) 0;
        long long52 = testScheduler49.now();
        rx.util.functions.Action0 action0_53 = null;
        java.util.concurrent.TimeUnit timeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription56 = testScheduler49.schedule(action0_53, 10L, timeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        long long12 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (byte) -1, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.settime((-1L));
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(subscriptionFunc0_13);
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler0.time;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 0, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        testScheduler0.triggerActions(1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.getqueue();
        long long23 = testScheduler0.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler0.schedule(subscriptionFunc0_24);
        rx.util.functions.Action0 action0_26 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler0.schedulePeriodically(action0_26, (long) (short) -1, (long) '#', timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction30.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction30.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        int int49 = compareActionsByTime38.compare(strComparableTimedAction43, strComparableTimedAction48);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime26.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime38);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = wildcardTimedActionComparator25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime38);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime66.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime65.thenComparing(wildcardTimedActionComparator67);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = compareActionsByTime53.thenComparing(wildcardTimedActionComparator68);
        rx.concurrency.TestScheduler testScheduler70 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, (long) (byte) 10, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableTimedAction74.getstate();
        rx.concurrency.TestScheduler testScheduler76 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler76, (long) ' ', schedulerFunc2_78, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean81 = strComparableTimedAction80.getisCancelled();
        int int82 = compareActionsByTime53.compare(strComparableTimedAction74, strComparableTimedAction80);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = compareActionsByTime53.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = wildcardTimedActionComparator83.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = wildcardTimedActionComparator84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = wildcardTimedActionComparator52.thenComparing(wildcardTimedActionComparator85);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertEquals("'" + strComparable75 + "' != '" + "" + "'", strComparable75, "");
        org.junit.Assert.assertNotNull(atomicBoolean81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        long long17 = testScheduler16.time;
        long long18 = testScheduler16.now();
        testScheduler16.settime(0L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler16.schedule(subscriptionFunc0_21);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction49.isCancelled;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = strComparableTimedAction49.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "hi!" + "'", strComparable50, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean51);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        testScheduler0.time = 97L;
        testScheduler0.triggerActions(0L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.getqueue();
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (byte) 0, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        long long12 = testScheduler11.gettime();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(subscriptionFunc0_15);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(action0_17);
        long long19 = testScheduler14.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler14.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, (long) 'a', schedulerFunc2_22, (java.lang.CharSequence) "hi!");
        long long25 = testScheduler14.time;
        long long26 = testScheduler14.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, (long) (byte) 10, schedulerFunc2_28, (java.lang.CharSequence) "");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler14.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction18.getstate();
        long long20 = strComparableTimedAction18.gettime();
        strComparableTimedAction18.cancel();
        long long22 = strComparableTimedAction18.time;
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = strComparableTimedAction18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "hi!" + "'", strComparable23, "hi!");
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_10 = null;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, (long) (short) 100, schedulerFunc2_10, atomicBoolean11);
        long long13 = testScheduler0.time;
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction21.isCancelled;
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction21.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler32.queue;
        rx.util.functions.Action0 action0_34 = null;
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription37 = testScheduler32.schedule(action0_34, (-1L), timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = strComparableTimedAction22.gettime();
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler25.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(testScheduler25);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.getstate();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.getscheduler();
        rx.util.functions.Action0 action0_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(action0_50);
        testScheduler49.settime((long) (short) 0);
        testScheduler49.time = 35L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue56 = testScheduler49.queue;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue56);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_81 = null;
        rx.Subscription subscription82 = testScheduler71.schedule(subscriptionFunc0_81);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue83 = testScheduler71.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(subscription82);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue83);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        rx.Subscription subscription36 = testScheduler0.schedule(subscriptionFunc0_35);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler0.schedule(schedulerFunc1_37);
        testScheduler0.time = (-1L);
        testScheduler0.time = 32L;
        rx.util.functions.Action0 action0_43 = null;
        java.util.concurrent.TimeUnit timeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription47 = testScheduler0.schedulePeriodically(action0_43, 52L, (long) 1, timeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        long long17 = strComparableTimedAction10.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler20.schedule(action0_21, (long) (short) 0, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(testScheduler20);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.queue;
        long long18 = testScheduler13.gettime();
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeBy((long) ' ', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue5 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_6 = null;
        rx.Subscription subscription7 = testScheduler0.schedule(schedulerFunc1_6);
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue5);
        org.junit.Assert.assertNotNull(subscription7);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        testScheduler13.triggerActions((long) (short) -1);
        testScheduler13.time = (byte) 0;
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler13.schedule(action0_23);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        long long23 = strComparableTimedAction19.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "hi!" + "'", strComparable21, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        long long30 = strComparableTimedAction28.time;
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction28.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (short) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 1, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = strComparableTimedAction39.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = strComparableTimedAction39.action;
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction39.getscheduler();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertNull(schedulerFunc2_40);
        org.junit.Assert.assertNull(schedulerFunc2_41);
        org.junit.Assert.assertNotNull(testScheduler42);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        long long16 = testScheduler15.gettime();
        testScheduler15.time = 'a';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler15.queue;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeTo((long) 100, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction13.getstate();
        strComparableTimedAction13.cancel();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "hi!" + "'", strComparable14, "hi!");
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, 10L, schedulerFunc2_21, "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler0.schedule(schedulerFunc1_24);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction15.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strComparableTimedAction15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(atomicBoolean19);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.time = (short) 0;
        long long13 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler0.schedulePeriodically(subscriptionFunc0_15, (-1L), 52L, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.time = 10;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler0.queue;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo(52L, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(schedulerFunc1_25);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.now();
        long long81 = testScheduler5.now();
        long long82 = testScheduler5.time;
        java.util.concurrent.TimeUnit timeUnit84 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler5.advanceTimeBy((long) (short) 100, timeUnit84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction29.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction29.getaction();
        strComparableTimedAction29.cancel();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.scheduler;
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction29.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        rx.Subscription subscription36 = testScheduler34.schedule(subscriptionFunc0_35);
        testScheduler34.settime(35L);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler34.triggerActions((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertNotNull(subscription36);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(subscriptionFunc0_18);
        long long20 = testScheduler17.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler17.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) 'a', schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.advanceTimeTo(0L, timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction31.state;
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction31.scheduler;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction31.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction31.getstate();
        long long52 = strComparableTimedAction31.gettime();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction31.state;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        long long19 = testScheduler18.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler18.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime36.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime23.thenComparing(wildcardTimedActionComparator38);
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction44.getstate();
        rx.concurrency.TestScheduler testScheduler46 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) ' ', schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction50.getisCancelled();
        int int52 = compareActionsByTime23.compare(strComparableTimedAction44, strComparableTimedAction50);
        long long53 = strComparableTimedAction50.time;
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableTimedAction50.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction50.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler18, (long) (short) 10, schedulerFunc2_22, (java.io.Serializable) atomicBoolean55);
        java.util.concurrent.TimeUnit timeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler18.advanceTimeTo((long) 100, timeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable54 + "' != '" + "hi!" + "'", strComparable54, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean55);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_94 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler95 = strComparableTimedAction71.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue96 = testScheduler95.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_94);
        org.junit.Assert.assertNotNull(testScheduler95);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue96);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        long long13 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction17.getisCancelled();
        strComparableTimedAction17.cancel();
        long long20 = strComparableTimedAction17.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(schedulerFunc1_11);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.getqueue();
        testScheduler0.settime((long) 100);
        testScheduler0.time = 'a';
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.triggerActions();
        long long5 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction9.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableTimedAction9.getstate();
        long long12 = strComparableTimedAction9.time;
        long long13 = strComparableTimedAction9.gettime();
        long long14 = strComparableTimedAction9.time;
        long long15 = strComparableTimedAction9.time;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "hi!" + "'", strComparable11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        long long29 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        java.util.concurrent.TimeUnit timeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription38 = testScheduler0.schedule(subscriptionFunc0_35, 100L, timeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.action;
        long long21 = strComparableTimedAction10.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction51.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        long long60 = strComparableTimedAction59.gettime();
        int int61 = compareActionsByTime0.compare(strComparableTimedAction51, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction59.isCancelled;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = strComparableTimedAction59.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(atomicBoolean62);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = strComparableTimedAction22.gettime();
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction22.scheduler;
        long long26 = testScheduler25.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction29.getaction();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableTimedAction29.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction29.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableTimedAction29.state;
        strComparableTimedAction29.cancel();
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction29.getstate();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertEquals("'" + strComparable31 + "' != '" + "hi!" + "'", strComparable31, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertEquals("'" + strComparable33 + "' != '" + "hi!" + "'", strComparable33, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "hi!" + "'", strComparable35, "hi!");
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        long long25 = testScheduler0.gettime();
        long long26 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(subscriptionFunc0_28);
        testScheduler0.settime((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.state;
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction10.getaction();
        strComparableTimedAction10.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_9, (long) (-1), timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(action0_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(schedulerFunc1_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_18, strComparable19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(action0_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime(97L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler0.queue;
        testScheduler0.time = 97L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue32 = testScheduler0.queue;
        rx.util.functions.Action0 action0_33 = null;
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription37 = testScheduler0.schedulePeriodically(action0_33, 100L, (long) (byte) 10, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue32);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction54.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction54.getisCancelled();
        long long61 = strComparableTimedAction54.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "hi!" + "'", strComparable59, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.settime((long) (short) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '4', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_13, atomicBoolean21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime40.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime39.thenComparing(wildcardTimedActionComparator41);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        java.lang.Comparable<java.lang.String> strComparable56 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        testScheduler64.triggerActions((long) (byte) 100);
        long long71 = testScheduler64.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler57, (long) '4', schedulerFunc2_63, (rx.Scheduler) testScheduler64);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, 0L, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction76.cancel();
        int int78 = compareActionsByTime27.compare(strComparableTimedAction54, strComparableTimedAction76);
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction76.scheduler;
        long long80 = testScheduler79.gettime();
        rx.util.functions.Action0 action0_81 = null;
        rx.Subscription subscription82 = testScheduler79.schedule(action0_81);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) -1, schedulerFunc2_26, (rx.Scheduler) testScheduler79);
        testScheduler79.settime((long) (short) 1);
        java.util.concurrent.TimeUnit timeUnit87 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler79.advanceTimeBy(10L, timeUnit87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + strComparable56 + "' != '" + "" + "'", strComparable56, "");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(subscription82);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler12.schedule(action0_13);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (long) 100, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass34);
        rx.util.functions.Action0 action0_38 = null;
        java.util.concurrent.TimeUnit timeUnit41 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription42 = testScheduler0.schedulePeriodically(action0_38, (long) 'a', (long) (short) -1, timeUnit41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator22.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = wildcardTimedActionComparator18.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) '4', schedulerFunc2_15, (java.lang.Object) wildcardTimedActionComparator38);
        testScheduler13.triggerActions();
        testScheduler13.triggerActions((long) (short) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_43 = null;
        rx.Subscription subscription44 = testScheduler13.schedule(schedulerFunc1_43);
        testScheduler13.settime((long) '#');
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_47 = null;
        rx.Subscription subscription48 = testScheduler13.schedule(subscriptionFunc0_47);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertNotNull(subscription48);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.queue;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy((long) (short) -1, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }
}

