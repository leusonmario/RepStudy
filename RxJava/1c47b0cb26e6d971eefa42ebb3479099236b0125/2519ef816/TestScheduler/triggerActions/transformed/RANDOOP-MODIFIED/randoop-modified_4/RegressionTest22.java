import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler14.now();
        testScheduler14.settime(35L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, (long) 1, schedulerFunc2_25, (java.lang.CharSequence) "hi!");
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler14.schedule(action0_28);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler14.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = strComparableTimedAction13.time;
        long long15 = strComparableTimedAction13.gettime();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction13.state;
        long long17 = strComparableTimedAction13.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction13.isCancelled;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "hi!" + "'", strComparable16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean18);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction56.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction56.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction56.isCancelled;
        rx.concurrency.TestScheduler testScheduler67 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 0, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler73 = strComparableTimedAction71.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableTimedAction71.getstate();
        int int75 = compareActionsByTime49.compare(strComparableTimedAction56, strComparableTimedAction71);
        rx.concurrency.TestScheduler testScheduler76 = strComparableTimedAction71.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = strComparableTimedAction71.action;
        long long78 = strComparableTimedAction71.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertNull(schedulerFunc2_72);
        org.junit.Assert.assertNull(testScheduler73);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "hi!" + "'", strComparable74, "hi!");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNull(testScheduler76);
        org.junit.Assert.assertNull(schedulerFunc2_77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = wildcardTimedActionComparator43.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime46.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime45.thenComparing(wildcardTimedActionComparator47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime45.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime45.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime50);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        strComparableTimedAction63.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction63.getisCancelled();
        strComparableTimedAction63.cancel();
        java.lang.Comparable<java.lang.String> strComparable68 = strComparableTimedAction63.state;
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        int int74 = compareActionsByTime50.compare(strComparableTimedAction63, strComparableTimedAction73);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = compareActionsByTime50.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = wildcardTimedActionComparator43.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime50);
        java.lang.Class<?> wildcardClass78 = wildcardTimedActionComparator43.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertEquals("'" + strComparable68 + "' != '" + "" + "'", strComparable68, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (short) 0, schedulerFunc2_19, strComparable20);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction5.getisCancelled();
        strComparableTimedAction5.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction5.getaction();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.getscheduler();
        strComparableTimedAction5.cancel();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction5.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = strComparableTimedAction5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        testScheduler30.triggerActions((long) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue34 = testScheduler30.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue35 = testScheduler30.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue34);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue35);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(subscriptionFunc0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        long long21 = testScheduler12.time;
        testScheduler12.time = (byte) 100;
        rx.util.functions.Action0 action0_24 = null;
        java.util.concurrent.TimeUnit timeUnit27 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription28 = testScheduler12.schedulePeriodically(action0_24, 0L, (long) '#', timeUnit27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        testScheduler52.triggerActions((long) (byte) 100);
        long long59 = testScheduler52.gettime();
        long long60 = testScheduler52.now();
        testScheduler52.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 100, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler52.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) -1, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        testScheduler72.triggerActions((long) (byte) 100);
        long long79 = testScheduler72.gettime();
        long long80 = testScheduler72.now();
        testScheduler72.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 100, schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler86 = strComparableTimedAction85.scheduler;
        rx.util.functions.Action0 action0_87 = null;
        rx.Subscription subscription88 = testScheduler86.schedule(action0_87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler86, (long) 10, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        int int93 = compareActionsByTime0.compare(strComparableTimedAction71, strComparableTimedAction92);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_94 = strComparableTimedAction71.getaction();
        strComparableTimedAction71.cancel();
        long long96 = strComparableTimedAction71.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(testScheduler86);
        org.junit.Assert.assertNotNull(subscription88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        long long13 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        long long15 = strComparableTimedAction10.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler13.getqueue();
        long long23 = testScheduler13.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 1, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler13.schedule(subscriptionFunc0_28);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        java.util.concurrent.TimeUnit timeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription33 = testScheduler13.schedule(subscriptionFunc0_30, (long) (short) 100, timeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 10;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(subscriptionFunc0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 100, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.queue;
        long long24 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler13.schedulePeriodically(schedulerFunc1_25, 97L, (long) (short) -1, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime6.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime5.thenComparing(wildcardTimedActionComparator7);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = wildcardTimedActionComparator7.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        int int21 = compareActionsByTime10.compare(strComparableTimedAction15, strComparableTimedAction20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator7.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = wildcardTimedActionComparator4.thenComparing(wildcardTimedActionComparator22);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime36);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime62.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = compareActionsByTime61.thenComparing(wildcardTimedActionComparator63);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = wildcardTimedActionComparator4.thenComparing(wildcardTimedActionComparator64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = wildcardTimedActionComparator4.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        testScheduler15.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime45.compare(strComparableTimedAction50, strComparableTimedAction55);
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction50.getscheduler();
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction50.getscheduler();
        strComparableTimedAction50.cancel();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction64.getscheduler();
        int int66 = compareActionsByTime20.compare(strComparableTimedAction50, strComparableTimedAction64);
        java.lang.Class<?> wildcardClass67 = strComparableTimedAction50.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) 'a', schedulerFunc2_19, (java.lang.reflect.AnnotatedElement) wildcardClass67);
        long long69 = testScheduler15.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(testScheduler58);
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        long long19 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(subscriptionFunc0_21);
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(action0_23);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(action0_23);
        testScheduler12.settime((long) (short) 0);
        rx.util.functions.Action0 action0_27 = null;
        rx.Subscription subscription28 = testScheduler12.schedule(action0_27);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_29 = null;
        java.util.concurrent.TimeUnit timeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription33 = testScheduler12.schedulePeriodically(schedulerFunc1_29, (long) (short) 100, (long) (byte) -1, timeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        long long30 = strComparableTimedAction27.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction27.getaction();
        long long32 = strComparableTimedAction27.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long13 = testScheduler0.now();
        long long14 = testScheduler0.now();
        java.lang.Class<?> wildcardClass15 = testScheduler0.getClass();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction30.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.action;
        long long50 = strComparableTimedAction30.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = strComparableTimedAction30.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNull(schedulerFunc2_52);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction20.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNull(schedulerFunc2_21);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction12.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction12.getscheduler();
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        long long20 = strComparableTimedAction19.time;
        long long21 = strComparableTimedAction19.time;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(subscriptionFunc0_28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction33.isCancelled;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(atomicBoolean34);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        testScheduler12.time = 'a';
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(subscriptionFunc0_24);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler12.schedule(subscriptionFunc0_26);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler12.schedulePeriodically(schedulerFunc1_28, (long) 'a', (long) 10, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(subscription27);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime37.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime36.thenComparing(wildcardTimedActionComparator38);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator39);
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableTimedAction45.getstate();
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        int int53 = compareActionsByTime24.compare(strComparableTimedAction45, strComparableTimedAction51);
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction45.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 32L, schedulerFunc2_23, (rx.Scheduler) testScheduler54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler0.schedule(subscriptionFunc0_56);
        rx.util.functions.Action0 action0_58 = null;
        rx.Subscription subscription59 = testScheduler0.schedule(action0_58);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_64 = null;
        rx.Subscription subscription65 = testScheduler0.schedule(schedulerFunc1_64);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue66 = testScheduler0.getqueue();
        java.util.concurrent.TimeUnit timeUnit68 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (byte) -1, timeUnit68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertEquals("'" + strComparable46 + "' != '" + "" + "'", strComparable46, "");
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertNotNull(subscription59);
        org.junit.Assert.assertNotNull(subscription65);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue66);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        testScheduler0.time = 10;
        testScheduler0.triggerActions();
        long long21 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.getqueue();
        long long16 = testScheduler13.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.isCancelled;
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction49.getscheduler();
        long long55 = testScheduler54.now();
        testScheduler54.triggerActions((long) 10);
        testScheduler54.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_59 = null;
        java.util.concurrent.TimeUnit timeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription62 = testScheduler54.schedule(schedulerFunc1_59, 32L, timeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        long long19 = testScheduler13.time;
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler13.schedule(action0_20);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler13.schedule(subscriptionFunc0_22);
        long long24 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler13.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.getisCancelled();
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        strComparableTimedAction4.cancel();
        long long10 = strComparableTimedAction4.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.action;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNull(testScheduler8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_11);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, 100L, schedulerFunc2_16, (java.lang.CharSequence) "");
        long long19 = testScheduler14.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        long long23 = testScheduler22.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler22.schedule(schedulerFunc1_24);
        java.lang.Class<?> wildcardClass26 = testScheduler22.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler14, (long) 10, schedulerFunc2_21, (java.io.Serializable) wildcardClass26);
        long long28 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (short) -1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableTimedAction32.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable33 + "' != '" + "" + "'", strComparable33, "");
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction28.cancel();
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction28.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(atomicBoolean31);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(schedulerFunc1_16);
        rx.util.functions.Action0 action0_18 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler0.schedule(action0_18, (long) 'a', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertNotNull(subscription17);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator22.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = wildcardTimedActionComparator18.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) '4', schedulerFunc2_15, (java.lang.Object) wildcardTimedActionComparator38);
        testScheduler13.triggerActions();
        testScheduler13.triggerActions((long) (short) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        java.lang.Comparable<java.lang.String> strComparable45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_44, strComparable45);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_51 = null;
        java.util.concurrent.TimeUnit timeUnit54 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription55 = testScheduler13.schedulePeriodically(schedulerFunc1_51, (long) (short) 1, 35L, timeUnit54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = testScheduler20.now();
        rx.util.functions.Action0 action0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler20.schedulePeriodically(action0_22, (long) (short) 0, 1L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        long long26 = testScheduler7.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) '4', schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue31 = testScheduler7.getqueue();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue31);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler12.schedule(subscriptionFunc0_43);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue45 = testScheduler12.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_46 = null;
        rx.Subscription subscription47 = testScheduler12.schedule(schedulerFunc1_46);
        testScheduler12.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 35L, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue45);
        org.junit.Assert.assertNotNull(subscription47);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.scheduler;
        testScheduler14.time = (short) 10;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.time = 10L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        long long56 = testScheduler49.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction64.getscheduler();
        long long72 = testScheduler71.gettime();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, 10L, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction78.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = strComparableTimedAction78.getaction();
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableTimedAction78.state;
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction78.scheduler;
        testScheduler82.triggerActions();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler49, 10L, schedulerFunc2_58, testScheduler82);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        java.lang.Comparable<java.lang.String> strComparable87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) 'a', schedulerFunc2_86, strComparable87);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (-1), schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_93 = null;
        rx.Subscription subscription94 = testScheduler49.schedule(subscriptionFunc0_93);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertNull(schedulerFunc2_80);
        org.junit.Assert.assertEquals("'" + strComparable81 + "' != '" + "hi!" + "'", strComparable81, "hi!");
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertNotNull(subscription94);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        long long50 = strComparableTimedAction37.time;
        long long51 = strComparableTimedAction37.gettime();
        strComparableTimedAction37.cancel();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction37.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 52L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        long long8 = strComparableTimedAction4.time;
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction4.action;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction4.getstate();
        strComparableTimedAction4.cancel();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = 32L;
        testScheduler12.time = (short) -1;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        long long2 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(subscriptionFunc0_7);
        long long9 = testScheduler0.gettime();
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy(97L, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        int int53 = compareActionsByTime42.compare(strComparableTimedAction47, strComparableTimedAction52);
        java.lang.Comparable<java.lang.String> strComparable54 = strComparableTimedAction52.getstate();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler testScheduler62 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, (long) (byte) 10, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "");
        testScheduler62.triggerActions((long) (byte) 100);
        long long69 = testScheduler62.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler55, (long) '4', schedulerFunc2_61, (rx.Scheduler) testScheduler62);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler62, 0L, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction74.cancel();
        int int76 = compareActionsByTime25.compare(strComparableTimedAction52, strComparableTimedAction74);
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction52.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime78 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler79 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler79, (long) (byte) 10, schedulerFunc2_81, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler84 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler84, (long) (byte) 10, schedulerFunc2_86, (java.lang.Comparable<java.lang.String>) "");
        int int89 = compareActionsByTime78.compare(strComparableTimedAction83, strComparableTimedAction88);
        java.lang.Comparable<java.lang.String> strComparable90 = strComparableTimedAction88.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_91 = strComparableTimedAction88.getaction();
        int int92 = compareActionsByTime12.compare(strComparableTimedAction52, strComparableTimedAction88);
        rx.concurrency.TestScheduler testScheduler93 = strComparableTimedAction52.getscheduler();
        java.util.concurrent.TimeUnit timeUnit95 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler93.advanceTimeTo((long) 'a', timeUnit95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + strComparable54 + "' != '" + "" + "'", strComparable54, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + strComparable90 + "' != '" + "" + "'", strComparable90, "");
        org.junit.Assert.assertNull(schedulerFunc2_91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(testScheduler93);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler14.schedule(schedulerFunc1_27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler14.schedule(subscriptionFunc0_29);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        testScheduler33.triggerActions((long) (byte) 100);
        long long40 = testScheduler33.gettime();
        long long41 = testScheduler33.now();
        testScheduler33.time = (short) 100;
        rx.util.functions.Action0 action0_44 = null;
        rx.Subscription subscription45 = testScheduler33.schedule(action0_44);
        rx.util.functions.Action0 action0_46 = null;
        rx.Subscription subscription47 = testScheduler33.schedule(action0_46);
        long long48 = testScheduler33.now();
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler33.schedule(action0_49);
        testScheduler33.time = (short) 100;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        testScheduler55.triggerActions((long) (byte) 100);
        long long62 = testScheduler55.gettime();
        long long63 = testScheduler55.now();
        testScheduler55.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 100, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction68.scheduler;
        rx.util.functions.Action0 action0_70 = null;
        rx.Subscription subscription71 = testScheduler69.schedule(action0_70);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler33, (long) (byte) -1, schedulerFunc2_54, testScheduler69);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_77 = null;
        rx.Subscription subscription78 = testScheduler33.schedule(schedulerFunc1_77);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler14, (long) (short) 1, schedulerFunc2_32, subscription78);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler14.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(subscription47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(subscription50);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNotNull(subscription71);
        org.junit.Assert.assertNotNull(subscription78);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime4.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime4.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        strComparableTimedAction22.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean25 = strComparableTimedAction22.getisCancelled();
        strComparableTimedAction22.cancel();
        java.lang.Comparable<java.lang.String> strComparable27 = strComparableTimedAction22.state;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime9.compare(strComparableTimedAction22, strComparableTimedAction32);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction41.getscheduler();
        testScheduler48.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (-1), schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable55 = strComparableTimedAction54.getstate();
        long long56 = strComparableTimedAction54.gettime();
        strComparableTimedAction54.cancel();
        long long58 = strComparableTimedAction54.time;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction64.getscheduler();
        long long72 = testScheduler71.gettime();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, 10L, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction78.scheduler;
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction78.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = strComparableTimedAction78.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean82 = strComparableTimedAction78.isCancelled;
        int int83 = compareActionsByTime9.compare(strComparableTimedAction54, strComparableTimedAction78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = compareActionsByTime9.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean25);
        org.junit.Assert.assertEquals("'" + strComparable27 + "' != '" + "" + "'", strComparable27, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertEquals("'" + strComparable55 + "' != '" + "hi!" + "'", strComparable55, "hi!");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertNull(schedulerFunc2_81);
        org.junit.Assert.assertNotNull(atomicBoolean82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 100, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler5.getqueue();
        testScheduler5.time = 0L;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        rx.Subscription subscription32 = testScheduler5.schedule(subscriptionFunc0_31);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertNotNull(subscription32);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction15.getaction();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(schedulerFunc1_21);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler20.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = strComparableTimedAction30.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler41.queue;
        testScheduler41.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (short) 0, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler41.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction63.getisCancelled();
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction63.scheduler;
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction63.state;
        long long68 = strComparableTimedAction63.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = strComparableTimedAction63.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean70 = strComparableTimedAction63.isCancelled;
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction63.getscheduler();
        testScheduler71.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler71, (long) (byte) 10, schedulerFunc2_75, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass78 = testScheduler71.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler41, (long) '4', schedulerFunc2_52, (java.lang.reflect.GenericDeclaration) wildcardClass78);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_69);
        org.junit.Assert.assertNotNull(atomicBoolean70);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Action0 action0_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(action0_28);
        long long30 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_35 = null;
        rx.Subscription subscription36 = testScheduler0.schedule(subscriptionFunc0_35);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler0.schedule(schedulerFunc1_37);
        testScheduler0.time = (-1L);
        rx.util.functions.Action0 action0_41 = null;
        java.util.concurrent.TimeUnit timeUnit43 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription44 = testScheduler0.schedule(action0_41, (long) (byte) -1, timeUnit43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator71.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator71);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator71.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator74.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        int int15 = compareActionsByTime4.compare(strComparableTimedAction9, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction14.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction14.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction14.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction14.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, (long) (byte) 1, schedulerFunc2_3, strComparableTimedAction14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        long long25 = testScheduler0.time;
        testScheduler0.time = ' ';
        rx.util.functions.Action0 action0_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler0.schedule(action0_28, (long) ' ', timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        testScheduler30.triggerActions((long) (byte) 100);
        long long37 = testScheduler30.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (short) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction41.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableTimedAction41.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime44.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction56.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction56.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction56.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        strComparableTimedAction72.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean75 = strComparableTimedAction72.getisCancelled();
        strComparableTimedAction72.cancel();
        long long77 = strComparableTimedAction72.gettime();
        int int78 = compareActionsByTime44.compare(strComparableTimedAction56, strComparableTimedAction72);
        long long79 = strComparableTimedAction56.time;
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction56.scheduler;
        int int81 = compareActionsByTime5.compare(strComparableTimedAction41, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction56.getscheduler();
        testScheduler82.settime(10L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue85 = testScheduler82.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue86 = testScheduler82.getqueue();
        rx.util.functions.Action0 action0_87 = null;
        java.util.concurrent.TimeUnit timeUnit89 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription90 = testScheduler82.schedule(action0_87, (long) 'a', timeUnit89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "" + "'", strComparable43, "");
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue85);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue86);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        long long48 = strComparableTimedAction44.time;
        long long49 = strComparableTimedAction44.gettime();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.getstate();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction44.state;
        java.lang.Comparable<java.lang.String> strComparable52 = strComparableTimedAction44.state;
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction44.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        java.util.concurrent.TimeUnit timeUnit57 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription58 = testScheduler53.schedulePeriodically(schedulerFunc1_54, (long) (-1), (long) (short) 100, timeUnit57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
        org.junit.Assert.assertEquals("'" + strComparable52 + "' != '" + "" + "'", strComparable52, "");
        org.junit.Assert.assertNotNull(testScheduler53);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.settime((long) (byte) 0);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.gettime();
        testScheduler22.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) 1, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler12, (long) (short) 0, schedulerFunc2_21, testScheduler41);
        rx.util.functions.Action0 action0_43 = null;
        java.util.concurrent.TimeUnit timeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription46 = testScheduler12.schedule(action0_43, 100L, timeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction5.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction5.scheduler;
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(action0_19);
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler18.schedulePeriodically(action0_21, (long) ' ', (long) 10, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (short) 100, schedulerFunc2_17, (java.io.Serializable) (-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.time;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) 1, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(action0_21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue26 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue26);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        testScheduler13.triggerActions((long) (byte) -1);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(action0_19);
        long long21 = testScheduler13.gettime();
        long long22 = testScheduler13.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler13.queue;
        testScheduler13.settime(10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        rx.util.functions.Action0 action0_81 = null;
        rx.Subscription subscription82 = testScheduler71.schedule(action0_81);
        rx.util.functions.Action0 action0_83 = null;
        rx.Subscription subscription84 = testScheduler71.schedule(action0_83);
        java.util.concurrent.TimeUnit timeUnit86 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler71.advanceTimeBy(52L, timeUnit86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(subscription82);
        org.junit.Assert.assertNotNull(subscription84);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 52L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        testScheduler31.settime((long) (byte) 0);
        long long38 = testScheduler31.now();
        long long39 = testScheduler31.gettime();
        testScheduler31.time = 1;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_42 = null;
        rx.Subscription subscription43 = testScheduler31.schedule(schedulerFunc1_42);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, 0L, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "hi!");
        long long48 = strComparableTimedAction47.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction47.isCancelled;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction47.getscheduler();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction47.scheduler;
        java.lang.Class<?> wildcardClass52 = strComparableTimedAction47.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler0, (long) '4', schedulerFunc2_30, (java.lang.reflect.Type) wildcardClass52);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(subscription43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 100L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler13.triggerActions();
        testScheduler13.settime((long) 'a');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction51.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        long long60 = strComparableTimedAction59.gettime();
        int int61 = compareActionsByTime0.compare(strComparableTimedAction51, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction59.scheduler;
        long long63 = testScheduler62.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue64 = testScheduler62.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue65 = testScheduler62.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue66 = testScheduler62.queue;
        rx.util.functions.Action0 action0_67 = null;
        rx.Subscription subscription68 = testScheduler62.schedule(action0_67);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_69 = null;
        java.util.concurrent.TimeUnit timeUnit71 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription72 = testScheduler62.schedule(schedulerFunc1_69, (long) (short) 10, timeUnit71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue64);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue65);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue66);
        org.junit.Assert.assertNotNull(subscription68);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler15.schedule(action0_16);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) ' ', schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean36 = strComparableTimedAction35.getisCancelled();
        java.lang.Class<?> wildcardClass37 = strComparableTimedAction35.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler20, 10L, schedulerFunc2_30, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler15, (long) (-1), schedulerFunc2_19, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, 1L, schedulerFunc2_14, (java.lang.reflect.GenericDeclaration) wildcardClass37);
        rx.util.functions.Action0 action0_41 = null;
        rx.Subscription subscription42 = testScheduler0.schedule(action0_41);
        long long43 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_44 = null;
        rx.Subscription subscription45 = testScheduler0.schedule(subscriptionFunc0_44);
        rx.util.functions.Action0 action0_46 = null;
        rx.Subscription subscription47 = testScheduler0.schedule(action0_46);
        testScheduler0.triggerActions((-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(subscription42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(subscription47);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = strComparableTimedAction13.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction13.getaction();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (-1), schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.isCancelled;
        org.junit.Assert.assertNotNull(atomicBoolean5);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.triggerActions();
        rx.util.functions.Action0 action0_16 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler0.schedule(action0_16, (long) (byte) 100, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction30.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertNotNull(atomicBoolean49);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_2, strComparable3);
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_6 = null;
        java.util.concurrent.TimeUnit timeUnit8 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription9 = testScheduler5.schedule(subscriptionFunc0_6, 10L, timeUnit8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        testScheduler13.time = 0;
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler13.schedule(action0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler13, (long) '4', schedulerFunc2_26, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) -1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_33 = null;
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription36 = testScheduler13.schedule(schedulerFunc1_33, (long) (short) -1, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        testScheduler0.time = 10;
        long long21 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        long long14 = strComparableTimedAction11.time;
        long long15 = strComparableTimedAction11.time;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction11.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (short) 1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler16.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler16.schedulePeriodically(schedulerFunc1_22, (long) 0, (long) (short) 10, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        long long17 = strComparableTimedAction10.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.getaction();
        strComparableTimedAction10.cancel();
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction10.state;
        long long22 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction37.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.action;
        long long17 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean18);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        testScheduler13.triggerActions((long) (short) -1);
        testScheduler13.time = (byte) 0;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler13.schedule(schedulerFunc1_23, 100L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        strComparableTimedAction10.cancel();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue3 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction7.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction7.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction7.getaction();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction7.getscheduler();
        strComparableTimedAction7.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction7.getaction();
        long long14 = strComparableTimedAction7.time;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue3);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        testScheduler18.triggerActions();
        java.lang.Class<?> wildcardClass20 = testScheduler18.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 32L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime24.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction36.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = strComparableTimedAction36.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction36.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction36.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        int int53 = compareActionsByTime42.compare(strComparableTimedAction47, strComparableTimedAction52);
        strComparableTimedAction52.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction52.getisCancelled();
        strComparableTimedAction52.cancel();
        long long57 = strComparableTimedAction52.gettime();
        int int58 = compareActionsByTime24.compare(strComparableTimedAction36, strComparableTimedAction52);
        rx.concurrency.TestScheduler testScheduler59 = strComparableTimedAction36.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction36.getstate();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction36.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler15, 35L, schedulerFunc2_23, strComparableTimedAction36);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_63 = null;
        java.util.concurrent.TimeUnit timeUnit65 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription66 = testScheduler15.schedule(subscriptionFunc0_63, (long) (byte) 10, timeUnit65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNull(schedulerFunc2_39);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(testScheduler59);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "" + "'", strComparable60, "");
        org.junit.Assert.assertNotNull(testScheduler61);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.now();
        testScheduler17.time = 1L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 32L, schedulerFunc2_22, strComparable23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        java.lang.Comparable<java.lang.String> strComparable27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 32L, schedulerFunc2_26, strComparable27);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_29 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler17.schedule(schedulerFunc1_29, 10L, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator5 = compareActionsByTime0.reversed();
        java.lang.Class<?> wildcardClass6 = compareActionsByTime0.getClass();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_22, strComparable23);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler13.getqueue();
        testScheduler13.time = 97L;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler13.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        long long28 = strComparableTimedAction27.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction27.isCancelled;
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction27.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        rx.Subscription subscription32 = testScheduler30.schedule(subscriptionFunc0_31);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(subscription32);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        long long17 = testScheduler13.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(subscriptionFunc0_18);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_29 = null;
        rx.Subscription subscription30 = testScheduler22.schedule(schedulerFunc1_29);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_31 = null;
        rx.Subscription subscription32 = testScheduler22.schedule(schedulerFunc1_31);
        testScheduler22.settime((long) (short) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) -1, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        long long39 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime42 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime43.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime42.thenComparing(wildcardTimedActionComparator44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime42.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime47.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime42.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime47);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler22, 0L, schedulerFunc2_41, compareActionsByTime42);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler22.queue;
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler22.schedule(action0_52);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler13, (long) (byte) 0, schedulerFunc2_21, subscription53);
        java.lang.Class<?> wildcardClass55 = subscription53.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertNotNull(subscription32);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler14, (long) '4', schedulerFunc2_20, (rx.Scheduler) testScheduler21);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler14.schedule(subscriptionFunc0_30);
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler14.schedule(action0_32);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) (short) 0, schedulerFunc2_13, subscription33);
        rx.util.functions.Action0 action0_35 = null;
        rx.Subscription subscription36 = testScheduler0.schedule(action0_35);
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime39 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        int int50 = compareActionsByTime39.compare(strComparableTimedAction44, strComparableTimedAction49);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction49.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = strComparableTimedAction49.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_38, atomicBoolean53);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_55 = null;
        rx.Subscription subscription56 = testScheduler0.schedule(schedulerFunc1_55);
        long long57 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNull(schedulerFunc2_52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(subscription56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(action0_20);
        long long22 = testScheduler0.now();
        long long23 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        testScheduler17.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (short) 0, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction13.getaction();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.getscheduler();
        testScheduler17.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler17.schedule(schedulerFunc1_19, 100L, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(subscriptionFunc0_20);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(subscriptionFunc0_22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 1L, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_28 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler0.schedulePeriodically(action0_28, 10L, (long) (short) 1, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction11.getscheduler();
        testScheduler15.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler15.schedule(schedulerFunc1_17);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.isCancelled;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.getqueue();
        testScheduler0.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (byte) -1);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction23.isCancelled;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction23.scheduler;
        testScheduler27.settime(1L);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler16, (long) 0, schedulerFunc2_18, testScheduler27);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_31 = null;
        rx.Subscription subscription32 = testScheduler27.schedule(subscriptionFunc0_31);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_33 = null;
        rx.Subscription subscription34 = testScheduler27.schedule(schedulerFunc1_33);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(atomicBoolean26);
        org.junit.Assert.assertNotNull(testScheduler27);
        org.junit.Assert.assertNotNull(subscription32);
        org.junit.Assert.assertNotNull(subscription34);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.time;
        long long8 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_9 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler0.schedulePeriodically(action0_9, (long) (short) 0, 97L, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction15.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strComparableTimedAction15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNotNull(testScheduler19);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler0.schedule(schedulerFunc1_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (byte) 100, schedulerFunc2_24, "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler0.schedule(schedulerFunc1_27);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription28);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "hi!");
        long long7 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(schedulerFunc1_8);
        testScheduler0.time = (byte) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction19.state;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "" + "'", strComparable20, "");
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        testScheduler8.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler8.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (short) 10, schedulerFunc2_7, testScheduler8);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler0.schedulePeriodically(action0_25, 0L, (long) 0, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        testScheduler0.triggerActions((long) (-1));
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) '4', timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(subscriptionFunc0_14);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler13.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = compareActionsByTime33.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = compareActionsByTime32.thenComparing(wildcardTimedActionComparator34);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime32.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime37.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime32.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime41.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime53);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime67 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime67.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = compareActionsByTime66.thenComparing(wildcardTimedActionComparator68);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = compareActionsByTime66.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime71 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime72 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime72.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = compareActionsByTime71.thenComparing(wildcardTimedActionComparator73);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator73.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime76 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler77 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler77, (long) (byte) 10, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler82 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler82, (long) (byte) 10, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "");
        int int87 = compareActionsByTime76.compare(strComparableTimedAction81, strComparableTimedAction86);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator73.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime76);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = wildcardTimedActionComparator70.thenComparing(wildcardTimedActionComparator88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = compareActionsByTime41.thenComparing(wildcardTimedActionComparator70);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator70);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = compareActionsByTime20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = compareActionsByTime20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator94 = wildcardTimedActionComparator19.thenComparing(wildcardTimedActionComparator93);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator94);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        long long26 = testScheduler21.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime29.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler21, (long) 10, schedulerFunc2_28, compareActionsByTime29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction46.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction46.action;
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction46.getscheduler();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction46.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction46.isCancelled;
        rx.concurrency.TestScheduler testScheduler53 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) ' ', schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction57.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction57.getaction();
        long long60 = strComparableTimedAction57.time;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction57.state;
        int int62 = compareActionsByTime29.compare(strComparableTimedAction46, strComparableTimedAction57);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction46.scheduler;
        java.util.concurrent.TimeUnit timeUnit65 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler63.advanceTimeTo((long) '4', timeUnit65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(testScheduler63);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) 1);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction13.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction13.getaction();
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue81 = testScheduler5.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_82 = null;
        rx.Subscription subscription83 = testScheduler5.schedule(subscriptionFunc0_82);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue81);
        org.junit.Assert.assertNotNull(subscription83);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(action0_21);
        testScheduler12.settime((long) (short) 0);
        long long25 = testScheduler12.now();
        testScheduler12.settime(97L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler12.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = strComparableTimedAction19.action;
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction19.getstate();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction19.getstate();
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction19.scheduler;
        testScheduler26.time = 100L;
        rx.util.functions.Action0 action0_29 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler26.schedule(action0_29, (long) '#', timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNull(schedulerFunc2_22);
        org.junit.Assert.assertNull(schedulerFunc2_23);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "" + "'", strComparable24, "");
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
        org.junit.Assert.assertNotNull(testScheduler26);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.now();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(schedulerFunc1_15);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 10;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_24 = null;
        rx.Subscription subscription25 = testScheduler23.schedule(schedulerFunc1_24);
        testScheduler23.settime((-1L));
        testScheduler23.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        testScheduler31.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue38 = testScheduler31.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, 0L, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler23, (long) (short) 10, schedulerFunc2_30, testScheduler31);
        rx.util.functions.Action0 action0_44 = null;
        rx.Subscription subscription45 = testScheduler31.schedule(action0_44);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        int int59 = compareActionsByTime48.compare(strComparableTimedAction53, strComparableTimedAction58);
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction53.getscheduler();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction53.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction53.action;
        java.lang.Comparable<java.lang.String> strComparable63 = strComparableTimedAction53.state;
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction53.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction53.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler31, (long) (byte) 1, schedulerFunc2_47, (java.io.Serializable) atomicBoolean65);
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler13, (long) (short) 1, schedulerFunc2_22, atomicBoolean65);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue38);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(testScheduler60);
        org.junit.Assert.assertNotNull(testScheduler61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertEquals("'" + strComparable63 + "' != '" + "" + "'", strComparable63, "");
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertNotNull(atomicBoolean65);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        long long58 = testScheduler49.gettime();
        testScheduler49.time = ' ';
        rx.util.functions.Action0 action0_61 = null;
        rx.Subscription subscription62 = testScheduler49.schedule(action0_61);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        testScheduler65.triggerActions((long) (byte) 100);
        long long72 = testScheduler65.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (short) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction76.getscheduler();
        long long78 = strComparableTimedAction76.gettime();
        strComparableTimedAction76.cancel();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction76.getstate();
        java.lang.Class<?> wildcardClass81 = strComparableTimedAction76.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler49, (long) (short) 0, schedulerFunc2_64, (java.io.Serializable) wildcardClass81);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(subscription62);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(testScheduler77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10L + "'", long78 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "" + "'", strComparable80, "");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        long long11 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction44.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction44.getisCancelled();
        strComparableTimedAction44.cancel();
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler53.schedule(schedulerFunc1_54);
        rx.util.functions.Action0 action0_56 = null;
        java.util.concurrent.TimeUnit timeUnit59 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription60 = testScheduler53.schedulePeriodically(action0_56, (long) (short) 100, (long) '4', timeUnit59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(subscription55);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        long long26 = testScheduler7.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) '4', schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        long long31 = strComparableTimedAction30.gettime();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction30.getstate();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "hi!" + "'", strComparable32, "hi!");
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        long long25 = testScheduler0.gettime();
        long long26 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_29 = null;
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription32 = testScheduler0.schedule(schedulerFunc1_29, (long) 1, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        testScheduler0.settime((long) ' ');
        rx.util.functions.Action0 action0_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(action0_25);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(action0_29);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue31 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription36 = testScheduler0.schedulePeriodically(schedulerFunc1_32, (long) ' ', 32L, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue31);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue27 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(schedulerFunc1_28);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_31 = null;
        rx.Subscription subscription32 = testScheduler0.schedule(schedulerFunc1_31);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue27);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertNotNull(subscription32);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction37.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction37.isCancelled;
        long long51 = strComparableTimedAction37.time;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        java.lang.Class<?> wildcardClass53 = testScheduler52.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction37.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue51 = testScheduler50.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler50.schedule(subscriptionFunc0_52);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler50.getqueue();
        long long55 = testScheduler50.now();
        rx.util.functions.Action0 action0_56 = null;
        rx.Subscription subscription57 = testScheduler50.schedule(action0_56);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(subscription57);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        testScheduler12.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(schedulerFunc1_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler12.getqueue();
        long long24 = testScheduler12.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.time = 0L;
        testScheduler0.triggerActions();
        long long18 = testScheduler0.time;
        long long19 = testScheduler0.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler0.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction15.getaction();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction15.scheduler;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler21.schedulePeriodically(subscriptionFunc0_22, (long) 0, (-1L), timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        long long15 = strComparableTimedAction13.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(subscriptionFunc0_18);
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.advanceTimeTo((long) (byte) 100, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction14.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction14.state;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "hi!" + "'", strComparable16, "hi!");
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) -1, schedulerFunc2_53, strComparable54);
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction55.getscheduler();
        long long57 = testScheduler56.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction30.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = strComparableTimedAction30.getaction();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction30.scheduler;
        long long52 = testScheduler51.gettime();
        long long53 = testScheduler51.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertNull(schedulerFunc2_50);
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.triggerActions((long) (byte) 0);
        testScheduler0.triggerActions();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(schedulerFunc1_15);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) 0, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        long long23 = testScheduler14.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_27 = null;
        rx.Subscription subscription28 = testScheduler26.schedule(action0_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        testScheduler31.triggerActions((long) (byte) 100);
        long long38 = testScheduler31.gettime();
        long long39 = testScheduler31.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler testScheduler42 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) ' ', schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction46.getisCancelled();
        java.lang.Class<?> wildcardClass48 = strComparableTimedAction46.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler31, 10L, schedulerFunc2_41, (java.lang.reflect.AnnotatedElement) wildcardClass48);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler26, (long) (-1), schedulerFunc2_30, (java.lang.reflect.AnnotatedElement) wildcardClass48);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler14, (long) 100, schedulerFunc2_25, (java.lang.reflect.Type) wildcardClass48);
        java.lang.Class<?> wildcardClass52 = testScheduler14.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, (long) (byte) 100, schedulerFunc2_13, (java.lang.reflect.GenericDeclaration) wildcardClass52);
        long long54 = testScheduler0.time;
        testScheduler0.time = 10L;
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        long long15 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 100);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(action0_18);
        rx.util.functions.Action0 action0_20 = null;
        rx.Subscription subscription21 = testScheduler0.schedule(action0_20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 1L, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        int int15 = compareActionsByTime4.compare(strComparableTimedAction9, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction14.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction14.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction14.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction14.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, (long) (byte) 1, schedulerFunc2_3, strComparableTimedAction14);
        long long21 = testScheduler0.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.getqueue();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction32.getscheduler();
        long long40 = testScheduler39.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue41 = testScheduler39.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, 0L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue46 = testScheduler39.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue47 = testScheduler39.getqueue();
        long long48 = testScheduler39.time;
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler39.schedule(action0_49);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) 0, schedulerFunc2_26, subscription50);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue41);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue46);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(subscription50);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.action;
        long long7 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.getstate();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "" + "'", strComparable8, "");
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        testScheduler21.time = (short) 100;
        rx.util.functions.Action0 action0_32 = null;
        rx.Subscription subscription33 = testScheduler21.schedule(action0_32);
        rx.util.functions.Action0 action0_34 = null;
        rx.Subscription subscription35 = testScheduler21.schedule(action0_34);
        testScheduler21.triggerActions(32L);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler21.schedule(action0_38);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        rx.Subscription subscription41 = testScheduler21.schedule(schedulerFunc1_40);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler12, (long) 1, schedulerFunc2_20, (rx.Scheduler) testScheduler21);
        long long43 = testScheduler21.gettime();
        long long44 = testScheduler21.gettime();
        long long45 = testScheduler21.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction28.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction28.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction28.isCancelled;
        strComparableTimedAction28.cancel();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction28.scheduler;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "hi!" + "'", strComparable30, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(testScheduler33);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.queue;
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo(52L, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(action0_23);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(schedulerFunc1_25);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        long long18 = testScheduler0.now();
        long long19 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_27 = null;
        rx.Subscription subscription28 = testScheduler22.schedule(schedulerFunc1_27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, 100L, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue33 = testScheduler22.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue34 = testScheduler22.getqueue();
        testScheduler22.settime((long) (byte) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_37 = null;
        rx.Subscription subscription38 = testScheduler22.schedule(subscriptionFunc0_37);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler0, (long) '4', schedulerFunc2_21, subscription38);
        long long40 = testScheduler0.time;
        testScheduler0.triggerActions((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue33);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue34);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        long long2 = testScheduler0.gettime();
        long long3 = testScheduler0.gettime();
        java.util.concurrent.TimeUnit timeUnit5 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 10, timeUnit5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction19.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = strComparableTimedAction19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(testScheduler26);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime19.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime18.thenComparing(wildcardTimedActionComparator20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler12, (long) (-1), schedulerFunc2_17, (java.lang.Object) wildcardTimedActionComparator35);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler12.schedule(schedulerFunc1_37);
        long long39 = testScheduler12.gettime();
        testScheduler12.settime((long) 'a');
        long long42 = testScheduler12.time;
        testScheduler12.settime((-1L));
        java.util.concurrent.TimeUnit timeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy((long) (short) 10, timeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 97L + "'", long42 == 97L);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean72 = strComparableTimedAction59.isCancelled;
        rx.concurrency.TestScheduler testScheduler73 = strComparableTimedAction59.scheduler;
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableTimedAction59.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = strComparableTimedAction59.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean72);
        org.junit.Assert.assertNotNull(testScheduler73);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "" + "'", strComparable74, "");
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 32L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) 100, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_26 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler15.schedulePeriodically(schedulerFunc1_26, (long) 100, (long) 1, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        testScheduler13.triggerActions(1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler13.getqueue();
        testScheduler13.time = 1;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean9 = strComparableTimedAction4.getisCancelled();
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.getaction();
        long long12 = strComparableTimedAction4.gettime();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction4.state;
        strComparableTimedAction4.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction4.action;
        java.lang.Class<?> wildcardClass16 = strComparableTimedAction4.getClass();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean9);
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        long long56 = testScheduler49.now();
        long long57 = testScheduler49.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 32L, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction61.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction61.action;
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction61.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "" + "'", strComparable64, "");
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler15, (long) (byte) 10, schedulerFunc2_18, "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler15.schedulePeriodically(subscriptionFunc0_21, (long) (short) 1, 10L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator22.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = wildcardTimedActionComparator18.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) '4', schedulerFunc2_15, (java.lang.Object) wildcardTimedActionComparator38);
        testScheduler13.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_41 = null;
        rx.Subscription subscription42 = testScheduler13.schedule(subscriptionFunc0_41);
        long long43 = testScheduler13.gettime();
        long long44 = testScheduler13.now();
        testScheduler13.settime(35L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        java.util.concurrent.TimeUnit timeUnit49 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription50 = testScheduler13.schedule(schedulerFunc1_47, 52L, timeUnit49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(subscription42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        testScheduler22.settime((long) (byte) 100);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler22.schedulePeriodically(subscriptionFunc0_25, (long) (-1), 32L, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "hi!" + "'", strComparable21, "hi!");
        org.junit.Assert.assertNotNull(testScheduler22);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction22.isCancelled;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction22.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "" + "'", strComparable25, "");
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        testScheduler49.time = (byte) 10;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue58 = testScheduler49.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue58);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler17.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler17.schedulePeriodically(subscriptionFunc0_20, 0L, (-1L), timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        long long53 = testScheduler52.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler52.schedule(schedulerFunc1_54);
        rx.util.functions.Action0 action0_56 = null;
        java.util.concurrent.TimeUnit timeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription59 = testScheduler52.schedule(action0_56, (long) 100, timeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        rx.Subscription subscription12 = testScheduler10.schedule(schedulerFunc1_11);
        testScheduler10.settime((-1L));
        testScheduler10.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        java.lang.Comparable<java.lang.String> strComparable18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, 0L, schedulerFunc2_17, strComparable18);
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        testScheduler27.triggerActions((long) (byte) 100);
        long long34 = testScheduler27.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler20, (long) '4', schedulerFunc2_26, (rx.Scheduler) testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, 0L, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = strComparableTimedAction39.scheduler;
        long long41 = strComparableTimedAction39.gettime();
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction39.getscheduler();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction39.getscheduler();
        int int44 = compareActionsByTime0.compare(strComparableTimedAction19, strComparableTimedAction39);
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction39.scheduler;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(testScheduler45);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 100, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        long long18 = testScheduler17.now();
        testScheduler17.triggerActions();
        long long20 = testScheduler17.time;
        testScheduler17.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean40 = strComparableTimedAction38.getisCancelled();
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction38.scheduler;
        testScheduler41.time = 100;
        long long44 = testScheduler41.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_45 = null;
        rx.Subscription subscription46 = testScheduler41.schedule(schedulerFunc1_45);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction54.getscheduler();
        long long62 = testScheduler61.gettime();
        testScheduler61.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler61, 10L, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction68.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler41, (long) (short) -1, schedulerFunc2_48, (rx.Scheduler) testScheduler69);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue71 = testScheduler69.queue;
        testScheduler69.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (short) 0, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue78 = testScheduler69.queue;
        testScheduler69.time = 1;
        rx.util.functions.Action0 action0_81 = null;
        rx.Subscription subscription82 = testScheduler69.schedule(action0_81);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler17, 97L, schedulerFunc2_27, (java.lang.Object) testScheduler69);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean40);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertNotNull(subscription46);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(testScheduler61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue78);
        org.junit.Assert.assertNotNull(subscription82);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = strComparableTimedAction5.time;
        long long14 = strComparableTimedAction5.gettime();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction5.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler43 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler43, (long) (byte) 10, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        int int48 = compareActionsByTime37.compare(strComparableTimedAction42, strComparableTimedAction47);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime37);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime37.reversed();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_53 = null;
        rx.Subscription subscription54 = testScheduler52.schedule(schedulerFunc1_53);
        testScheduler52.settime((-1L));
        testScheduler52.triggerActions();
        long long58 = testScheduler52.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) 'a', schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "hi!");
        long long63 = strComparableTimedAction62.time;
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction62.state;
        rx.concurrency.TestScheduler testScheduler65 = strComparableTimedAction62.scheduler;
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        testScheduler66.triggerActions((long) (byte) 100);
        long long73 = testScheduler66.gettime();
        long long74 = testScheduler66.now();
        long long75 = testScheduler66.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, 10L, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction79.scheduler;
        rx.concurrency.TestScheduler testScheduler81 = strComparableTimedAction79.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = strComparableTimedAction79.getaction();
        int int83 = compareActionsByTime37.compare(strComparableTimedAction62, strComparableTimedAction79);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator84 = compareActionsByTime37.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(subscription54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 97L + "'", long63 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertNotNull(testScheduler65);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertNotNull(testScheduler81);
        org.junit.Assert.assertNull(schedulerFunc2_82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator84);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.action;
        strComparableTimedAction23.cancel();
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction23.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(testScheduler27);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler7.schedule(schedulerFunc1_20);
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler7.schedule(action0_22);
        long long24 = testScheduler7.time;
        testScheduler7.settime((long) (byte) -1);
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler7.advanceTimeBy((long) 100, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        long long20 = strComparableTimedAction19.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) (short) 10, schedulerFunc2_10, "");
        testScheduler0.settime((long) '#');
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction4.action;
        strComparableTimedAction4.cancel();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_10);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(action0_23);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(schedulerFunc1_18);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        long long20 = testScheduler12.gettime();
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy((long) 10, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable11 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "hi!" + "'", strComparable11, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean12);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction27.isCancelled;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler53.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction58.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
        org.junit.Assert.assertNull(schedulerFunc2_59);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction49.state;
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction49.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 0L, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler68 = strComparableTimedAction67.scheduler;
        java.lang.Comparable<java.lang.String> strComparable69 = strComparableTimedAction67.state;
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
        org.junit.Assert.assertEquals("'" + strComparable62 + "' != '" + "" + "'", strComparable62, "");
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(testScheduler68);
        org.junit.Assert.assertEquals("'" + strComparable69 + "' != '" + "hi!" + "'", strComparable69, "hi!");
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_20 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler0.schedule(action0_20, (long) (short) 10, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions((long) (byte) 100);
        testScheduler13.settime((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 0, schedulerFunc2_19, strComparable20);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean22 = strComparableTimedAction21.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction21.isCancelled;
        long long24 = strComparableTimedAction21.gettime();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction21.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(strComparable25);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Action0 action0_2 = null;
        rx.Subscription subscription3 = testScheduler0.schedule(action0_2);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction7.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler8.schedulePeriodically(subscriptionFunc0_9, (long) 100, (long) ' ', timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(subscription3);
        org.junit.Assert.assertNotNull(testScheduler8);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
        org.junit.Assert.assertNotNull(subscription10);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler5.queue;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        long long17 = strComparableTimedAction10.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        testScheduler13.triggerActions((long) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        testScheduler13.time = 32L;
        testScheduler13.settime(0L);
        long long23 = testScheduler13.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime6.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime5.thenComparing(wildcardTimedActionComparator7);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = wildcardTimedActionComparator2.thenComparing(wildcardTimedActionComparator8);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = wildcardTimedActionComparator2.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = wildcardTimedActionComparator2.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        long long23 = strComparableTimedAction22.gettime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = strComparableTimedAction22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.time = (short) 1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(schedulerFunc1_16);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        testScheduler0.time = ' ';
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        long long11 = testScheduler0.now();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction8.getstate();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction8.getstate();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        testScheduler0.triggerActions(35L);
        long long18 = testScheduler0.time;
        long long19 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction22.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        long long22 = strComparableTimedAction19.time;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler23.schedule(action0_24);
        java.lang.Class<?> wildcardClass26 = testScheduler23.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler0.schedule(schedulerFunc1_18);
        long long20 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction33.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = strComparableTimedAction33.getaction();
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction33.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction33.scheduler;
        long long39 = testScheduler38.gettime();
        testScheduler38.settime(35L);
        testScheduler38.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue43 = testScheduler38.getqueue();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) 100, schedulerFunc2_22, (rx.Scheduler) testScheduler38);
        java.util.concurrent.TimeUnit timeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler38.advanceTimeTo((long) ' ', timeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertNull(schedulerFunc2_36);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue43);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction59.getaction();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction59.getisCancelled();
        long long66 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.scheduler;
        long long68 = testScheduler67.gettime();
        long long69 = testScheduler67.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(schedulerFunc2_63);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "hi!" + "'", strComparable64, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        testScheduler13.time = (short) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction21.getscheduler();
        long long23 = strComparableTimedAction21.time;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction21.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction21.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = strComparableTimedAction29.getaction();
        java.lang.Comparable<java.lang.String> strComparable31 = strComparableTimedAction29.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = strComparableTimedAction29.action;
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction29.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction29.getaction();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNull(schedulerFunc2_30);
        org.junit.Assert.assertEquals("'" + strComparable31 + "' != '" + "hi!" + "'", strComparable31, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_32);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler14, 100L, schedulerFunc2_16, (java.lang.CharSequence) "");
        testScheduler14.triggerActions(52L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler14.schedule(schedulerFunc1_21, 10L, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime14 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime14.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime13.thenComparing(wildcardTimedActionComparator15);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = compareActionsByTime13.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime18 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime18.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime13.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime18);
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        testScheduler28.triggerActions((long) (byte) 100);
        long long35 = testScheduler28.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler21, (long) '4', schedulerFunc2_27, (rx.Scheduler) testScheduler28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 100, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        testScheduler45.triggerActions((long) (byte) 100);
        long long52 = testScheduler45.gettime();
        long long53 = testScheduler45.now();
        long long54 = testScheduler45.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, 10L, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction58.getisCancelled();
        int int60 = compareActionsByTime18.compare(strComparableTimedAction44, strComparableTimedAction58);
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction44.state;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction44.scheduler;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 0L, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        testScheduler68.triggerActions((long) (byte) 100);
        long long75 = testScheduler68.gettime();
        long long76 = testScheduler68.now();
        testScheduler68.time = (short) 100;
        rx.util.functions.Action0 action0_79 = null;
        rx.Subscription subscription80 = testScheduler68.schedule(action0_79);
        rx.util.functions.Action0 action0_81 = null;
        rx.Subscription subscription82 = testScheduler68.schedule(action0_81);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) '4', schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable87 = strComparableTimedAction86.getstate();
        int int88 = compareActionsByTime0.compare(strComparableTimedAction67, strComparableTimedAction86);
        rx.concurrency.TestScheduler testScheduler89 = strComparableTimedAction67.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_90 = null;
        rx.Subscription subscription91 = testScheduler89.schedule(subscriptionFunc0_90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(subscription82);
        org.junit.Assert.assertEquals("'" + strComparable87 + "' != '" + "hi!" + "'", strComparable87, "hi!");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(testScheduler89);
        org.junit.Assert.assertNotNull(subscription91);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction29.scheduler;
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        testScheduler40.triggerActions((long) (byte) 100);
        long long47 = testScheduler40.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler33, (long) '4', schedulerFunc2_39, (rx.Scheduler) testScheduler40);
        testScheduler33.triggerActions((long) (byte) 1);
        long long51 = testScheduler33.time;
        long long52 = testScheduler33.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_53 = null;
        rx.Subscription subscription54 = testScheduler33.schedule(schedulerFunc1_53);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler30, (long) 100, schedulerFunc2_32, subscription54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler30.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (-1), schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction61.cancel();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(subscription54);
        org.junit.Assert.assertNotNull(subscription57);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Class<?> wildcardClass15 = atomicBoolean14.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime(10L);
        testScheduler0.time = (-1L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.triggerActions((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = wildcardTimedActionComparator25.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = wildcardTimedActionComparator26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = wildcardTimedActionComparator27.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator28.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.queue;
        testScheduler0.time = (byte) 100;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (short) 100, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass56 = strComparableTimedAction55.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        long long27 = testScheduler26.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler26.schedule(subscriptionFunc0_28);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler26.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler47.schedule(action0_48);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (short) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = strComparableTimedAction59.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean69 = strComparableTimedAction59.getisCancelled();
        int int70 = compareActionsByTime22.compare(strComparableTimedAction53, strComparableTimedAction59);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction59.getscheduler();
        testScheduler71.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        java.lang.Comparable<java.lang.String> strComparable76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) -1, schedulerFunc2_75, strComparable76);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) ' ', schedulerFunc2_21, (java.lang.Object) testScheduler71);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler71.schedule(schedulerFunc1_79);
        long long81 = testScheduler71.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_82 = null;
        rx.Subscription subscription83 = testScheduler71.schedule(schedulerFunc1_82);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(subscription49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNull(schedulerFunc2_68);
        org.junit.Assert.assertNotNull(atomicBoolean69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(subscription83);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        java.lang.Comparable<java.lang.String> strComparable8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_7, strComparable8);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        long long11 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler14.schedule(schedulerFunc1_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 100L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        long long25 = strComparableTimedAction24.time;
        long long26 = strComparableTimedAction24.time;
        rx.concurrency.TestScheduler testScheduler27 = strComparableTimedAction24.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) 0, schedulerFunc2_13, (rx.Scheduler) testScheduler27);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(testScheduler27);
        org.junit.Assert.assertNotNull(atomicBoolean33);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(action0_14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 1, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler20.schedulePeriodically(subscriptionFunc0_21, 35L, (-1L), timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(testScheduler20);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        long long23 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        testScheduler13.triggerActions((long) (byte) -1);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(action0_19);
        long long21 = testScheduler13.gettime();
        long long22 = testScheduler13.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler13.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler13.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction19.scheduler;
        long long27 = testScheduler26.now();
        rx.util.functions.Action0 action0_28 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler26.schedule(action0_28, 0L, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction30.cancel();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(subscriptionFunc0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        long long18 = testScheduler17.gettime();
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler17.schedule(action0_19);
        long long21 = testScheduler17.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime6 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime6.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime5.thenComparing(wildcardTimedActionComparator7);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = wildcardTimedActionComparator7.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime10 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        int int21 = compareActionsByTime10.compare(strComparableTimedAction15, strComparableTimedAction20);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator7.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = wildcardTimedActionComparator4.thenComparing(wildcardTimedActionComparator22);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime25.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator26);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime24.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime29.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = wildcardTimedActionComparator23.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime24);
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        testScheduler33.triggerActions((long) (byte) 100);
        long long40 = testScheduler33.gettime();
        long long41 = testScheduler33.now();
        long long42 = testScheduler33.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction46.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction46.getstate();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction46.scheduler;
        strComparableTimedAction46.cancel();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction46.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction57.getscheduler();
        testScheduler64.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        testScheduler69.triggerActions((long) (byte) 100);
        long long76 = testScheduler69.gettime();
        long long77 = testScheduler69.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler testScheduler80 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler80, (long) ' ', schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean85 = strComparableTimedAction84.getisCancelled();
        java.lang.Class<?> wildcardClass86 = strComparableTimedAction84.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler69, 10L, schedulerFunc2_79, (java.lang.reflect.AnnotatedElement) wildcardClass86);
        rx.util.functions.Action0 action0_88 = null;
        rx.Subscription subscription89 = testScheduler69.schedule(action0_88);
        rx.util.functions.Action0 action0_90 = null;
        rx.Subscription subscription91 = testScheduler69.schedule(action0_90);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler64, 10L, schedulerFunc2_68, subscription91);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue93 = testScheduler64.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_95 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction97 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (short) 10, schedulerFunc2_95, (java.lang.Comparable<java.lang.String>) "");
        int int98 = compareActionsByTime24.compare(strComparableTimedAction46, strComparableTimedAction97);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator99 = compareActionsByTime24.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "hi!" + "'", strComparable48, "hi!");
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "hi!" + "'", strComparable51, "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(subscription89);
        org.junit.Assert.assertNotNull(subscription91);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue93);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator99);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        int int30 = compareActionsByTime19.compare(strComparableTimedAction24, strComparableTimedAction29);
        rx.concurrency.TestScheduler testScheduler31 = strComparableTimedAction24.getscheduler();
        long long32 = testScheduler31.gettime();
        testScheduler31.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, 10L, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction38.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = strComparableTimedAction38.getaction();
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction38.state;
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction38.scheduler;
        long long43 = testScheduler42.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue44 = testScheduler42.getqueue();
        testScheduler42.triggerActions((long) (short) 100);
        java.lang.Class<?> wildcardClass47 = testScheduler42.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) '4', schedulerFunc2_18, (java.io.Serializable) wildcardClass47);
        long long49 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(testScheduler31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNull(schedulerFunc2_40);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "hi!" + "'", strComparable41, "hi!");
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue44);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        long long47 = strComparableTimedAction44.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction44.action;
        long long49 = strComparableTimedAction44.time;
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction44.action;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction44.scheduler;
        testScheduler52.settime((long) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        long long59 = strComparableTimedAction58.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction58.getisCancelled();
        long long61 = strComparableTimedAction58.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction58.getaction();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_62);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        long long15 = strComparableTimedAction13.gettime();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction13.scheduler;
        long long18 = testScheduler17.gettime();
        long long19 = testScheduler17.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.queue;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction27.isCancelled;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction27.getscheduler();
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction27.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue54 = testScheduler53.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction58.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue54);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = 1;
        long long16 = testScheduler12.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(subscriptionFunc0_17);
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeBy((long) 100, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction15.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction15.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction15.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "" + "'", strComparable18, "");
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        testScheduler0.triggerActions(32L);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(action0_17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (-1L), schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        long long29 = strComparableTimedAction28.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        strComparableTimedAction10.cancel();
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(action0_17);
        testScheduler16.settime((long) ' ');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction31.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction31.action;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = compareActionsByTime48.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime47.thenComparing(wildcardTimedActionComparator49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime35.thenComparing(wildcardTimedActionComparator50);
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable57 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler testScheduler58 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) ' ', schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction62.getisCancelled();
        int int64 = compareActionsByTime35.compare(strComparableTimedAction56, strComparableTimedAction62);
        long long65 = strComparableTimedAction56.time;
        int int66 = compareActionsByTime17.compare(strComparableTimedAction31, strComparableTimedAction56);
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction56.state;
        strComparableTimedAction56.cancel();
        strComparableTimedAction56.cancel();
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction56.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertEquals("'" + strComparable57 + "' != '" + "" + "'", strComparable57, "");
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
        org.junit.Assert.assertNotNull(testScheduler70);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = strComparableTimedAction13.time;
        long long15 = strComparableTimedAction13.gettime();
        strComparableTimedAction13.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction13.getisCancelled();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean17);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        long long52 = testScheduler49.now();
        long long53 = testScheduler49.gettime();
        testScheduler49.settime(32L);
        testScheduler49.settime((long) (short) 1);
        rx.util.functions.Action0 action0_58 = null;
        java.util.concurrent.TimeUnit timeUnit60 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription61 = testScheduler49.schedule(action0_58, 32L, timeUnit60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.lang.Comparable<java.lang.String> strComparable29 = strComparableTimedAction27.getstate();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler30, (long) '4', schedulerFunc2_36, (rx.Scheduler) testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction49.cancel();
        int int51 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction49.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction49.isCancelled;
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction49.getscheduler();
        long long55 = testScheduler54.now();
        testScheduler54.triggerActions((long) 10);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        rx.Subscription subscription59 = testScheduler54.schedule(subscriptionFunc0_58);
        rx.util.functions.Action0 action0_60 = null;
        rx.Subscription subscription61 = testScheduler54.schedule(action0_60);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + strComparable29 + "' != '" + "" + "'", strComparable29, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(subscription59);
        org.junit.Assert.assertNotNull(subscription61);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.getscheduler();
        testScheduler16.time = 1L;
        testScheduler16.triggerActions();
        rx.util.functions.Action0 action0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler16.schedulePeriodically(action0_20, 0L, (long) ' ', timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (short) 0);
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) '#', timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_2, strComparable3);
        long long5 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler6 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, 10L, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertNotNull(testScheduler6);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        testScheduler12.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) -1, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(action0_21);
        testScheduler12.settime((long) (short) 0);
        long long25 = testScheduler12.now();
        long long26 = testScheduler12.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        rx.Subscription subscription31 = testScheduler29.schedule(schedulerFunc1_30);
        testScheduler29.settime((-1L));
        testScheduler29.triggerActions();
        long long35 = testScheduler29.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) 'a', schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "hi!");
        long long40 = strComparableTimedAction39.gettime();
        java.lang.Class<?> wildcardClass41 = strComparableTimedAction39.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler12, (long) 1, schedulerFunc2_28, (java.lang.reflect.Type) wildcardClass41);
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.advanceTimeTo((long) (byte) 1, timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 97L + "'", long40 == 97L);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction5.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction5.isCancelled;
        long long16 = strComparableTimedAction5.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction5.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction5.getscheduler();
        java.lang.Class<?> wildcardClass19 = strComparableTimedAction5.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction54.getstate();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction54.getstate();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction54.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction54.action;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = strComparableTimedAction54.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "hi!" + "'", strComparable59, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_62);
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        long long12 = testScheduler0.time;
        long long13 = testScheduler0.now();
        testScheduler0.triggerActions();
        testScheduler0.time = (byte) 100;
        long long17 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler0.schedulePeriodically(subscriptionFunc0_18, (long) 1, (long) 'a', timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction37.getstate();
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction37.scheduler;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction37.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(testScheduler51);
        org.junit.Assert.assertNotNull(testScheduler52);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.getqueue();
        testScheduler0.settime((long) (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (short) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler0.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler0.schedulePeriodically(schedulerFunc1_23, 35L, (long) 10, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        int int35 = compareActionsByTime24.compare(strComparableTimedAction29, strComparableTimedAction34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime37.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime36.thenComparing(wildcardTimedActionComparator38);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime24.thenComparing(wildcardTimedActionComparator39);
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableTimedAction45.getstate();
        rx.concurrency.TestScheduler testScheduler47 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) ' ', schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean52 = strComparableTimedAction51.getisCancelled();
        int int53 = compareActionsByTime24.compare(strComparableTimedAction45, strComparableTimedAction51);
        rx.concurrency.TestScheduler testScheduler54 = strComparableTimedAction45.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 32L, schedulerFunc2_23, (rx.Scheduler) testScheduler54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler0.schedule(subscriptionFunc0_56);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        rx.Subscription subscription59 = testScheduler0.schedule(subscriptionFunc0_58);
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        strComparableTimedAction72.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean75 = strComparableTimedAction72.getisCancelled();
        long long76 = strComparableTimedAction72.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = strComparableTimedAction72.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean78 = strComparableTimedAction72.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 97L, schedulerFunc2_61, atomicBoolean78);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_80 = null;
        rx.Subscription subscription81 = testScheduler0.schedule(schedulerFunc1_80);
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.triggerActions((long) (short) -1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertEquals("'" + strComparable46 + "' != '" + "" + "'", strComparable46, "");
        org.junit.Assert.assertNotNull(atomicBoolean52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(testScheduler54);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertNotNull(subscription59);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10L + "'", long76 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_77);
        org.junit.Assert.assertNotNull(atomicBoolean78);
        org.junit.Assert.assertNotNull(subscription81);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        rx.Subscription subscription26 = testScheduler0.schedule(subscriptionFunc0_25);
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler0.schedulePeriodically(action0_27, (long) 100, 100L, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime32.thenComparing(wildcardTimedActionComparator47);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        strComparableTimedAction59.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction59.getisCancelled();
        strComparableTimedAction59.cancel();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler71 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        int int76 = compareActionsByTime65.compare(strComparableTimedAction70, strComparableTimedAction75);
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction75.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = strComparableTimedAction75.action;
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableTimedAction75.state;
        long long80 = strComparableTimedAction75.time;
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableTimedAction75.state;
        int int82 = compareActionsByTime32.compare(strComparableTimedAction59, strComparableTimedAction75);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean83 = strComparableTimedAction59.isCancelled;
        rx.concurrency.TestScheduler testScheduler84 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler85 = strComparableTimedAction59.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue86 = testScheduler85.queue;
        long long87 = testScheduler85.now();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler18, (long) ' ', schedulerFunc2_31, testScheduler85);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler85, (long) (short) 100, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_93 = null;
        rx.Subscription subscription94 = testScheduler85.schedule(action0_93);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "" + "'", strComparable64, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertNull(schedulerFunc2_78);
        org.junit.Assert.assertEquals("'" + strComparable79 + "' != '" + "" + "'", strComparable79, "");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable81 + "' != '" + "" + "'", strComparable81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean83);
        org.junit.Assert.assertNotNull(testScheduler84);
        org.junit.Assert.assertNotNull(testScheduler85);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(subscription94);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction29.cancel();
        strComparableTimedAction29.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = strComparableTimedAction29.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = strComparableTimedAction29.getaction();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_32);
        org.junit.Assert.assertNull(schedulerFunc2_33);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction6.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler7.time = (byte) 0;
        org.junit.Assert.assertNotNull(testScheduler7);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        long long18 = testScheduler7.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.scheduler;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler23.advanceTimeBy((-1L), timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = strComparableTimedAction43.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime32.thenComparing(wildcardTimedActionComparator47);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        strComparableTimedAction59.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean62 = strComparableTimedAction59.getisCancelled();
        strComparableTimedAction59.cancel();
        java.lang.Comparable<java.lang.String> strComparable64 = strComparableTimedAction59.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler71 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler71, (long) (byte) 10, schedulerFunc2_73, (java.lang.Comparable<java.lang.String>) "");
        int int76 = compareActionsByTime65.compare(strComparableTimedAction70, strComparableTimedAction75);
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction75.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = strComparableTimedAction75.action;
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableTimedAction75.state;
        long long80 = strComparableTimedAction75.time;
        java.lang.Comparable<java.lang.String> strComparable81 = strComparableTimedAction75.state;
        int int82 = compareActionsByTime32.compare(strComparableTimedAction59, strComparableTimedAction75);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean83 = strComparableTimedAction59.isCancelled;
        rx.concurrency.TestScheduler testScheduler84 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler85 = strComparableTimedAction59.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue86 = testScheduler85.queue;
        long long87 = testScheduler85.now();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler18, (long) ' ', schedulerFunc2_31, testScheduler85);
        long long89 = testScheduler18.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_90 = null;
        rx.Subscription subscription91 = testScheduler18.schedule(subscriptionFunc0_90);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean62);
        org.junit.Assert.assertEquals("'" + strComparable64 + "' != '" + "" + "'", strComparable64, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertNull(schedulerFunc2_78);
        org.junit.Assert.assertEquals("'" + strComparable79 + "' != '" + "" + "'", strComparable79, "");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable81 + "' != '" + "" + "'", strComparable81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean83);
        org.junit.Assert.assertNotNull(testScheduler84);
        org.junit.Assert.assertNotNull(testScheduler85);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(subscription91);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler51 = strComparableTimedAction43.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_52 = null;
        java.util.concurrent.TimeUnit timeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription56 = testScheduler51.schedulePeriodically(schedulerFunc1_52, 10L, (long) 100, timeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(testScheduler51);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = 0L;
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        testScheduler20.triggerActions((long) (byte) 100);
        long long27 = testScheduler20.gettime();
        long long28 = testScheduler20.now();
        testScheduler20.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 100, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        rx.util.functions.Action0 action0_35 = null;
        rx.Subscription subscription36 = testScheduler34.schedule(action0_35);
        rx.util.functions.Action0 action0_37 = null;
        rx.Subscription subscription38 = testScheduler34.schedule(action0_37);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler15, (long) (byte) -1, schedulerFunc2_19, subscription38);
        testScheduler15.triggerActions((long) (byte) -1);
        rx.util.functions.Action0 action0_42 = null;
        rx.Subscription subscription43 = testScheduler15.schedule(action0_42);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction47 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 1L, schedulerFunc2_45, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction47.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction47.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertNotNull(subscription43);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.now();
        testScheduler23.triggerActions();
        testScheduler23.time = 100;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction10.isCancelled;
        long long21 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction10.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = wildcardTimedActionComparator42.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = wildcardTimedActionComparator44.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = wildcardTimedActionComparator44.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = compareActionsByTime59.thenComparing(wildcardTimedActionComparator61);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime59.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime64.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime59.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime64);
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        long long73 = testScheduler68.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime76 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime77 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = compareActionsByTime77.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = compareActionsByTime76.thenComparing(wildcardTimedActionComparator78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = compareActionsByTime76.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler68, (long) 10, schedulerFunc2_75, compareActionsByTime76);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = wildcardTimedActionComparator67.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime76);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime83 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime84 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator85 = compareActionsByTime84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = compareActionsByTime83.thenComparing(wildcardTimedActionComparator85);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = compareActionsByTime83.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime88 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = compareActionsByTime88.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = compareActionsByTime83.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = compareActionsByTime88.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = wildcardTimedActionComparator82.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator46.thenComparing(wildcardTimedActionComparator92);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator85);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        testScheduler12.triggerActions((-1L));
        rx.util.functions.Action0 action0_45 = null;
        java.util.concurrent.TimeUnit timeUnit48 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription49 = testScheduler12.schedulePeriodically(action0_45, (long) (byte) 1, (long) (byte) 10, timeUnit48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 10;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(subscriptionFunc0_17);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction36.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler13, (long) (short) 0, schedulerFunc2_20, strComparableTimedAction36);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue39 = testScheduler13.queue;
        long long40 = testScheduler13.time;
        long long41 = testScheduler13.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (-1), schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 100, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.getscheduler();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(testScheduler34);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_15 = null;
        java.io.Serializable serializable16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler12, (-1L), schedulerFunc2_15, serializable16);
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler12.schedule(action0_18);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler12.schedule(subscriptionFunc0_20);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_22 = null;
        rx.Subscription subscription23 = testScheduler12.schedule(subscriptionFunc0_22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler12.getqueue();
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.triggerActions((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        long long3 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction7 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_5, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction11.state;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        long long26 = testScheduler0.time;
        long long27 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler0, (long) ' ', schedulerFunc2_33, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        long long5 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime8.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime20);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction38.getscheduler();
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction38.getscheduler();
        strComparableTimedAction38.cancel();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction52.getscheduler();
        int int54 = compareActionsByTime8.compare(strComparableTimedAction38, strComparableTimedAction52);
        long long55 = strComparableTimedAction52.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = strComparableTimedAction52.action;
        long long57 = strComparableTimedAction52.time;
        java.lang.Comparable<java.lang.String> strComparable58 = strComparableTimedAction52.state;
        strComparableTimedAction52.cancel();
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction52.getscheduler();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, 0L, schedulerFunc2_7, (java.lang.Object) testScheduler60);
        long long62 = testScheduler60.time;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable58 + "' != '" + "" + "'", strComparable58, "");
        org.junit.Assert.assertNotNull(testScheduler60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        testScheduler19.triggerActions((long) (byte) 100);
        long long26 = testScheduler19.gettime();
        long long27 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler testScheduler30 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) ' ', schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction34.getisCancelled();
        java.lang.Class<?> wildcardClass36 = strComparableTimedAction34.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler19, 10L, schedulerFunc2_29, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (-1), schedulerFunc2_18, (java.lang.reflect.AnnotatedElement) wildcardClass36);
        long long39 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, 97L, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_54 = null;
        rx.Subscription subscription55 = testScheduler46.schedule(schedulerFunc1_54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        long long66 = testScheduler58.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler testScheduler69 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) ' ', schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction73.getisCancelled();
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction73.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler58, 10L, schedulerFunc2_68, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler46, 0L, schedulerFunc2_57, (java.lang.reflect.Type) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, (long) (short) 1, schedulerFunc2_45, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler5, (long) (short) 100, schedulerFunc2_13, (java.lang.Object) testScheduler14);
        long long80 = testScheduler5.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "hi!");
        long long85 = testScheduler5.time;
        testScheduler5.time = 32L;
        long long88 = testScheduler5.now();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(action0_18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.triggerActions((long) (byte) 100);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) ' ', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean38 = strComparableTimedAction37.getisCancelled();
        java.lang.Class<?> wildcardClass39 = strComparableTimedAction37.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler22, 10L, schedulerFunc2_32, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, (long) (-1), schedulerFunc2_21, (java.lang.reflect.AnnotatedElement) wildcardClass39);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) ' ', schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 10, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        testScheduler46.triggerActions((long) (byte) 100);
        long long53 = testScheduler46.gettime();
        long long54 = testScheduler46.now();
        testScheduler46.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (byte) 100, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction59.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.getstate();
        int int62 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime65 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator66 = compareActionsByTime65.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator67 = compareActionsByTime64.thenComparing(wildcardTimedActionComparator66);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = wildcardTimedActionComparator66.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = wildcardTimedActionComparator63.thenComparing(wildcardTimedActionComparator68);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime70 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime71 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = compareActionsByTime71.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime70.thenComparing(wildcardTimedActionComparator72);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator72.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime75 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime76 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = compareActionsByTime76.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = compareActionsByTime75.thenComparing(wildcardTimedActionComparator77);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = wildcardTimedActionComparator72.thenComparing(wildcardTimedActionComparator78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = wildcardTimedActionComparator72.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = wildcardTimedActionComparator63.thenComparing(wildcardTimedActionComparator80);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = wildcardTimedActionComparator63.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "hi!" + "'", strComparable61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator66);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator67);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator77);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(schedulerFunc1_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler20.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler20.schedule(subscriptionFunc0_24);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (-1), schedulerFunc2_19, testScheduler20);
        testScheduler0.triggerActions(97L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        testScheduler0.triggerActions();
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(subscriptionFunc0_12);
        testScheduler0.time = 100;
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        long long7 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(schedulerFunc1_8);
        testScheduler0.time = (byte) 100;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction5.getisCancelled();
        strComparableTimedAction5.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        testScheduler0.time = 97L;
        testScheduler0.triggerActions(0L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        java.util.concurrent.TimeUnit timeUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription17 = testScheduler0.schedulePeriodically(schedulerFunc1_13, 0L, 0L, timeUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler testScheduler8 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        testScheduler15.triggerActions((long) (byte) 100);
        long long22 = testScheduler15.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler8, (long) '4', schedulerFunc2_14, (rx.Scheduler) testScheduler15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler8, (long) (byte) 100, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        testScheduler32.triggerActions((long) (byte) 100);
        long long39 = testScheduler32.gettime();
        long long40 = testScheduler32.now();
        long long41 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction45.getisCancelled();
        int int47 = compareActionsByTime5.compare(strComparableTimedAction31, strComparableTimedAction45);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        int int59 = compareActionsByTime48.compare(strComparableTimedAction53, strComparableTimedAction58);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction58.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction58.action;
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction58.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction58.getisCancelled();
        long long64 = strComparableTimedAction58.gettime();
        rx.concurrency.TestScheduler testScheduler65 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) ' ', schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean70 = strComparableTimedAction69.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = strComparableTimedAction69.getaction();
        long long72 = strComparableTimedAction69.time;
        java.lang.Comparable<java.lang.String> strComparable73 = strComparableTimedAction69.state;
        int int74 = compareActionsByTime5.compare(strComparableTimedAction58, strComparableTimedAction69);
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction58.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, (long) (byte) -1, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_80 = null;
        java.util.concurrent.TimeUnit timeUnit82 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription83 = testScheduler75.schedule(schedulerFunc1_80, 0L, timeUnit82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean70);
        org.junit.Assert.assertNull(schedulerFunc2_71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 32L + "'", long72 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable73 + "' != '" + "hi!" + "'", strComparable73, "hi!");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(testScheduler75);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(subscriptionFunc0_56);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        testScheduler60.triggerActions((long) (byte) 100);
        long long67 = testScheduler60.gettime();
        long long68 = testScheduler60.now();
        testScheduler60.time = (short) 100;
        rx.util.functions.Action0 action0_71 = null;
        rx.Subscription subscription72 = testScheduler60.schedule(action0_71);
        rx.util.functions.Action0 action0_73 = null;
        rx.Subscription subscription74 = testScheduler60.schedule(action0_73);
        long long75 = testScheduler60.now();
        long long76 = testScheduler60.now();
        testScheduler60.settime((long) (byte) 10);
        testScheduler60.time = 97L;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, (long) (byte) 10, schedulerFunc2_59, (rx.Scheduler) testScheduler60);
        long long82 = testScheduler49.now();
        long long83 = testScheduler49.gettime();
        long long84 = testScheduler49.time;
        long long85 = testScheduler49.gettime();
        testScheduler49.time = 35L;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(subscription72);
        org.junit.Assert.assertNotNull(subscription74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        testScheduler23.triggerActions((long) (byte) 100);
        long long30 = testScheduler23.gettime();
        long long31 = testScheduler23.now();
        long long32 = testScheduler23.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, 10L, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction36.scheduler;
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction36.scheduler;
        rx.util.functions.Action0 action0_39 = null;
        rx.Subscription subscription40 = testScheduler38.schedule(action0_39);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, 0L, schedulerFunc2_22, testScheduler38);
        java.util.concurrent.TimeUnit timeUnit43 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler38.advanceTimeTo(10L, timeUnit43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(subscription40);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 1, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction14.scheduler;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction14.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler0, (long) (byte) -1, schedulerFunc2_18, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        java.lang.Comparable<java.lang.String> strComparable23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_22, strComparable23);
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction24.scheduler;
        long long26 = strComparableTimedAction24.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35L + "'", long26 == 35L);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler13.schedulePeriodically(subscriptionFunc0_20, (long) (short) 1, (long) (-1), timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        testScheduler17.settime((long) (short) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler17.getqueue();
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        testScheduler23.triggerActions((long) (byte) 100);
        long long30 = testScheduler23.gettime();
        rx.util.functions.Action0 action0_31 = null;
        rx.Subscription subscription32 = testScheduler23.schedule(action0_31);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_33 = null;
        rx.Subscription subscription34 = testScheduler23.schedule(schedulerFunc1_33);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) 0, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_39 = null;
        rx.Subscription subscription40 = testScheduler23.schedule(subscriptionFunc0_39);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_41 = null;
        rx.Subscription subscription42 = testScheduler23.schedule(subscriptionFunc0_41);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler17, (long) (short) -1, schedulerFunc2_22, subscription42);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_44 = null;
        java.util.concurrent.TimeUnit timeUnit46 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription47 = testScheduler17.schedule(subscriptionFunc0_44, (long) (short) -1, timeUnit46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(subscription32);
        org.junit.Assert.assertNotNull(subscription34);
        org.junit.Assert.assertNotNull(subscription40);
        org.junit.Assert.assertNotNull(subscription42);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction11.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.getisCancelled();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction11.getscheduler();
        long long16 = testScheduler15.now();
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler15.advanceTimeTo(97L, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        testScheduler49.time = 1;
        testScheduler49.triggerActions();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        testScheduler22.settime((long) (byte) 0);
        long long29 = testScheduler22.gettime();
        long long30 = testScheduler22.gettime();
        testScheduler22.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) 1, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler12, (long) (short) 0, schedulerFunc2_21, testScheduler41);
        testScheduler41.triggerActions((long) (short) 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        int int19 = compareActionsByTime8.compare(strComparableTimedAction13, strComparableTimedAction18);
        strComparableTimedAction18.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        strComparableTimedAction18.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction18.state;
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        int int29 = compareActionsByTime5.compare(strComparableTimedAction18, strComparableTimedAction28);
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        testScheduler30.triggerActions((long) (byte) 100);
        long long37 = testScheduler30.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (short) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = strComparableTimedAction41.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable43 = strComparableTimedAction41.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator45 = compareActionsByTime44.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean58 = strComparableTimedAction56.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction56.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction56.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction56.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        strComparableTimedAction72.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean75 = strComparableTimedAction72.getisCancelled();
        strComparableTimedAction72.cancel();
        long long77 = strComparableTimedAction72.gettime();
        int int78 = compareActionsByTime44.compare(strComparableTimedAction56, strComparableTimedAction72);
        long long79 = strComparableTimedAction56.time;
        rx.concurrency.TestScheduler testScheduler80 = strComparableTimedAction56.scheduler;
        int int81 = compareActionsByTime5.compare(strComparableTimedAction41, strComparableTimedAction56);
        rx.concurrency.TestScheduler testScheduler82 = strComparableTimedAction56.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_83 = null;
        rx.Subscription subscription84 = testScheduler82.schedule(subscriptionFunc0_83);
        rx.util.functions.Action0 action0_85 = null;
        java.util.concurrent.TimeUnit timeUnit87 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription88 = testScheduler82.schedule(action0_85, (long) '4', timeUnit87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(testScheduler42);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "" + "'", strComparable43, "");
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertNotNull(testScheduler80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(testScheduler82);
        org.junit.Assert.assertNotNull(subscription84);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction18.action;
        long long22 = strComparableTimedAction18.time;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction18.getscheduler();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction18.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNotNull(testScheduler24);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction30.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction30.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "" + "'", strComparable51, "");
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler7.settime((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime16.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime16.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime21);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime16.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime16.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime16.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        int int38 = compareActionsByTime27.compare(strComparableTimedAction32, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction32.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler39, 100L, schedulerFunc2_41, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_44 = null;
        rx.Subscription subscription45 = testScheduler39.schedule(schedulerFunc1_44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, 10L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        long long50 = strComparableTimedAction49.gettime();
        strComparableTimedAction49.cancel();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction62.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction62.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction62.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction62.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean68 = strComparableTimedAction62.isCancelled;
        int int69 = compareActionsByTime16.compare(strComparableTimedAction49, strComparableTimedAction62);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler7, (long) 0, schedulerFunc2_15, compareActionsByTime16);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime16.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime72 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime73 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = compareActionsByTime73.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = compareActionsByTime72.thenComparing(wildcardTimedActionComparator74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = wildcardTimedActionComparator74.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator77 = wildcardTimedActionComparator76.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator78 = wildcardTimedActionComparator76.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator79 = wildcardTimedActionComparator71.thenComparing(wildcardTimedActionComparator78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = wildcardTimedActionComparator78.reversed();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
        org.junit.Assert.assertNotNull(atomicBoolean68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator77);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator78);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator79);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = wildcardTimedActionComparator2.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler11 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        int int16 = compareActionsByTime5.compare(strComparableTimedAction10, strComparableTimedAction15);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator17 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime5.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        int int30 = compareActionsByTime19.compare(strComparableTimedAction24, strComparableTimedAction29);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        int int42 = compareActionsByTime31.compare(strComparableTimedAction36, strComparableTimedAction41);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime19.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction49.getscheduler();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction49.getscheduler();
        strComparableTimedAction49.cancel();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = strComparableTimedAction63.getscheduler();
        int int65 = compareActionsByTime19.compare(strComparableTimedAction49, strComparableTimedAction63);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler72 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) (byte) 10, schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "");
        int int77 = compareActionsByTime66.compare(strComparableTimedAction71, strComparableTimedAction76);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime78 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler79 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler79, (long) (byte) 10, schedulerFunc2_81, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler84 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_86 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler84, (long) (byte) 10, schedulerFunc2_86, (java.lang.Comparable<java.lang.String>) "");
        int int89 = compareActionsByTime78.compare(strComparableTimedAction83, strComparableTimedAction88);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = compareActionsByTime66.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = wildcardTimedActionComparator90.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = compareActionsByTime19.thenComparing(wildcardTimedActionComparator90);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator90.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator94 = wildcardTimedActionComparator90.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator95 = wildcardTimedActionComparator94.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator96 = wildcardTimedActionComparator18.thenComparing(wildcardTimedActionComparator95);
        java.lang.Class<?> wildcardClass97 = wildcardTimedActionComparator18.getClass();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator17);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertNotNull(testScheduler64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator94);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator95);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        testScheduler0.settime((long) (short) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction25.getscheduler();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction25.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction25.action;
        java.lang.Comparable<java.lang.String> strComparable35 = strComparableTimedAction25.state;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction25.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) '#', schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_45 = null;
        rx.Subscription subscription46 = testScheduler36.schedule(action0_45);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue47 = testScheduler36.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction54.getisCancelled();
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler testScheduler60 = strComparableTimedAction54.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction54.action;
        java.lang.Class<?> wildcardClass62 = strComparableTimedAction54.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler36, (long) 10, schedulerFunc2_49, (java.lang.reflect.AnnotatedElement) wildcardClass62);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler0, (long) (byte) 1, schedulerFunc2_19, (java.lang.reflect.GenericDeclaration) wildcardClass62);
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertEquals("'" + strComparable35 + "' != '" + "" + "'", strComparable35, "");
        org.junit.Assert.assertNotNull(testScheduler36);
        org.junit.Assert.assertNotNull(subscription46);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertNull(testScheduler60);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 10;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler21.schedule(action0_22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) -1, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction17.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction17.isCancelled;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction17.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction28.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler35, 100L, schedulerFunc2_37, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        rx.Subscription subscription41 = testScheduler35.schedule(schedulerFunc1_40);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, 10L, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction45.cancel();
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction45.scheduler;
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction45.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction45.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler20, 32L, schedulerFunc2_22, (java.io.Serializable) atomicBoolean49);
        long long51 = testScheduler20.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "hi!" + "'", strComparable48, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        testScheduler15.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(subscriptionFunc0_18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue9 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 1L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue9);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        testScheduler9.triggerActions((long) (byte) 100);
        long long16 = testScheduler9.gettime();
        long long17 = testScheduler9.now();
        long long18 = testScheduler9.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction22.getstate();
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction22.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction22.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction22.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction22.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean41 = strComparableTimedAction39.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = strComparableTimedAction39.getaction();
        int int43 = compareActionsByTime0.compare(strComparableTimedAction22, strComparableTimedAction39);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        int int55 = compareActionsByTime44.compare(strComparableTimedAction49, strComparableTimedAction54);
        strComparableTimedAction54.cancel();
        rx.concurrency.TestScheduler testScheduler57 = strComparableTimedAction54.scheduler;
        long long58 = strComparableTimedAction54.gettime();
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction54.state;
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        testScheduler67.triggerActions((long) (byte) 100);
        long long74 = testScheduler67.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler60, (long) '4', schedulerFunc2_66, (rx.Scheduler) testScheduler67);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler testScheduler78 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_79 = null;
        rx.Subscription subscription80 = testScheduler78.schedule(schedulerFunc1_79);
        testScheduler78.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_83 = null;
        rx.Subscription subscription84 = testScheduler78.schedule(schedulerFunc1_83);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler67, (long) '4', schedulerFunc2_77, (rx.Scheduler) testScheduler78);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler67, (long) 'a', schedulerFunc2_87, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_91 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction93 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (short) 1, schedulerFunc2_91, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_94 = strComparableTimedAction93.getaction();
        int int95 = compareActionsByTime0.compare(strComparableTimedAction54, strComparableTimedAction93);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean26);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean41);
        org.junit.Assert.assertNull(schedulerFunc2_42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(testScheduler57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "" + "'", strComparable59, "");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(subscription80);
        org.junit.Assert.assertNotNull(subscription84);
        org.junit.Assert.assertNull(schedulerFunc2_94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(action0_9);
        long long11 = testScheduler0.time;
        testScheduler0.settime(0L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription19 = testScheduler12.schedulePeriodically(subscriptionFunc0_15, (long) (-1), (long) '#', timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime17.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) (byte) 10, schedulerFunc2_16, compareActionsByTime17);
        long long32 = testScheduler0.time;
        testScheduler0.settime((long) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_35 = null;
        java.util.concurrent.TimeUnit timeUnit38 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription39 = testScheduler0.schedulePeriodically(schedulerFunc1_35, 52L, (-1L), timeUnit38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.settime((long) (byte) 0);
        rx.util.functions.Action0 action0_16 = null;
        rx.Subscription subscription17 = testScheduler13.schedule(action0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler13.getqueue();
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(action0_19);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        rx.concurrency.TestScheduler testScheduler35 = strComparableTimedAction28.getscheduler();
        testScheduler35.triggerActions((long) (byte) 100);
        testScheduler35.settime(0L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) -1, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Action0 action0_44 = null;
        rx.Subscription subscription45 = testScheduler35.schedule(action0_44);
        testScheduler35.settime((long) (short) 0);
        long long48 = testScheduler35.now();
        long long49 = testScheduler35.gettime();
        long long50 = testScheduler35.time;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) 1, schedulerFunc2_22, (rx.Scheduler) testScheduler35);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.triggerActions((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(testScheduler35);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler7.settime((long) (short) 0);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler7.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler7.schedule(subscriptionFunc0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 100, schedulerFunc2_18, strComparable19);
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(testScheduler21);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction11.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction11.state;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        java.lang.Class<?> wildcardClass18 = atomicBoolean17.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction9.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction9.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction9.isCancelled;
        long long13 = strComparableTimedAction9.gettime();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction9.getscheduler();
        testScheduler14.settime(97L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler14.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler14.queue;
        rx.util.functions.Action0 action0_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler14.schedule(action0_19, 1L, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
        org.junit.Assert.assertNull(schedulerFunc2_11);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 97L + "'", long13 == 97L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        long long19 = testScheduler12.time;
        long long20 = testScheduler12.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(subscriptionFunc0_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 0, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler0.queue;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) -1, schedulerFunc2_53, strComparable54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 97L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction59.cancel();
        java.lang.Comparable<java.lang.String> strComparable61 = strComparableTimedAction59.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable61 + "' != '" + "" + "'", strComparable61, "");
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        testScheduler18.triggerActions((long) (byte) 100);
        long long25 = testScheduler18.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (short) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.scheduler;
        long long35 = testScheduler34.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler testScheduler38 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) ' ', schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean43 = strComparableTimedAction42.getisCancelled();
        java.lang.Class<?> wildcardClass44 = strComparableTimedAction42.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler34, (long) ' ', schedulerFunc2_37, (java.lang.reflect.Type) wildcardClass44);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (-1L), schedulerFunc2_17, (java.lang.Object) schedulerFunc2_37);
        testScheduler13.settime((long) (short) 100);
        rx.util.functions.Action0 action0_49 = null;
        rx.Subscription subscription50 = testScheduler13.schedule(action0_49);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_51 = null;
        rx.Subscription subscription52 = testScheduler13.schedule(subscriptionFunc0_51);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_53 = null;
        rx.Subscription subscription54 = testScheduler13.schedule(subscriptionFunc0_53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(subscription50);
        org.junit.Assert.assertNotNull(subscription52);
        org.junit.Assert.assertNotNull(subscription54);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction13.scheduler;
        strComparableTimedAction13.cancel();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription22 = testScheduler18.schedule(subscriptionFunc0_19, 32L, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (byte) 0);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.gettime();
        testScheduler0.time = ' ';
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue11 = testScheduler0.getqueue();
        testScheduler0.triggerActions((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue11);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        long long15 = strComparableTimedAction10.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.scheduler;
        long long19 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(subscriptionFunc0_21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.time = 10L;
        rx.util.functions.Action0 action0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(action0_54);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue56 = testScheduler49.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue56);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        int int15 = compareActionsByTime4.compare(strComparableTimedAction9, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction14.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction14.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction14.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction14.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, (long) (byte) 1, schedulerFunc2_3, strComparableTimedAction14);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction14.getstate();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        testScheduler0.time = 97L;
        testScheduler0.triggerActions(0L);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        java.util.concurrent.TimeUnit timeUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription16 = testScheduler0.schedule(subscriptionFunc0_13, 52L, timeUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(schedulerFunc1_15);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler14.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler14.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (-1), schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) '4', schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction26.action;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNull(schedulerFunc2_27);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler7.settime(32L);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 35L, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        long long22 = testScheduler7.now();
        testScheduler7.triggerActions(0L);
        long long25 = testScheduler7.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler testScheduler40 = strComparableTimedAction33.getscheduler();
        testScheduler40.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        testScheduler45.triggerActions((long) (byte) 100);
        long long52 = testScheduler45.gettime();
        long long53 = testScheduler45.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler testScheduler56 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) ' ', schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction60.getisCancelled();
        java.lang.Class<?> wildcardClass62 = strComparableTimedAction60.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler45, 10L, schedulerFunc2_55, (java.lang.reflect.AnnotatedElement) wildcardClass62);
        rx.util.functions.Action0 action0_64 = null;
        rx.Subscription subscription65 = testScheduler45.schedule(action0_64);
        rx.util.functions.Action0 action0_66 = null;
        rx.Subscription subscription67 = testScheduler45.schedule(action0_66);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler40, 10L, schedulerFunc2_44, subscription67);
        testScheduler40.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) 100, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, 100L, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass79 = strComparableTimedAction78.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler7, (long) 100, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass79);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(testScheduler40);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(subscription65);
        org.junit.Assert.assertNotNull(subscription67);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        testScheduler0.settime((long) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.getqueue();
        long long15 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        testScheduler25.triggerActions((long) (byte) 100);
        long long32 = testScheduler25.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler18, (long) '4', schedulerFunc2_24, (rx.Scheduler) testScheduler25);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_34 = null;
        rx.Subscription subscription35 = testScheduler18.schedule(subscriptionFunc0_34);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue36 = testScheduler18.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue37 = testScheduler18.getqueue();
        testScheduler18.time = 100;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        rx.Subscription subscription41 = testScheduler18.schedule(schedulerFunc1_40);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 1, schedulerFunc2_17, testScheduler18);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue36);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue37);
        org.junit.Assert.assertNotNull(subscription41);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = strComparableTimedAction22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (short) -1);
        testScheduler0.triggerActions();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        long long14 = testScheduler0.now();
        long long15 = testScheduler0.gettime();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.scheduler;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler13.now();
        long long20 = testScheduler13.time;
        long long21 = testScheduler13.time;
        long long22 = testScheduler13.now();
        long long23 = testScheduler13.time;
        rx.util.functions.Action0 action0_24 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler13.schedule(action0_24, (long) (short) 0, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, 35L, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler19.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_25 = null;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription29 = testScheduler19.schedulePeriodically(subscriptionFunc0_25, (long) (short) 100, (long) 10, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler15.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler15.schedule(subscriptionFunc0_19);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.getqueue();
        long long16 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime20.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime19.thenComparing(wildcardTimedActionComparator21);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime19.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime19.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime24);
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        testScheduler34.triggerActions((long) (byte) 100);
        long long41 = testScheduler34.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler27, (long) '4', schedulerFunc2_33, (rx.Scheduler) testScheduler34);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 100, schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        testScheduler51.triggerActions((long) (byte) 100);
        long long58 = testScheduler51.gettime();
        long long59 = testScheduler51.now();
        long long60 = testScheduler51.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, 10L, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction64.getisCancelled();
        int int66 = compareActionsByTime24.compare(strComparableTimedAction50, strComparableTimedAction64);
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction50.state;
        rx.concurrency.TestScheduler testScheduler68 = strComparableTimedAction50.getscheduler();
        testScheduler68.triggerActions((long) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, 0L, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        testScheduler68.triggerActions((long) (byte) 0);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler13, (-1L), schedulerFunc2_18, testScheduler68);
        rx.util.functions.Action0 action0_78 = null;
        java.util.concurrent.TimeUnit timeUnit81 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription82 = testScheduler68.schedulePeriodically(action0_78, (long) 10, (long) 1, timeUnit81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
        org.junit.Assert.assertNotNull(testScheduler68);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) (short) -1, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        long long12 = testScheduler0.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(schedulerFunc1_13);
        testScheduler0.time = ' ';
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        long long24 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime28.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime27.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler19, (long) 10, schedulerFunc2_26, compareActionsByTime27);
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        testScheduler33.triggerActions((long) (byte) 100);
        long long40 = testScheduler33.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (short) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler56, (long) (byte) 10, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        int int61 = compareActionsByTime50.compare(strComparableTimedAction55, strComparableTimedAction60);
        strComparableTimedAction60.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction60.getisCancelled();
        long long64 = strComparableTimedAction60.time;
        long long65 = strComparableTimedAction60.gettime();
        int int66 = compareActionsByTime27.compare(strComparableTimedAction48, strComparableTimedAction60);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) (byte) 10, schedulerFunc2_18, compareActionsByTime27);
        long long68 = testScheduler0.now();
        java.lang.Class<?> wildcardClass69 = testScheduler0.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_3 = null;
        rx.Subscription subscription4 = testScheduler0.schedule(schedulerFunc1_3);
        long long5 = testScheduler0.gettime();
        long long6 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction12 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_10, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction12.scheduler;
        java.lang.Class<?> wildcardClass14 = strComparableTimedAction12.getClass();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertNotNull(subscription4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.scheduler;
        long long17 = strComparableTimedAction15.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction45.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime62.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator64 = compareActionsByTime61.thenComparing(wildcardTimedActionComparator63);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator65 = compareActionsByTime49.thenComparing(wildcardTimedActionComparator64);
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable71 = strComparableTimedAction70.getstate();
        rx.concurrency.TestScheduler testScheduler72 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) ' ', schedulerFunc2_74, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean77 = strComparableTimedAction76.getisCancelled();
        int int78 = compareActionsByTime49.compare(strComparableTimedAction70, strComparableTimedAction76);
        int int79 = compareActionsByTime0.compare(strComparableTimedAction45, strComparableTimedAction70);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator80 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = wildcardTimedActionComparator80.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = wildcardTimedActionComparator81.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = wildcardTimedActionComparator82.reversed();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator64);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator65);
        org.junit.Assert.assertEquals("'" + strComparable71 + "' != '" + "" + "'", strComparable71, "");
        org.junit.Assert.assertNotNull(atomicBoolean77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator80);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable33 = strComparableTimedAction32.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = strComparableTimedAction32.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean35 = strComparableTimedAction32.isCancelled;
        rx.concurrency.TestScheduler testScheduler36 = strComparableTimedAction32.scheduler;
        java.lang.Class<?> wildcardClass37 = testScheduler36.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) 100, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass37);
        rx.util.functions.Action0 action0_39 = null;
        java.util.concurrent.TimeUnit timeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription43 = testScheduler0.schedulePeriodically(action0_39, (long) (short) -1, (long) '#', timeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertEquals("'" + strComparable33 + "' != '" + "" + "'", strComparable33, "");
        org.junit.Assert.assertNull(schedulerFunc2_34);
        org.junit.Assert.assertNotNull(atomicBoolean35);
        org.junit.Assert.assertNotNull(testScheduler36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_10 = null;
        rx.Subscription subscription11 = testScheduler0.schedule(schedulerFunc1_10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction15.getstate();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler17.triggerActions((long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertNotNull(subscription11);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions(97L);
        testScheduler5.settime((long) '#');
        long long14 = testScheduler5.time;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        testScheduler15.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.CharSequence charSequence19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler15, (long) ' ', schedulerFunc2_18, charSequence19);
        testScheduler15.triggerActions((long) ' ');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction22.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction22.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = strComparableTimedAction22.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction44.getstate();
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction44.state;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction44.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean72 = strComparableTimedAction59.isCancelled;
        long long73 = strComparableTimedAction59.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean74 = strComparableTimedAction59.isCancelled;
        rx.concurrency.TestScheduler testScheduler75 = strComparableTimedAction59.getscheduler();
        rx.util.functions.Action0 action0_76 = null;
        java.util.concurrent.TimeUnit timeUnit78 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription79 = testScheduler75.schedule(action0_76, (long) (short) 1, timeUnit78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean74);
        org.junit.Assert.assertNotNull(testScheduler75);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler13.schedule(subscriptionFunc0_19);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        testScheduler23.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        rx.Subscription subscription31 = testScheduler23.schedule(schedulerFunc1_30);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_32 = null;
        rx.Subscription subscription33 = testScheduler23.schedule(schedulerFunc1_32);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler13, (long) (byte) 10, schedulerFunc2_22, subscription33);
        long long35 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 100, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_40 = null;
        rx.Subscription subscription41 = testScheduler13.schedule(schedulerFunc1_40);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_42 = null;
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription45 = testScheduler13.schedule(subscriptionFunc0_42, (long) '4', timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(subscription33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(subscription41);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        java.lang.Comparable<java.lang.String> strComparable54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) -1, schedulerFunc2_53, strComparable54);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 52L, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction59.getstate();
        long long61 = strComparableTimedAction59.gettime();
        java.lang.Class<?> wildcardClass62 = strComparableTimedAction59.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction13.getstate();
        java.lang.Class<?> wildcardClass16 = strComparable15.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "hi!" + "'", strComparable15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler17.schedule(subscriptionFunc0_18);
        long long20 = testScheduler17.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, 1L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        long long25 = testScheduler17.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        long long7 = strComparableTimedAction6.time;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction6.getscheduler();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler8);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        long long20 = testScheduler0.time;
        long long21 = testScheduler0.time;
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler0.schedule(action0_22);
        long long24 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction28.cancel();
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction28.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction28.getaction();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertNull(schedulerFunc2_31);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 97L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction22.isCancelled;
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.getscheduler();
        long long25 = testScheduler24.now();
        long long26 = testScheduler24.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) 1, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        long long31 = strComparableTimedAction30.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction44.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction44.isCancelled;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(atomicBoolean49);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction30.getscheduler();
        long long48 = testScheduler47.time;
        java.util.concurrent.TimeUnit timeUnit50 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler47.advanceTimeTo((long) 10, timeUnit50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler15.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.time = 0L;
        testScheduler0.time = 97L;
        org.junit.Assert.assertNotNull(subscription2);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(schedulerFunc1_9);
        long long11 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '4', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = strComparableTimedAction20.time;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction20.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler22.schedule(schedulerFunc1_23, (long) '4', timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler14.schedule(action0_22);
        testScheduler14.time = (byte) -1;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, 0L, schedulerFunc2_13, (rx.Scheduler) testScheduler14);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) (short) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction22.cancel();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction22.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction22.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction22.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNull(schedulerFunc2_26);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler13.schedule(schedulerFunc1_14);
        testScheduler13.time = (short) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) -1, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler13.schedule(schedulerFunc1_22);
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo((long) 100, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.time = (byte) 1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue8 = testScheduler0.getqueue();
        rx.util.functions.Action0 action0_9 = null;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription13 = testScheduler0.schedulePeriodically(action0_9, (long) (short) 100, (long) (byte) 0, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue8);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        testScheduler15.time = ' ';
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(schedulerFunc1_18);
        long long20 = testScheduler15.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 0L, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction24.action;
        long long26 = strComparableTimedAction24.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction19.cancel();
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction19.scheduler;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 1, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction26.getisCancelled();
        rx.concurrency.TestScheduler testScheduler28 = strComparableTimedAction26.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean29 = strComparableTimedAction26.getisCancelled();
        long long30 = strComparableTimedAction26.gettime();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNotNull(testScheduler28);
        org.junit.Assert.assertNotNull(atomicBoolean29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        long long5 = strComparableTimedAction4.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = strComparableTimedAction4.getaction();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.state;
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertNull(schedulerFunc2_7);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "" + "'", strComparable8, "");
        org.junit.Assert.assertNotNull(testScheduler9);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        long long18 = testScheduler17.gettime();
        testScheduler17.time = (short) 100;
        long long21 = testScheduler17.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) 1, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) '4', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        int int28 = compareActionsByTime17.compare(strComparableTimedAction22, strComparableTimedAction27);
        strComparableTimedAction27.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction27.getisCancelled();
        strComparableTimedAction27.cancel();
        java.lang.Comparable<java.lang.String> strComparable32 = strComparableTimedAction27.state;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        java.lang.Comparable<java.lang.String> strComparable45 = strComparableTimedAction43.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction43.action;
        java.lang.Comparable<java.lang.String> strComparable47 = strComparableTimedAction43.state;
        long long48 = strComparableTimedAction43.time;
        java.lang.Comparable<java.lang.String> strComparable49 = strComparableTimedAction43.state;
        int int50 = compareActionsByTime0.compare(strComparableTimedAction27, strComparableTimedAction43);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime52.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = compareActionsByTime51.thenComparing(wildcardTimedActionComparator53);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = compareActionsByTime51.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime56 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime56.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime51.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime56);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        strComparableTimedAction69.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean72 = strComparableTimedAction69.getisCancelled();
        strComparableTimedAction69.cancel();
        java.lang.Comparable<java.lang.String> strComparable74 = strComparableTimedAction69.state;
        rx.concurrency.TestScheduler testScheduler75 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_77 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler75, (long) (byte) 10, schedulerFunc2_77, (java.lang.Comparable<java.lang.String>) "");
        int int80 = compareActionsByTime56.compare(strComparableTimedAction69, strComparableTimedAction79);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = compareActionsByTime56.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime56);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator83 = compareActionsByTime0.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "" + "'", strComparable32, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + strComparable45 + "' != '" + "" + "'", strComparable45, "");
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "" + "'", strComparable47, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable49 + "' != '" + "" + "'", strComparable49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean72);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "" + "'", strComparable74, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator83);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        long long16 = testScheduler15.gettime();
        long long17 = testScheduler15.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        rx.Subscription subscription19 = testScheduler15.schedule(subscriptionFunc0_18);
        testScheduler15.time = 100;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler0.settime((long) '#');
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable24 = strComparableTimedAction23.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction23.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = strComparableTimedAction23.getaction();
        long long27 = strComparableTimedAction23.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable24 + "' != '" + "hi!" + "'", strComparable24, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNull(schedulerFunc2_26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 0, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_5 = strComparableTimedAction4.action;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.state;
        long long7 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.getscheduler();
        org.junit.Assert.assertNull(schedulerFunc2_5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(testScheduler8);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        long long52 = testScheduler49.now();
        long long53 = testScheduler49.gettime();
        testScheduler49.settime(32L);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        testScheduler58.triggerActions((long) (byte) 100);
        long long65 = testScheduler58.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (short) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction73.scheduler;
        java.lang.Comparable<java.lang.String> strComparable75 = strComparableTimedAction73.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = strComparableTimedAction73.action;
        rx.concurrency.TestScheduler testScheduler77 = strComparableTimedAction73.getscheduler();
        testScheduler77.triggerActions();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler49, 0L, schedulerFunc2_57, (rx.Scheduler) testScheduler77);
        rx.util.functions.Action0 action0_80 = null;
        java.util.concurrent.TimeUnit timeUnit83 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription84 = testScheduler49.schedulePeriodically(action0_80, 100L, (long) (byte) -1, timeUnit83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertEquals("'" + strComparable75 + "' != '" + "" + "'", strComparable75, "");
        org.junit.Assert.assertNull(schedulerFunc2_76);
        org.junit.Assert.assertNotNull(testScheduler77);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        testScheduler0.triggerActions();
        testScheduler0.triggerActions((long) (byte) 1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.queue;
        long long16 = testScheduler0.now();
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo((long) (short) 10, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        long long11 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction15.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction15.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction15.action;
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler0.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        long long30 = testScheduler21.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler testScheduler33 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler21, (long) 0, schedulerFunc2_32, testScheduler33);
        long long35 = testScheduler21.gettime();
        long long36 = testScheduler21.now();
        long long37 = testScheduler21.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue38 = testScheduler21.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        testScheduler41.triggerActions((long) (byte) 100);
        long long48 = testScheduler41.gettime();
        long long49 = testScheduler41.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_50 = null;
        rx.Subscription subscription51 = testScheduler41.schedule(subscriptionFunc0_50);
        long long52 = testScheduler41.now();
        testScheduler41.triggerActions((long) (-1));
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        int int68 = compareActionsByTime57.compare(strComparableTimedAction62, strComparableTimedAction67);
        strComparableTimedAction67.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean70 = strComparableTimedAction67.getisCancelled();
        long long71 = strComparableTimedAction67.time;
        long long72 = strComparableTimedAction67.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean73 = strComparableTimedAction67.isCancelled;
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction67.scheduler;
        java.lang.Class<?> wildcardClass75 = strComparableTimedAction67.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction76 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler41, (long) 100, schedulerFunc2_56, (java.io.Serializable) wildcardClass75);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler21, 100L, schedulerFunc2_40, (java.lang.reflect.GenericDeclaration) wildcardClass75);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (short) 100, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler21.triggerActions((long) (short) 10);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (short) 0, schedulerFunc2_20, testScheduler21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_85 = null;
        java.util.concurrent.TimeUnit timeUnit87 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription88 = testScheduler21.schedule(schedulerFunc1_85, (long) (byte) 1, timeUnit87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue38);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10L + "'", long72 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean73);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        java.lang.Comparable<java.lang.String> strComparable26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_25, strComparable26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean42 = strComparableTimedAction40.getisCancelled();
        rx.concurrency.TestScheduler testScheduler43 = strComparableTimedAction40.scheduler;
        testScheduler43.time = 100;
        long long46 = testScheduler43.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler43.schedule(schedulerFunc1_47);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime51 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler57 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler57, (long) (byte) 10, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        int int62 = compareActionsByTime51.compare(strComparableTimedAction56, strComparableTimedAction61);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction56.getscheduler();
        long long64 = testScheduler63.gettime();
        testScheduler63.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, 10L, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction70.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler43, (long) (short) -1, schedulerFunc2_50, (rx.Scheduler) testScheduler71);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) (-1), schedulerFunc2_29, (java.lang.Object) testScheduler71);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue78 = testScheduler0.queue;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean42);
        org.junit.Assert.assertNotNull(testScheduler43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertNotNull(subscription48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue78);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.action;
        long long17 = strComparableTimedAction10.time;
        long long18 = strComparableTimedAction10.gettime();
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.getscheduler();
        testScheduler20.settime((long) ' ');
        long long23 = testScheduler20.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) 0, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = strComparableTimedAction27.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertNotNull(testScheduler28);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        testScheduler30.settime(100L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_33 = null;
        rx.Subscription subscription34 = testScheduler30.schedule(schedulerFunc1_33);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        testScheduler37.triggerActions((long) (byte) 100);
        long long44 = testScheduler37.gettime();
        long long45 = testScheduler37.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_46 = null;
        rx.Subscription subscription47 = testScheduler37.schedule(subscriptionFunc0_46);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime50 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime50.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime52 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler58 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler58, (long) (byte) 10, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        int int63 = compareActionsByTime52.compare(strComparableTimedAction57, strComparableTimedAction62);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction62.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction62.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean66 = strComparableTimedAction62.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable67 = strComparableTimedAction62.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime68 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (byte) 10, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        int int79 = compareActionsByTime68.compare(strComparableTimedAction73, strComparableTimedAction78);
        strComparableTimedAction78.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean81 = strComparableTimedAction78.getisCancelled();
        strComparableTimedAction78.cancel();
        long long83 = strComparableTimedAction78.gettime();
        int int84 = compareActionsByTime50.compare(strComparableTimedAction62, strComparableTimedAction78);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean85 = strComparableTimedAction62.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler37, 10L, schedulerFunc2_49, (java.io.Serializable) atomicBoolean85);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue87 = testScheduler37.queue;
        long long88 = testScheduler37.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_90 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction92 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (short) -1, schedulerFunc2_90, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction93 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler30, 0L, schedulerFunc2_36, testScheduler37);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_95 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction97 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (-1L), schedulerFunc2_95, (java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler37.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(subscription34);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(subscription47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertNotNull(atomicBoolean66);
        org.junit.Assert.assertEquals("'" + strComparable67 + "' != '" + "" + "'", strComparable67, "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean85);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.getaction();
        long long26 = strComparableTimedAction19.time;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime27.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime26.thenComparing(wildcardTimedActionComparator28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime26.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime31.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime26.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction39.getscheduler();
        testScheduler46.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (-1), schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = strComparableTimedAction52.action;
        rx.concurrency.TestScheduler testScheduler54 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) ' ', schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction58.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction58.getstate();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction58.getscheduler();
        int int62 = compareActionsByTime26.compare(strComparableTimedAction52, strComparableTimedAction58);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction58.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction58.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction58.getaction();
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction58.getstate();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableTimedAction71.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction71.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (short) 1, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) '4', schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "hi!");
        int int83 = compareActionsByTime0.compare(strComparableTimedAction58, strComparableTimedAction82);
        java.lang.Comparable<java.lang.String> strComparable84 = strComparableTimedAction82.state;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNull(schedulerFunc2_53);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertNull(testScheduler61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "hi!" + "'", strComparable66, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable72 + "' != '" + "" + "'", strComparable72, "");
        org.junit.Assert.assertNull(schedulerFunc2_73);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertEquals("'" + strComparable84 + "' != '" + "hi!" + "'", strComparable84, "hi!");
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction29.cancel();
        strComparableTimedAction29.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction29.getisCancelled();
        java.lang.Class<?> wildcardClass33 = strComparableTimedAction29.getClass();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) '#', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction29.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (short) 1, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_35 = null;
        rx.Subscription subscription36 = testScheduler30.schedule(schedulerFunc1_35);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) '#', schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable41 = strComparableTimedAction40.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = strComparableTimedAction40.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNotNull(subscription36);
        org.junit.Assert.assertEquals("'" + strComparable41 + "' != '" + "" + "'", strComparable41, "");
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        testScheduler13.triggerActions((long) (byte) 100);
        long long20 = testScheduler13.gettime();
        long long21 = testScheduler13.now();
        long long22 = testScheduler13.time;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler13.schedule(schedulerFunc1_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, 0L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = strComparableTimedAction33.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) 'a', schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        testScheduler34.triggerActions((long) (short) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, 10L, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        int int45 = compareActionsByTime0.compare(strComparableTimedAction28, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction28.getisCancelled();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(testScheduler34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(atomicBoolean46);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "" + "'", strComparable6, "");
        org.junit.Assert.assertNotNull(atomicBoolean7);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator22.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = wildcardTimedActionComparator18.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) '4', schedulerFunc2_15, (java.lang.Object) wildcardTimedActionComparator38);
        testScheduler13.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_41 = null;
        rx.Subscription subscription42 = testScheduler13.schedule(subscriptionFunc0_41);
        long long43 = testScheduler13.time;
        testScheduler13.settime((long) 0);
        long long46 = testScheduler13.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (-1L), schedulerFunc2_48, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(subscription42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 97L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler5.time = (byte) 1;
        long long16 = testScheduler5.now();
        long long17 = testScheduler5.gettime();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        int int31 = compareActionsByTime20.compare(strComparableTimedAction25, strComparableTimedAction30);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean32 = strComparableTimedAction30.getisCancelled();
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction30.scheduler;
        testScheduler33.time = 100;
        long long36 = testScheduler33.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_37 = null;
        rx.Subscription subscription38 = testScheduler33.schedule(schedulerFunc1_37);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction46.getscheduler();
        long long54 = testScheduler53.gettime();
        testScheduler53.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, 10L, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction60.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler33, (long) (short) -1, schedulerFunc2_40, (rx.Scheduler) testScheduler61);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler5, 100L, schedulerFunc2_19, testScheduler33);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue64 = testScheduler5.getqueue();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean32);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L + "'", long36 == 100L);
        org.junit.Assert.assertNotNull(subscription38);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(testScheduler61);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue64);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler5.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler5, (long) (short) 10, schedulerFunc2_12, (java.lang.CharSequence) "hi!");
        testScheduler5.triggerActions((-1L));
        testScheduler5.time = (byte) -1;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean6 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = strComparableTimedAction4.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction4.getstate();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNotNull(atomicBoolean6);
        org.junit.Assert.assertEquals("'" + strComparable7 + "' != '" + "" + "'", strComparable7, "");
        org.junit.Assert.assertNull(schedulerFunc2_8);
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "" + "'", strComparable10, "");
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction20.getscheduler();
        long long22 = testScheduler21.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 0, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        long long27 = strComparableTimedAction26.time;
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableTimedAction26.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable28 + "' != '" + "hi!" + "'", strComparable28, "hi!");
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        rx.util.functions.Action0 action0_27 = null;
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription31 = testScheduler26.schedulePeriodically(action0_27, (long) 0, (long) (short) -1, timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(testScheduler26);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        long long25 = testScheduler0.now();
        long long26 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler testScheduler29 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (short) 1, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean34 = strComparableTimedAction33.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, (long) '4', schedulerFunc2_28, atomicBoolean34);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_36 = null;
        java.util.concurrent.TimeUnit timeUnit38 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription39 = testScheduler0.schedule(subscriptionFunc0_36, (long) ' ', timeUnit38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean34);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        testScheduler0.triggerActions();
        long long6 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "hi!");
        long long11 = strComparableTimedAction10.time;
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction19.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = strComparableTimedAction19.action;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime29.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime41);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction59.getscheduler();
        rx.concurrency.TestScheduler testScheduler67 = strComparableTimedAction59.getscheduler();
        strComparableTimedAction59.cancel();
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction73.getscheduler();
        int int75 = compareActionsByTime29.compare(strComparableTimedAction59, strComparableTimedAction73);
        rx.concurrency.TestScheduler testScheduler76 = strComparableTimedAction73.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_78 = null;
        rx.concurrency.TestScheduler testScheduler79 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler79, (long) ' ', schedulerFunc2_81, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean84 = strComparableTimedAction83.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean85 = strComparableTimedAction83.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler76, (long) (-1), schedulerFunc2_78, (java.lang.Object) strComparableTimedAction83);
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction83.scheduler;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction88 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler26, 100L, schedulerFunc2_28, (java.lang.Object) testScheduler87);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_89 = null;
        java.util.concurrent.TimeUnit timeUnit92 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription93 = testScheduler26.schedulePeriodically(subscriptionFunc0_89, (long) 10, (long) (byte) 0, timeUnit92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNull(schedulerFunc2_25);
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(testScheduler67);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(testScheduler76);
        org.junit.Assert.assertNotNull(atomicBoolean84);
        org.junit.Assert.assertNotNull(atomicBoolean85);
        org.junit.Assert.assertNull(testScheduler87);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime16 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime16.thenComparing(wildcardTimedActionComparator18);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime20 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = compareActionsByTime21.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator23 = compareActionsByTime20.thenComparing(wildcardTimedActionComparator22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = wildcardTimedActionComparator22.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = wildcardTimedActionComparator22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = wildcardTimedActionComparator18.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime25);
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) '4', schedulerFunc2_15, (java.lang.Object) wildcardTimedActionComparator38);
        testScheduler13.triggerActions();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_41 = null;
        rx.Subscription subscription42 = testScheduler13.schedule(subscriptionFunc0_41);
        long long43 = testScheduler13.time;
        testScheduler13.settime((long) 0);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_46 = null;
        rx.Subscription subscription47 = testScheduler13.schedule(subscriptionFunc0_46);
        testScheduler13.settime((long) 100);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator23);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertNotNull(subscription42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(subscription47);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = wildcardTimedActionComparator27.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler19.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "" + "'", strComparable14, "");
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        strComparableTimedAction10.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.action;
        long long16 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) '#', schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler17.schedule(schedulerFunc1_22, 10L, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, 97L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction19.getstate();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertEquals("'" + strComparable21 + "' != '" + "" + "'", strComparable21, "");
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (short) 100, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = strComparableTimedAction26.action;
        java.lang.Comparable<java.lang.String> strComparable28 = strComparableTimedAction26.getstate();
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNull(schedulerFunc2_27);
        org.junit.Assert.assertEquals("'" + strComparable28 + "' != '" + "hi!" + "'", strComparable28, "hi!");
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction11.getstate();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.lang.Comparable<java.lang.String> strComparable14 = strComparableTimedAction11.getstate();
        strComparableTimedAction11.cancel();
        long long16 = strComparableTimedAction11.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction11.getaction();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "hi!" + "'", strComparable12, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "hi!" + "'", strComparable14, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_17);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 100, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction14.getaction();
        strComparableTimedAction14.cancel();
        long long17 = strComparableTimedAction14.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 32L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        long long37 = testScheduler0.gettime();
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction5.getisCancelled();
        long long14 = strComparableTimedAction5.time;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.getstate();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction5.state;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strComparableTimedAction5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) ' ', schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean19 = strComparableTimedAction18.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction18.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction18.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler0, 0L, schedulerFunc2_13, atomicBoolean21);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler0.schedule(schedulerFunc1_23);
        testScheduler0.triggerActions((long) (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean19);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(subscription24);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction30.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = strComparableTimedAction30.action;
        long long50 = strComparableTimedAction30.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNull(schedulerFunc2_49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(schedulerFunc1_12);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean20 = strComparableTimedAction19.getisCancelled();
        long long21 = strComparableTimedAction19.gettime();
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(atomicBoolean20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction5.getisCancelled();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction5.scheduler;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction5.scheduler;
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler20.schedulePeriodically(schedulerFunc1_21, 10L, (long) '4', timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertNotNull(testScheduler20);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_21 = null;
        java.io.Serializable serializable22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler0, (long) (byte) 10, schedulerFunc2_21, serializable22);
        long long24 = testScheduler0.gettime();
        long long25 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        java.lang.Comparable<java.lang.String> strComparable28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_27, strComparable28);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) -1, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.settime((long) (short) 100);
        testScheduler0.settime((long) 100);
        testScheduler0.settime((long) 'a');
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction10.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction10.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        testScheduler17.settime((long) (short) 0);
        testScheduler17.triggerActions((long) (byte) 0);
        java.lang.Class<?> wildcardClass22 = testScheduler17.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.triggerActions((long) (-1));
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler0.getqueue();
        long long16 = testScheduler0.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler8 = strComparableTimedAction4.scheduler;
        testScheduler8.settime((long) '#');
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertNotNull(testScheduler8);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        testScheduler13.triggerActions(1L);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        testScheduler21.triggerActions((long) (byte) 100);
        long long28 = testScheduler21.gettime();
        long long29 = testScheduler21.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler testScheduler32 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) ' ', schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction36.getisCancelled();
        java.lang.Class<?> wildcardClass38 = strComparableTimedAction36.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler21, 10L, schedulerFunc2_31, (java.lang.reflect.AnnotatedElement) wildcardClass38);
        rx.util.functions.Action0 action0_40 = null;
        rx.Subscription subscription41 = testScheduler21.schedule(action0_40);
        rx.util.functions.Action0 action0_42 = null;
        rx.Subscription subscription43 = testScheduler21.schedule(action0_42);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_44 = null;
        rx.Subscription subscription45 = testScheduler21.schedule(subscriptionFunc0_44);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler13, 10L, schedulerFunc2_20, subscription45);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_47 = null;
        rx.Subscription subscription48 = testScheduler13.schedule(schedulerFunc1_47);
        testScheduler13.triggerActions((long) '#');
        java.util.concurrent.TimeUnit timeUnit52 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler13.advanceTimeTo((long) 10, timeUnit52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertNotNull(subscription43);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(subscription48);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        int int39 = compareActionsByTime28.compare(strComparableTimedAction33, strComparableTimedAction38);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime40 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime41.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = compareActionsByTime40.thenComparing(wildcardTimedActionComparator42);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator44 = compareActionsByTime28.thenComparing(wildcardTimedActionComparator43);
        rx.concurrency.TestScheduler testScheduler45 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) (byte) 10, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler51 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) ' ', schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction55.getisCancelled();
        int int57 = compareActionsByTime28.compare(strComparableTimedAction49, strComparableTimedAction55);
        long long58 = strComparableTimedAction49.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction49.isCancelled;
        int int60 = compareActionsByTime9.compare(strComparableTimedAction27, strComparableTimedAction49);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction49.action;
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableTimedAction49.getstate();
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction49.scheduler;
        rx.util.functions.Action0 action0_64 = null;
        java.util.concurrent.TimeUnit timeUnit67 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription68 = testScheduler63.schedulePeriodically(action0_64, (long) 100, (long) '#', timeUnit67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator44);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertEquals("'" + strComparable62 + "' != '" + "" + "'", strComparable62, "");
        org.junit.Assert.assertNotNull(testScheduler63);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        int int15 = compareActionsByTime4.compare(strComparableTimedAction9, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction14.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction14.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction14.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction14.getstate();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, (long) (byte) 1, schedulerFunc2_3, strComparableTimedAction14);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction14.getisCancelled();
        strComparableTimedAction14.cancel();
        java.lang.Comparable<java.lang.String> strComparable23 = strComparableTimedAction14.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = strComparableTimedAction14.getaction();
        rx.concurrency.TestScheduler testScheduler25 = strComparableTimedAction14.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean26 = strComparableTimedAction14.getisCancelled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = strComparableTimedAction14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "" + "'", strComparable19, "");
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "" + "'", strComparable23, "");
        org.junit.Assert.assertNull(schedulerFunc2_24);
        org.junit.Assert.assertNotNull(testScheduler25);
        org.junit.Assert.assertNotNull(atomicBoolean26);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler23.getqueue();
        testScheduler23.triggerActions((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler23.getqueue();
        testScheduler23.triggerActions((long) (byte) -1);
        testScheduler23.triggerActions((long) '4');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator20.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime22.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime47 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler48 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler48, (long) (byte) 10, schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler53 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler53, (long) (byte) 10, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        int int58 = compareActionsByTime47.compare(strComparableTimedAction52, strComparableTimedAction57);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime47.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator46.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = wildcardTimedActionComparator73.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = wildcardTimedActionComparator21.thenComparing(wildcardTimedActionComparator74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = wildcardTimedActionComparator74.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        long long15 = strComparableTimedAction13.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction13.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction13.state;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction13.scheduler;
        testScheduler18.settime((long) (short) -1);
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler18.schedule(action0_21);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler15.queue;
        testScheduler15.triggerActions();
        testScheduler15.time = '4';
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler12.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler12.getqueue();
        long long21 = testScheduler12.time;
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler12.schedule(action0_22);
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(action0_24);
        testScheduler12.time = (short) 0;
        testScheduler12.triggerActions((-1L));
        long long30 = testScheduler12.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.getisCancelled();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.scheduler;
        testScheduler38.time = 100;
        testScheduler38.triggerActions();
        testScheduler38.triggerActions(1L);
        java.lang.Class<?> wildcardClass44 = testScheduler38.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler5, (long) (byte) 10, schedulerFunc2_24, (java.lang.reflect.GenericDeclaration) wildcardClass44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 0L, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue50 = testScheduler5.queue;
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue50);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime3 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler4 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler4, (long) (byte) 10, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler9 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler9, (long) (byte) 10, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "");
        int int14 = compareActionsByTime3.compare(strComparableTimedAction8, strComparableTimedAction13);
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction8.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler15, 100L, schedulerFunc2_17, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        rx.Subscription subscription21 = testScheduler15.schedule(subscriptionFunc0_20);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler15.schedule(schedulerFunc1_22);
        long long24 = testScheduler15.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) (byte) -1, schedulerFunc2_2, (rx.Scheduler) testScheduler15);
        testScheduler15.time = (byte) -1;
        testScheduler15.time = 'a';
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction10.scheduler;
        rx.util.functions.Action0 action0_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(action0_21);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_24 = null;
        java.lang.Object obj25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler20, (long) (byte) 10, schedulerFunc2_24, obj25);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_27 = null;
        java.util.concurrent.TimeUnit timeUnit29 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription30 = testScheduler20.schedule(subscriptionFunc0_27, (long) (short) -1, timeUnit29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNotNull(subscription22);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime27.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime26.thenComparing(wildcardTimedActionComparator28);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime26.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime31 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime31.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime26.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime31);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction39.getscheduler();
        testScheduler46.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction52 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler46, (long) (-1), schedulerFunc2_50, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = strComparableTimedAction52.action;
        rx.concurrency.TestScheduler testScheduler54 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) ' ', schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean59 = strComparableTimedAction58.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction58.getstate();
        rx.concurrency.TestScheduler testScheduler61 = strComparableTimedAction58.getscheduler();
        int int62 = compareActionsByTime26.compare(strComparableTimedAction52, strComparableTimedAction58);
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction58.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction58.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = strComparableTimedAction58.getaction();
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction58.getstate();
        rx.concurrency.TestScheduler testScheduler67 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_69 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction71 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler67, (long) (byte) 10, schedulerFunc2_69, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable72 = strComparableTimedAction71.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_73 = strComparableTimedAction71.getaction();
        rx.concurrency.TestScheduler testScheduler74 = strComparableTimedAction71.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (short) 1, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) '4', schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "hi!");
        int int83 = compareActionsByTime0.compare(strComparableTimedAction58, strComparableTimedAction82);
        rx.concurrency.TestScheduler testScheduler84 = strComparableTimedAction82.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue85 = testScheduler84.queue;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertNull(schedulerFunc2_53);
        org.junit.Assert.assertNotNull(atomicBoolean59);
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertNull(testScheduler61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertNull(schedulerFunc2_65);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "hi!" + "'", strComparable66, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable72 + "' != '" + "" + "'", strComparable72, "");
        org.junit.Assert.assertNull(schedulerFunc2_73);
        org.junit.Assert.assertNotNull(testScheduler74);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(testScheduler84);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue85);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        long long25 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 97L, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        long long30 = strComparableTimedAction29.time;
        long long31 = strComparableTimedAction29.time;
        strComparableTimedAction29.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = strComparableTimedAction29.action;
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertNull(schedulerFunc2_33);
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) 100, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(schedulerFunc1_1);
        testScheduler0.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction8 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_6, (java.lang.Comparable<java.lang.String>) "");
        long long9 = strComparableTimedAction8.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_10 = strComparableTimedAction8.getaction();
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction8.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) (byte) 0, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        long long16 = testScheduler11.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, 97L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNull(schedulerFunc2_10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler17.queue;
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler17.schedule(schedulerFunc1_19);
        long long21 = testScheduler17.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction10.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.state;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        long long18 = strComparableTimedAction10.time;
        long long19 = strComparableTimedAction10.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction10.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_20);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        long long52 = testScheduler49.now();
        long long53 = testScheduler49.gettime();
        testScheduler49.settime(32L);
        testScheduler49.settime((long) (short) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_58 = null;
        rx.Subscription subscription59 = testScheduler49.schedule(schedulerFunc1_58);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(subscription59);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription23 = testScheduler13.schedulePeriodically(schedulerFunc1_19, 0L, 1L, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime17.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime35.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime34.thenComparing(wildcardTimedActionComparator36);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime22.thenComparing(wildcardTimedActionComparator37);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction43.getstate();
        rx.concurrency.TestScheduler testScheduler45 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) ' ', schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction49.getisCancelled();
        int int51 = compareActionsByTime22.compare(strComparableTimedAction43, strComparableTimedAction49);
        long long52 = strComparableTimedAction43.time;
        long long53 = strComparableTimedAction43.time;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction64.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = strComparableTimedAction64.getaction();
        rx.concurrency.TestScheduler testScheduler68 = strComparableTimedAction64.getscheduler();
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction64.scheduler;
        int int70 = compareActionsByTime17.compare(strComparableTimedAction43, strComparableTimedAction64);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction43.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_73 = null;
        java.lang.CharSequence charSequence74 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction75 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler71, (-1L), schedulerFunc2_73, charSequence74);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_76 = null;
        java.util.concurrent.TimeUnit timeUnit79 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription80 = testScheduler71.schedulePeriodically(schedulerFunc1_76, (long) (short) 100, (long) (short) -1, timeUnit79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "" + "'", strComparable66, "");
        org.junit.Assert.assertNull(schedulerFunc2_67);
        org.junit.Assert.assertNotNull(testScheduler68);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime25.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime34.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction64.getscheduler();
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction64.getscheduler();
        strComparableTimedAction64.cancel();
        rx.concurrency.TestScheduler testScheduler74 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (byte) 10, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction78.getscheduler();
        int int80 = compareActionsByTime34.compare(strComparableTimedAction64, strComparableTimedAction78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = compareActionsByTime33.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = compareActionsByTime30.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler12, (long) (short) 10, schedulerFunc2_24, compareActionsByTime33);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime84 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler85 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler85, (long) (byte) 10, schedulerFunc2_87, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler90 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_92 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction94 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler90, (long) (byte) 10, schedulerFunc2_92, (java.lang.Comparable<java.lang.String>) "");
        int int95 = compareActionsByTime84.compare(strComparableTimedAction89, strComparableTimedAction94);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator96 = compareActionsByTime84.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator97 = compareActionsByTime33.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime84);
        java.lang.Class<?> wildcardClass98 = wildcardTimedActionComparator97.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator96);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.isCancelled;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler testScheduler50 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) ' ', schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean55 = strComparableTimedAction54.getisCancelled();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean56 = strComparableTimedAction54.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler47, (long) (-1), schedulerFunc2_49, (java.lang.Object) strComparableTimedAction54);
        rx.concurrency.TestScheduler testScheduler58 = strComparableTimedAction54.scheduler;
        java.lang.Comparable<java.lang.String> strComparable59 = strComparableTimedAction54.getstate();
        java.lang.Comparable<java.lang.String> strComparable60 = strComparableTimedAction54.getstate();
        strComparableTimedAction54.cancel();
        java.lang.Comparable<java.lang.String> strComparable62 = strComparableTimedAction54.getstate();
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction54.scheduler;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertNotNull(atomicBoolean55);
        org.junit.Assert.assertNotNull(atomicBoolean56);
        org.junit.Assert.assertNull(testScheduler58);
        org.junit.Assert.assertEquals("'" + strComparable59 + "' != '" + "hi!" + "'", strComparable59, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable60 + "' != '" + "hi!" + "'", strComparable60, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable62 + "' != '" + "hi!" + "'", strComparable62, "hi!");
        org.junit.Assert.assertNull(testScheduler63);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = strComparableTimedAction10.getaction();
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = strComparableTimedAction10.getaction();
        long long16 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler18.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_20 = null;
        java.util.concurrent.TimeUnit timeUnit23 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription24 = testScheduler18.schedulePeriodically(subscriptionFunc0_20, 100L, (long) (byte) 100, timeUnit23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNull(schedulerFunc2_13);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNull(schedulerFunc2_15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, (long) '4', schedulerFunc2_16, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime25.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime46 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler52 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, (long) (byte) 10, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        int int57 = compareActionsByTime46.compare(strComparableTimedAction51, strComparableTimedAction56);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime34.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        int int70 = compareActionsByTime59.compare(strComparableTimedAction64, strComparableTimedAction69);
        rx.concurrency.TestScheduler testScheduler71 = strComparableTimedAction64.getscheduler();
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction64.getscheduler();
        strComparableTimedAction64.cancel();
        rx.concurrency.TestScheduler testScheduler74 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_76 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction78 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler74, (long) (byte) 10, schedulerFunc2_76, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction78.getscheduler();
        int int80 = compareActionsByTime34.compare(strComparableTimedAction64, strComparableTimedAction78);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator81 = compareActionsByTime33.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime34);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator82 = compareActionsByTime30.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime33);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction83 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler12, (long) (short) 10, schedulerFunc2_24, compareActionsByTime33);
        long long84 = testScheduler12.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_85 = null;
        rx.Subscription subscription86 = testScheduler12.schedule(subscriptionFunc0_85);
        long long87 = testScheduler12.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(testScheduler71);
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator81);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(subscription86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        long long16 = testScheduler13.gettime();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler13.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime21 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler22 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler22, (long) (byte) 10, schedulerFunc2_24, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        int int32 = compareActionsByTime21.compare(strComparableTimedAction26, strComparableTimedAction31);
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction26.getscheduler();
        long long34 = testScheduler33.gettime();
        testScheduler33.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 10L, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler41 = strComparableTimedAction40.scheduler;
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler13, (long) (short) -1, schedulerFunc2_20, (rx.Scheduler) testScheduler41);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_43 = null;
        rx.Subscription subscription44 = testScheduler13.schedule(subscriptionFunc0_43);
        long long45 = testScheduler13.time;
        testScheduler13.time = (short) 1;
        rx.util.functions.Action0 action0_48 = null;
        rx.Subscription subscription49 = testScheduler13.schedule(action0_48);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(testScheduler41);
        org.junit.Assert.assertNotNull(subscription44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(subscription49);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_1 = null;
        rx.Subscription subscription2 = testScheduler0.schedule(action0_1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler testScheduler5 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) (byte) 10, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        testScheduler5.triggerActions((long) (byte) 100);
        long long12 = testScheduler5.gettime();
        long long13 = testScheduler5.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler testScheduler16 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean21 = strComparableTimedAction20.getisCancelled();
        java.lang.Class<?> wildcardClass22 = strComparableTimedAction20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler5, 10L, schedulerFunc2_15, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, (long) (-1), schedulerFunc2_4, (java.lang.reflect.AnnotatedElement) wildcardClass22);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler0.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_26 = null;
        rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_26);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_28 = null;
        rx.Subscription subscription29 = testScheduler0.schedule(schedulerFunc1_28);
        rx.util.functions.Action0 action0_30 = null;
        java.util.concurrent.TimeUnit timeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription33 = testScheduler0.schedule(action0_30, (long) '4', timeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 0, schedulerFunc2_11, testScheduler12);
        long long14 = testScheduler0.gettime();
        long long15 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 100);
        testScheduler0.time = (short) -1;
        long long20 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler12.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) 0, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction17.getaction();
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction17.getstate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strComparableTimedAction17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction10.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = strComparableTimedAction10.action;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNull(schedulerFunc2_17);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(subscriptionFunc0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        rx.util.functions.Action0 action0_21 = null;
        java.util.concurrent.TimeUnit timeUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription25 = testScheduler12.schedulePeriodically(action0_21, (long) '#', (long) (byte) 100, timeUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) 100, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction17.getstate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "hi!" + "'", strComparable18, "hi!");
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        long long11 = testScheduler0.now();
        testScheduler0.triggerActions((long) (-1));
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        testScheduler0.settime(10L);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler19.schedule(schedulerFunc1_20);
        testScheduler19.settime((-1L));
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler19, (long) (byte) 0, schedulerFunc2_25, (java.lang.CharSequence) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler19.getqueue();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (short) -1, schedulerFunc2_18, testScheduler19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler19.queue;
        long long31 = testScheduler19.now();
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        int int45 = compareActionsByTime34.compare(strComparableTimedAction39, strComparableTimedAction44);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction44.getisCancelled();
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.scheduler;
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction44.state;
        long long49 = strComparableTimedAction44.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = strComparableTimedAction44.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean51 = strComparableTimedAction44.isCancelled;
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction44.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean53 = strComparableTimedAction44.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler19, 1L, schedulerFunc2_33, (java.io.Serializable) atomicBoolean53);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "" + "'", strComparable48, "");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_50);
        org.junit.Assert.assertNotNull(atomicBoolean51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertNotNull(atomicBoolean53);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.settime(100L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue22 = testScheduler12.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler12.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler12.schedule(subscriptionFunc0_24);
        long long26 = testScheduler12.now();
        rx.util.functions.Action0 action0_27 = null;
        rx.Subscription subscription28 = testScheduler12.schedule(action0_27);
        rx.util.functions.Action0 action0_29 = null;
        rx.Subscription subscription30 = testScheduler12.schedule(action0_29);
        long long31 = testScheduler12.now();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(subscription28);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        testScheduler17.triggerActions((long) (byte) 100);
        long long24 = testScheduler17.gettime();
        long long25 = testScheduler17.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) ' ', schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean33 = strComparableTimedAction32.getisCancelled();
        java.lang.Class<?> wildcardClass34 = strComparableTimedAction32.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler17, 10L, schedulerFunc2_27, (java.lang.reflect.AnnotatedElement) wildcardClass34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler17.schedule(action0_36);
        rx.util.functions.Action0 action0_38 = null;
        rx.Subscription subscription39 = testScheduler17.schedule(action0_38);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler12, 10L, schedulerFunc2_16, subscription39);
        testScheduler12.time = (short) -1;
        testScheduler12.triggerActions((-1L));
        testScheduler12.triggerActions((long) 100);
        testScheduler12.time = (byte) -1;
        testScheduler12.triggerActions();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler12.schedule(schedulerFunc1_50);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_52 = null;
        rx.Subscription subscription53 = testScheduler12.schedule(subscriptionFunc0_52);
        testScheduler12.settime((long) 0);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        java.lang.Comparable<java.lang.String> strComparable58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (short) 10, schedulerFunc2_57, strComparable58);
        java.lang.Class<?> wildcardClass60 = testScheduler12.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(subscription39);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertNotNull(subscription53);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = strComparableTimedAction20.time;
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction20.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_23 = null;
        java.util.concurrent.TimeUnit timeUnit25 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription26 = testScheduler22.schedule(subscriptionFunc0_23, 35L, timeUnit25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.getscheduler();
        testScheduler14.triggerActions((long) '4');
        long long17 = testScheduler14.now();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler14.getqueue();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        rx.concurrency.TestScheduler testScheduler21 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler21, (long) (byte) 10, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "");
        long long26 = testScheduler21.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator31);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime29.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler21, (long) 10, schedulerFunc2_28, compareActionsByTime29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = wildcardTimedActionComparator20.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        testScheduler36.triggerActions((long) (byte) 100);
        long long43 = testScheduler36.gettime();
        long long44 = testScheduler36.now();
        testScheduler36.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 100, schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction49.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable51 = strComparableTimedAction49.getstate();
        long long52 = strComparableTimedAction49.time;
        rx.concurrency.TestScheduler testScheduler53 = strComparableTimedAction49.getscheduler();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime55 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator56 = compareActionsByTime55.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime54.thenComparing(wildcardTimedActionComparator56);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime54.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime59 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator60 = compareActionsByTime59.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator61 = compareActionsByTime54.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime59);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime62 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler63 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_65 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction67 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler63, (long) (byte) 10, schedulerFunc2_65, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler68 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_70 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction72 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler68, (long) (byte) 10, schedulerFunc2_70, (java.lang.Comparable<java.lang.String>) "");
        int int73 = compareActionsByTime62.compare(strComparableTimedAction67, strComparableTimedAction72);
        strComparableTimedAction72.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean75 = strComparableTimedAction72.getisCancelled();
        strComparableTimedAction72.cancel();
        java.lang.Comparable<java.lang.String> strComparable77 = strComparableTimedAction72.state;
        rx.concurrency.TestScheduler testScheduler78 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_80 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler78, (long) (byte) 10, schedulerFunc2_80, (java.lang.Comparable<java.lang.String>) "");
        int int83 = compareActionsByTime59.compare(strComparableTimedAction72, strComparableTimedAction82);
        long long84 = strComparableTimedAction82.time;
        int int85 = compareActionsByTime29.compare(strComparableTimedAction49, strComparableTimedAction82);
        long long86 = strComparableTimedAction82.time;
        rx.concurrency.TestScheduler testScheduler87 = strComparableTimedAction82.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_89 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction91 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler87, (long) (byte) 100, schedulerFunc2_89, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable92 = strComparableTimedAction91.getstate();
        java.lang.Class<?> wildcardClass93 = strComparableTimedAction91.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertEquals("'" + strComparable51 + "' != '" + "hi!" + "'", strComparable51, "hi!");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertNotNull(testScheduler53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator56);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator60);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean75);
        org.junit.Assert.assertEquals("'" + strComparable77 + "' != '" + "" + "'", strComparable77, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10L + "'", long84 == 10L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
        org.junit.Assert.assertNotNull(testScheduler87);
        org.junit.Assert.assertEquals("'" + strComparable92 + "' != '" + "" + "'", strComparable92, "");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = strComparableTimedAction15.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction15.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable18 = strComparableTimedAction15.state;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction15.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertEquals("'" + strComparable18 + "' != '" + "hi!" + "'", strComparable18, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        long long9 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription15 = testScheduler10.schedulePeriodically(schedulerFunc1_11, 32L, (long) 0, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(testScheduler10);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        strComparableTimedAction10.cancel();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable16 = strComparableTimedAction10.getstate();
        long long17 = strComparableTimedAction10.time;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strComparableTimedAction10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "" + "'", strComparable16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler12.queue;
        testScheduler12.time = '#';
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler12.schedule(action0_17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        testScheduler12.settime(0L);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(schedulerFunc1_23);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_25 = null;
        rx.Subscription subscription26 = testScheduler12.schedule(schedulerFunc1_25);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler12.triggerActions((long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription26);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction13.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction13.action;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction13.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        testScheduler13.triggerActions((long) (byte) 10);
        testScheduler13.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_18, strComparable19);
        java.lang.Comparable<java.lang.String> strComparable21 = strComparableTimedAction20.getstate();
        long long22 = strComparableTimedAction20.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(strComparable21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        long long14 = testScheduler12.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler12, 35L, schedulerFunc2_16, compareActionsByTime17);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler12.schedule(schedulerFunc1_19);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(schedulerFunc1_21);
        testScheduler12.triggerActions((long) (byte) -1);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        testScheduler34.triggerActions((long) (byte) 100);
        long long41 = testScheduler34.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler27, (long) '4', schedulerFunc2_33, (rx.Scheduler) testScheduler34);
        testScheduler27.triggerActions((long) (byte) 1);
        testScheduler27.time = 10;
        testScheduler27.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 0, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (short) 0, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler12, 97L, schedulerFunc2_26, testScheduler27);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue57 = testScheduler27.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_58 = null;
        java.util.concurrent.TimeUnit timeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription62 = testScheduler27.schedulePeriodically(subscriptionFunc0_58, (long) (short) 100, 97L, timeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue57);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_16 = null;
        rx.Subscription subscription17 = testScheduler0.schedule(subscriptionFunc0_16);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue18 = testScheduler0.queue;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeBy((long) (byte) 100, timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue18);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = wildcardTimedActionComparator30.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator32 = wildcardTimedActionComparator31.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = wildcardTimedActionComparator32.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = wildcardTimedActionComparator32.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator32);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler testScheduler11 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler11, (long) ' ', schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction15.getisCancelled();
        java.lang.Class<?> wildcardClass17 = strComparableTimedAction15.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler0, 10L, schedulerFunc2_10, (java.lang.reflect.AnnotatedElement) wildcardClass17);
        rx.util.functions.Action0 action0_19 = null;
        rx.Subscription subscription20 = testScheduler0.schedule(action0_19);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue21 = testScheduler0.getqueue();
        testScheduler0.settime((long) (short) 100);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue24 = testScheduler0.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_29 = null;
        rx.Subscription subscription30 = testScheduler0.schedule(subscriptionFunc0_29);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) -1, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "hi!");
        long long35 = strComparableTimedAction34.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue21);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue24);
        org.junit.Assert.assertNotNull(subscription30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = testScheduler12.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler12.queue;
        testScheduler12.settime((long) '4');
        testScheduler12.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (short) 0, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler12.time = (byte) 0;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Action0 action0_34 = null;
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription37 = testScheduler12.schedule(action0_34, 0L, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime4 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime4.thenComparing(wildcardTimedActionComparator6);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = wildcardTimedActionComparator6.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler10 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler10, (long) (byte) 10, schedulerFunc2_12, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        int int20 = compareActionsByTime9.compare(strComparableTimedAction14, strComparableTimedAction19);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = wildcardTimedActionComparator6.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator22 = wildcardTimedActionComparator2.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime9);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime24 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = compareActionsByTime23.thenComparing(wildcardTimedActionComparator25);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime27 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime28 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = compareActionsByTime28.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator30 = compareActionsByTime27.thenComparing(wildcardTimedActionComparator29);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator31 = compareActionsByTime27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator33 = compareActionsByTime32.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator34 = compareActionsByTime27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        int int46 = compareActionsByTime35.compare(strComparableTimedAction40, strComparableTimedAction45);
        strComparableTimedAction45.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean48 = strComparableTimedAction45.getisCancelled();
        strComparableTimedAction45.cancel();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction45.state;
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        int int56 = compareActionsByTime32.compare(strComparableTimedAction45, strComparableTimedAction55);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator57 = compareActionsByTime32.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = wildcardTimedActionComparator25.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime32);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = wildcardTimedActionComparator25.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime60 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler61 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler61, (long) (byte) 10, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime60.compare(strComparableTimedAction65, strComparableTimedAction70);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime72 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime73 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator74 = compareActionsByTime73.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator75 = compareActionsByTime72.thenComparing(wildcardTimedActionComparator74);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator76 = compareActionsByTime60.thenComparing(wildcardTimedActionComparator75);
        rx.concurrency.TestScheduler testScheduler77 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler77, (long) (byte) 10, schedulerFunc2_79, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable82 = strComparableTimedAction81.getstate();
        rx.concurrency.TestScheduler testScheduler83 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler83, (long) ' ', schedulerFunc2_85, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean88 = strComparableTimedAction87.getisCancelled();
        int int89 = compareActionsByTime60.compare(strComparableTimedAction81, strComparableTimedAction87);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = compareActionsByTime60.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = wildcardTimedActionComparator90.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator92 = wildcardTimedActionComparator59.thenComparing(wildcardTimedActionComparator91);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator93 = wildcardTimedActionComparator91.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator94 = compareActionsByTime9.thenComparing(wildcardTimedActionComparator91);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator95 = wildcardTimedActionComparator94.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator96 = wildcardTimedActionComparator94.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator97 = wildcardTimedActionComparator94.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator22);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator30);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator31);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator33);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean48);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator57);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator74);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator75);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator76);
        org.junit.Assert.assertEquals("'" + strComparable82 + "' != '" + "" + "'", strComparable82, "");
        org.junit.Assert.assertNotNull(atomicBoolean88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator92);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator93);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator94);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator95);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator96);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator97);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (short) 1, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        long long12 = strComparableTimedAction11.time;
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction11.state;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean14 = strComparableTimedAction11.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean15 = strComparableTimedAction11.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = strComparableTimedAction11.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction11.isCancelled;
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction11.scheduler;
        java.lang.Comparable<java.lang.String> strComparable19 = strComparableTimedAction11.getstate();
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "hi!" + "'", strComparable13, "hi!");
        org.junit.Assert.assertNotNull(atomicBoolean14);
        org.junit.Assert.assertNotNull(atomicBoolean15);
        org.junit.Assert.assertNull(schedulerFunc2_16);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "hi!" + "'", strComparable19, "hi!");
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        long long20 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler21 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler21.schedule(action0_22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(testScheduler21);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, 1L, schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler5.getqueue();
        long long11 = testScheduler5.gettime();
        testScheduler5.triggerActions(1L);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        strComparableTimedAction31.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_50 = strComparableTimedAction31.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction31.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_50);
        org.junit.Assert.assertNull(schedulerFunc2_51);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_6 = null;
        rx.Subscription subscription7 = testScheduler5.schedule(schedulerFunc1_6);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_8 = null;
        rx.Subscription subscription9 = testScheduler5.schedule(schedulerFunc1_8);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        testScheduler12.triggerActions((long) (byte) 100);
        long long19 = testScheduler12.gettime();
        long long20 = testScheduler12.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_21 = null;
        rx.Subscription subscription22 = testScheduler12.schedule(subscriptionFunc0_21);
        rx.util.functions.Action0 action0_23 = null;
        rx.Subscription subscription24 = testScheduler12.schedule(action0_23);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 100L, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue29 = testScheduler12.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler12.schedule(subscriptionFunc0_30);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler5, 10L, schedulerFunc2_11, testScheduler12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue37 = testScheduler12.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        java.lang.Comparable<java.lang.String> strComparable40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_39, strComparable40);
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(subscription7);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue29);
        org.junit.Assert.assertNotNull(subscription31);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue37);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) 'a', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction16.getscheduler();
        long long18 = testScheduler17.gettime();
        testScheduler17.time = (short) 100;
        long long21 = testScheduler17.time;
        testScheduler17.settime((long) '#');
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_9 = null;
        rx.Subscription subscription10 = testScheduler0.schedule(subscriptionFunc0_9);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(schedulerFunc1_11);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue13 = testScheduler0.getqueue();
        testScheduler0.settime((long) 100);
        long long16 = testScheduler0.now();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription10);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableTimedAction4.getstate();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8, "hi!");
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.time = (short) 100;
        rx.util.functions.Action0 action0_11 = null;
        rx.Subscription subscription12 = testScheduler0.schedule(action0_11);
        rx.util.functions.Action0 action0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(action0_13);
        long long15 = testScheduler0.now();
        long long16 = testScheduler0.now();
        testScheduler0.settime((long) (byte) 10);
        testScheduler0.time = 97L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 1, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable25 = strComparableTimedAction24.state;
        rx.concurrency.TestScheduler testScheduler26 = strComparableTimedAction24.scheduler;
        long long27 = testScheduler26.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler26.schedule(subscriptionFunc0_28);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_30 = null;
        java.util.concurrent.TimeUnit timeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription33 = testScheduler26.schedule(schedulerFunc1_30, (long) 100, timeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription12);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + strComparable25 + "' != '" + "hi!" + "'", strComparable25, "hi!");
        org.junit.Assert.assertNotNull(testScheduler26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = wildcardTimedActionComparator24.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator26 = wildcardTimedActionComparator25.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = wildcardTimedActionComparator26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = wildcardTimedActionComparator26.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime29 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler30 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_32 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction34 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler30, (long) (byte) 10, schedulerFunc2_32, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler35 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction39 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler35, (long) (byte) 10, schedulerFunc2_37, (java.lang.Comparable<java.lang.String>) "");
        int int40 = compareActionsByTime29.compare(strComparableTimedAction34, strComparableTimedAction39);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime29.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime41);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime66 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime67 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator68 = compareActionsByTime67.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator69 = compareActionsByTime66.thenComparing(wildcardTimedActionComparator68);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator70 = compareActionsByTime54.thenComparing(wildcardTimedActionComparator69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime29.thenComparing(wildcardTimedActionComparator69);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = compareActionsByTime29.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator73 = wildcardTimedActionComparator26.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime29);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator26);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator68);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator69);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator70);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator73);
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler testScheduler12 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) ' ', schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean17 = strComparableTimedAction16.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction16.getaction();
        long long19 = strComparableTimedAction16.time;
        java.lang.Comparable<java.lang.String> strComparable20 = strComparableTimedAction16.state;
        java.lang.Class<?> wildcardClass21 = strComparable20.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler5, 0L, schedulerFunc2_11, (java.lang.reflect.Type) wildcardClass21);
        rx.util.functions.Func2<rx.Scheduler, rx.Subscription, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.lang.Comparable<java.lang.String> strComparable37 = strComparableTimedAction35.getstate();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction35.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue39 = testScheduler38.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_40 = null;
        rx.Subscription subscription41 = testScheduler38.schedule(subscriptionFunc0_40);
        rx.concurrency.TestScheduler.TimedAction<rx.Subscription> subscriptionTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<rx.Subscription>(testScheduler5, (long) (byte) 1, schedulerFunc2_24, subscription41);
        long long43 = testScheduler5.time;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_44 = null;
        rx.Subscription subscription45 = testScheduler5.schedule(subscriptionFunc0_44);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_46 = null;
        rx.Subscription subscription47 = testScheduler5.schedule(schedulerFunc1_46);
        java.util.concurrent.TimeUnit timeUnit49 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler5.advanceTimeBy((long) '#', timeUnit49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(atomicBoolean17);
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "hi!" + "'", strComparable20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + strComparable37 + "' != '" + "" + "'", strComparable37, "");
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue39);
        org.junit.Assert.assertNotNull(subscription41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(subscription45);
        org.junit.Assert.assertNotNull(subscription47);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        long long9 = testScheduler0.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 10L, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler14 = strComparableTimedAction13.scheduler;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler14.schedule(subscriptionFunc0_15);
        rx.util.functions.Action0 action0_17 = null;
        rx.Subscription subscription18 = testScheduler14.schedule(action0_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler14, (long) (short) 1, schedulerFunc2_20, "hi!");
        long long23 = testScheduler14.time;
        rx.util.functions.Action0 action0_24 = null;
        rx.Subscription subscription25 = testScheduler14.schedule(action0_24);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler33 = strComparableTimedAction32.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) 'a', schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.Type, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler testScheduler40 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) ' ', schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean45 = strComparableTimedAction44.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction44.getaction();
        long long47 = strComparableTimedAction44.time;
        java.lang.Comparable<java.lang.String> strComparable48 = strComparableTimedAction44.state;
        java.lang.Class<?> wildcardClass49 = strComparable48.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type> typeTimedAction50 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.Type>(testScheduler33, 0L, schedulerFunc2_39, (java.lang.reflect.Type) wildcardClass49);
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime53 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler54 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_56 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler54, (long) (byte) 10, schedulerFunc2_56, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        int int64 = compareActionsByTime53.compare(strComparableTimedAction58, strComparableTimedAction63);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean65 = strComparableTimedAction63.getisCancelled();
        rx.concurrency.TestScheduler testScheduler66 = strComparableTimedAction63.scheduler;
        testScheduler66.time = 100;
        testScheduler66.triggerActions();
        testScheduler66.triggerActions(1L);
        java.lang.Class<?> wildcardClass72 = testScheduler66.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler33, (long) (byte) 10, schedulerFunc2_52, (java.lang.reflect.GenericDeclaration) wildcardClass72);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, 0L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = strComparableTimedAction77.action;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler14, (long) 0, schedulerFunc2_27, strComparableTimedAction77);
        testScheduler14.time = 10L;
        testScheduler14.triggerActions((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(testScheduler14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertNotNull(subscription18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertNotNull(testScheduler33);
        org.junit.Assert.assertNotNull(atomicBoolean45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertEquals("'" + strComparable48 + "' != '" + "hi!" + "'", strComparable48, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean65);
        org.junit.Assert.assertNotNull(testScheduler66);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNull(schedulerFunc2_78);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        testScheduler12.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (-1), schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = strComparableTimedAction18.action;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction18.action;
        long long22 = strComparableTimedAction18.time;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = strComparableTimedAction18.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNull(schedulerFunc2_19);
        org.junit.Assert.assertNull(schedulerFunc2_20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) ' ', schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        strComparableTimedAction20.cancel();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(schedulerFunc1_19);
        testScheduler18.settime((-1L));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_23 = null;
        rx.Subscription subscription24 = testScheduler18.schedule(schedulerFunc1_23);
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler7, (long) '4', schedulerFunc2_17, (rx.Scheduler) testScheduler18);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler7, (long) 'a', schedulerFunc2_27, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_30 = null;
        rx.Subscription subscription31 = testScheduler7.schedule(subscriptionFunc0_30);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertNotNull(subscription24);
        org.junit.Assert.assertNotNull(subscription31);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        strComparableTimedAction19.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean23 = strComparableTimedAction19.getisCancelled();
        rx.concurrency.TestScheduler testScheduler24 = strComparableTimedAction19.scheduler;
        testScheduler24.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) -1, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction29.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = strComparableTimedAction29.action;
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean23);
        org.junit.Assert.assertNotNull(testScheduler24);
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertNull(schedulerFunc2_31);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        testScheduler0.triggerActions((long) (byte) 1);
        long long18 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler0.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue20 = testScheduler0.queue;
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.advanceTimeTo(35L, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue20);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = strComparableTimedAction30.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_48 = strComparableTimedAction30.getaction();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction30.getscheduler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = strComparableTimedAction30.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_47);
        org.junit.Assert.assertNull(schedulerFunc2_48);
        org.junit.Assert.assertNotNull(testScheduler49);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler12, 100L, schedulerFunc2_14, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 0L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler12.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_23 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction25 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 35L, schedulerFunc2_23, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler5.queue;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue7 = testScheduler5.queue;
        java.util.concurrent.TimeUnit timeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler5.advanceTimeTo(35L, timeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue7);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        testScheduler49.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue53 = testScheduler49.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_54 = null;
        rx.Subscription subscription55 = testScheduler49.schedule(subscriptionFunc0_54);
        long long56 = testScheduler49.now();
        long long57 = testScheduler49.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction61 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 32L, schedulerFunc2_59, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, 32L, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "hi!");
        long long66 = testScheduler49.time;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue53);
        org.junit.Assert.assertNotNull(subscription55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Action0 action0_8 = null;
        rx.Subscription subscription9 = testScheduler0.schedule(action0_8);
        testScheduler0.time = (byte) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        testScheduler14.triggerActions((long) (byte) 100);
        long long21 = testScheduler14.gettime();
        long long22 = testScheduler14.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.AnnotatedElement, rx.Subscription> schedulerFunc2_24 = null;
        rx.concurrency.TestScheduler testScheduler25 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) ' ', schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean30 = strComparableTimedAction29.getisCancelled();
        java.lang.Class<?> wildcardClass31 = strComparableTimedAction29.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement> annotatedElementTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.AnnotatedElement>(testScheduler14, 10L, schedulerFunc2_24, (java.lang.reflect.AnnotatedElement) wildcardClass31);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 100, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "hi!");
        long long37 = testScheduler14.gettime();
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler0, (long) 10, schedulerFunc2_13, (java.lang.Object) long37);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue39 = testScheduler0.getqueue();
        testScheduler0.time = 52L;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable46 = strComparableTimedAction45.state;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(subscription9);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(atomicBoolean30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue39);
        org.junit.Assert.assertEquals("'" + strComparable46 + "' != '" + "hi!" + "'", strComparable46, "hi!");
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        testScheduler13.time = 100;
        testScheduler13.triggerActions();
        testScheduler13.triggerActions(1L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue19 = testScheduler13.getqueue();
        testScheduler13.settime((long) (-1));
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_22 = null;
        rx.Subscription subscription23 = testScheduler13.schedule(schedulerFunc1_22);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 0, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_28 = null;
        rx.Subscription subscription29 = testScheduler13.schedule(subscriptionFunc0_28);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue19);
        org.junit.Assert.assertNotNull(subscription23);
        org.junit.Assert.assertNotNull(subscription29);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        long long7 = strComparableTimedAction4.time;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean8 = strComparableTimedAction4.isCancelled;
        long long9 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler10 = strComparableTimedAction4.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.getaction();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(atomicBoolean8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertNull(testScheduler10);
        org.junit.Assert.assertNull(schedulerFunc2_11);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.action;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = strComparableTimedAction4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNull(schedulerFunc2_11);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime12.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime17 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator18 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator19 = compareActionsByTime12.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator20 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime17);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator21 = compareActionsByTime17.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime22 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler23 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) (byte) 10, schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler28 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_30 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction32 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler28, (long) (byte) 10, schedulerFunc2_30, (java.lang.Comparable<java.lang.String>) "");
        int int33 = compareActionsByTime22.compare(strComparableTimedAction27, strComparableTimedAction32);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime34 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime35 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator36 = compareActionsByTime35.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator37 = compareActionsByTime34.thenComparing(wildcardTimedActionComparator36);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator38 = compareActionsByTime22.thenComparing(wildcardTimedActionComparator37);
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable44 = strComparableTimedAction43.getstate();
        rx.concurrency.TestScheduler testScheduler45 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_47 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction49 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler45, (long) ' ', schedulerFunc2_47, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean50 = strComparableTimedAction49.getisCancelled();
        int int51 = compareActionsByTime22.compare(strComparableTimedAction43, strComparableTimedAction49);
        long long52 = strComparableTimedAction43.time;
        long long53 = strComparableTimedAction43.time;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime54 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler60 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction64 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler60, (long) (byte) 10, schedulerFunc2_62, (java.lang.Comparable<java.lang.String>) "");
        int int65 = compareActionsByTime54.compare(strComparableTimedAction59, strComparableTimedAction64);
        java.lang.Comparable<java.lang.String> strComparable66 = strComparableTimedAction64.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = strComparableTimedAction64.getaction();
        rx.concurrency.TestScheduler testScheduler68 = strComparableTimedAction64.getscheduler();
        rx.concurrency.TestScheduler testScheduler69 = strComparableTimedAction64.scheduler;
        int int70 = compareActionsByTime17.compare(strComparableTimedAction43, strComparableTimedAction64);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator71 = compareActionsByTime17.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator72 = wildcardTimedActionComparator71.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator18);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator19);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator20);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator36);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator37);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator38);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "" + "'", strComparable44, "");
        org.junit.Assert.assertNotNull(atomicBoolean50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + strComparable66 + "' != '" + "" + "'", strComparable66, "");
        org.junit.Assert.assertNull(schedulerFunc2_67);
        org.junit.Assert.assertNotNull(testScheduler68);
        org.junit.Assert.assertNotNull(testScheduler69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator71);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator72);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime37 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator39 = compareActionsByTime38.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator40 = compareActionsByTime37.thenComparing(wildcardTimedActionComparator39);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator41 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator40);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime43 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction53 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 10, schedulerFunc2_51, (java.lang.Comparable<java.lang.String>) "");
        int int54 = compareActionsByTime43.compare(strComparableTimedAction48, strComparableTimedAction53);
        rx.concurrency.TestScheduler testScheduler55 = strComparableTimedAction48.getscheduler();
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction48.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean57 = strComparableTimedAction48.getisCancelled();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime58 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler59 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction63 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler59, (long) (byte) 10, schedulerFunc2_61, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        int int69 = compareActionsByTime58.compare(strComparableTimedAction63, strComparableTimedAction68);
        rx.concurrency.TestScheduler testScheduler70 = strComparableTimedAction63.getscheduler();
        long long71 = testScheduler70.gettime();
        testScheduler70.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, 10L, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_79 = strComparableTimedAction77.getaction();
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction77.state;
        int int81 = compareActionsByTime0.compare(strComparableTimedAction48, strComparableTimedAction77);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean82 = strComparableTimedAction77.isCancelled;
        rx.concurrency.TestScheduler testScheduler83 = strComparableTimedAction77.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_85 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction87 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler83, (long) (byte) 0, schedulerFunc2_85, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_89 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction91 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler83, 97L, schedulerFunc2_89, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator39);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator40);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator41);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(testScheduler55);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertNotNull(atomicBoolean57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(testScheduler70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNull(schedulerFunc2_79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "hi!" + "'", strComparable80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean82);
        org.junit.Assert.assertNotNull(testScheduler83);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        testScheduler0.settime(0L);
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 35L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        long long39 = testScheduler38.gettime();
        testScheduler38.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue42 = testScheduler38.getqueue();
        long long43 = testScheduler38.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.util.concurrent.atomic.AtomicBoolean, rx.Subscription> schedulerFunc2_45 = null;
        rx.concurrency.TestScheduler testScheduler46 = null;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_48 = null;
        rx.concurrency.TestScheduler testScheduler49 = new rx.concurrency.TestScheduler();
        long long50 = testScheduler49.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler testScheduler53 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler49, (long) 'a', schedulerFunc2_52, testScheduler53);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue55 = testScheduler49.queue;
        rx.util.functions.Action0 action0_56 = null;
        rx.Subscription subscription57 = testScheduler49.schedule(action0_56);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction58 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler46, (long) (short) 10, schedulerFunc2_48, testScheduler49);
        rx.util.functions.Func2<rx.Scheduler, java.io.Serializable, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler testScheduler61 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler61, (long) (byte) 10, schedulerFunc2_63, (java.lang.Comparable<java.lang.String>) "");
        testScheduler61.triggerActions((long) (byte) 100);
        long long68 = testScheduler61.gettime();
        testScheduler61.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue71 = testScheduler61.queue;
        testScheduler61.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue73 = testScheduler61.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler61, (long) (short) 0, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean78 = strComparableTimedAction77.getisCancelled();
        rx.concurrency.TestScheduler.TimedAction<java.io.Serializable> serializableTimedAction79 = new rx.concurrency.TestScheduler.TimedAction<java.io.Serializable>(testScheduler49, 100L, schedulerFunc2_60, (java.io.Serializable) atomicBoolean78);
        rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean> atomicBooleanTimedAction80 = new rx.concurrency.TestScheduler.TimedAction<java.util.concurrent.atomic.AtomicBoolean>(testScheduler38, (long) 0, schedulerFunc2_45, atomicBoolean78);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction81 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, 32L, schedulerFunc2_25, testScheduler38);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_83 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction85 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_83, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_87 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction89 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 52L, schedulerFunc2_87, (java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue55);
        org.junit.Assert.assertNotNull(subscription57);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue71);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue73);
        org.junit.Assert.assertNotNull(atomicBoolean78);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableTimedAction4.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_6 = strComparableTimedAction4.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean7 = strComparableTimedAction4.isCancelled;
        strComparableTimedAction4.cancel();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableTimedAction4.getstate();
        long long10 = strComparableTimedAction4.time;
        rx.concurrency.TestScheduler testScheduler11 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler11.schedule(subscriptionFunc0_12);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_14 = null;
        rx.Subscription subscription15 = testScheduler11.schedule(schedulerFunc1_14);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue16 = testScheduler11.getqueue();
        long long17 = testScheduler11.time;
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "" + "'", strComparable5, "");
        org.junit.Assert.assertNull(schedulerFunc2_6);
        org.junit.Assert.assertNotNull(atomicBoolean7);
        org.junit.Assert.assertEquals("'" + strComparable9 + "' != '" + "" + "'", strComparable9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(testScheduler11);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(subscription15);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        long long13 = testScheduler12.gettime();
        testScheduler12.time = (short) -1;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, 10L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = strComparableTimedAction19.getaction();
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction19.state;
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction19.scheduler;
        long long24 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler23.getqueue();
        long long26 = testScheduler23.gettime();
        long long27 = testScheduler23.time;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue28 = testScheduler23.getqueue();
        long long29 = testScheduler23.gettime();
        java.util.concurrent.TimeUnit timeUnit31 = null;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler23.advanceTimeBy((long) (byte) -1, timeUnit31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertNull(schedulerFunc2_21);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "hi!" + "'", strComparable22, "hi!");
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler testScheduler12 = strComparableTimedAction5.getscheduler();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction5.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = strComparableTimedAction5.action;
        java.lang.Comparable<java.lang.String> strComparable15 = strComparableTimedAction5.state;
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction5.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, 10L, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = testScheduler16.now();
        testScheduler16.time = 100;
        long long24 = testScheduler16.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(testScheduler12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNull(schedulerFunc2_14);
        org.junit.Assert.assertEquals("'" + strComparable15 + "' != '" + "" + "'", strComparable15, "");
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator14 = compareActionsByTime13.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator15 = compareActionsByTime12.thenComparing(wildcardTimedActionComparator14);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator16 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator15);
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable22 = strComparableTimedAction21.getstate();
        rx.concurrency.TestScheduler testScheduler23 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_25 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction27 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler23, (long) ' ', schedulerFunc2_25, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean28 = strComparableTimedAction27.getisCancelled();
        int int29 = compareActionsByTime0.compare(strComparableTimedAction21, strComparableTimedAction27);
        rx.concurrency.TestScheduler testScheduler30 = strComparableTimedAction21.scheduler;
        long long31 = testScheduler30.gettime();
        testScheduler30.triggerActions((long) 0);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        strComparableTimedAction46.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean49 = strComparableTimedAction46.getisCancelled();
        long long50 = strComparableTimedAction46.time;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler30, 1L, schedulerFunc2_35, strComparableTimedAction46);
        rx.util.functions.Action0 action0_52 = null;
        rx.Subscription subscription53 = testScheduler30.schedule(action0_52);
        rx.util.functions.Action0 action0_54 = null;
        java.util.concurrent.TimeUnit timeUnit56 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription57 = testScheduler30.schedule(action0_54, (long) (-1), timeUnit56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator14);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator15);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator16);
        org.junit.Assert.assertEquals("'" + strComparable22 + "' != '" + "" + "'", strComparable22, "");
        org.junit.Assert.assertNotNull(atomicBoolean28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(testScheduler30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(subscription53);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        long long8 = strComparableTimedAction4.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = strComparableTimedAction4.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean10 = strComparableTimedAction4.getisCancelled();
        long long11 = strComparableTimedAction4.gettime();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertNull(schedulerFunc2_9);
        org.junit.Assert.assertNotNull(atomicBoolean10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        long long15 = strComparableTimedAction10.gettime();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean16 = strComparableTimedAction10.isCancelled;
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction10.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean18 = strComparableTimedAction10.isCancelled;
        long long19 = strComparableTimedAction10.gettime();
        long long20 = strComparableTimedAction10.time;
        long long21 = strComparableTimedAction10.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction10.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler23.schedule(subscriptionFunc0_24, 0L, timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(atomicBoolean16);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(atomicBoolean18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(testScheduler23);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue17 = testScheduler16.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_18 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription21 = testScheduler16.schedule(subscriptionFunc0_18, (long) '4', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue17);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler5 = strComparableTimedAction4.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction9 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler5, (long) 'a', schedulerFunc2_7, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler5.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_12 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction14 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler5, (long) (short) 10, schedulerFunc2_12, (java.lang.CharSequence) "hi!");
        testScheduler5.triggerActions((-1L));
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime19 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (byte) 10, schedulerFunc2_27, (java.lang.Comparable<java.lang.String>) "");
        int int30 = compareActionsByTime19.compare(strComparableTimedAction24, strComparableTimedAction29);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean31 = strComparableTimedAction29.getisCancelled();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction29.scheduler;
        testScheduler32.settime((long) (byte) 0);
        long long35 = testScheduler32.time;
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_37 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime38 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler44 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction48 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler44, (long) (byte) 10, schedulerFunc2_46, (java.lang.Comparable<java.lang.String>) "");
        int int49 = compareActionsByTime38.compare(strComparableTimedAction43, strComparableTimedAction48);
        rx.concurrency.TestScheduler testScheduler50 = strComparableTimedAction43.getscheduler();
        testScheduler50.triggerActions((long) (byte) 100);
        rx.util.functions.Func2<rx.Scheduler, java.lang.CharSequence, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence> charSequenceTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.CharSequence>(testScheduler50, (long) '4', schedulerFunc2_54, (java.lang.CharSequence) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction60 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) 1, schedulerFunc2_58, (java.lang.Comparable<java.lang.String>) "");
        testScheduler50.settime((long) (byte) 1);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_64 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction66 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, 0L, schedulerFunc2_64, (java.lang.Comparable<java.lang.String>) "hi!");
        long long67 = testScheduler50.time;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler32, 1L, schedulerFunc2_37, testScheduler50);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler5, 1L, schedulerFunc2_18, testScheduler32);
        long long70 = testScheduler32.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 0, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertNotNull(testScheduler5);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean31);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(testScheduler50);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, 0L, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = strComparableTimedAction19.scheduler;
        long long21 = strComparableTimedAction19.gettime();
        rx.concurrency.TestScheduler testScheduler22 = strComparableTimedAction19.getscheduler();
        testScheduler22.triggerActions(10L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue25 = testScheduler22.getqueue();
        rx.util.functions.Func2<rx.Scheduler, java.lang.String, rx.Subscription> schedulerFunc2_27 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.String> strTimedAction29 = new rx.concurrency.TestScheduler.TimedAction<java.lang.String>(testScheduler22, 32L, schedulerFunc2_27, "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue30 = testScheduler22.queue;
        rx.util.functions.Action0 action0_31 = null;
        rx.Subscription subscription32 = testScheduler22.schedule(action0_31);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(testScheduler20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(testScheduler22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue25);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue30);
        org.junit.Assert.assertNotNull(subscription32);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator49 = wildcardTimedActionComparator46.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator49);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_7 = null;
        rx.Subscription subscription8 = testScheduler0.schedule(schedulerFunc1_7);
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>, rx.Subscription> schedulerFunc2_10 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        int int22 = compareActionsByTime11.compare(strComparableTimedAction16, strComparableTimedAction21);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = compareActionsByTime11.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction41.getscheduler();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction41.getscheduler();
        strComparableTimedAction41.cancel();
        rx.concurrency.TestScheduler testScheduler51 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_53 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction55 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler51, (long) (byte) 10, schedulerFunc2_53, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler56 = strComparableTimedAction55.getscheduler();
        int int57 = compareActionsByTime11.compare(strComparableTimedAction41, strComparableTimedAction55);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_58 = strComparableTimedAction41.getaction();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_59 = strComparableTimedAction41.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean60 = strComparableTimedAction41.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_61 = strComparableTimedAction41.getaction();
        rx.concurrency.TestScheduler testScheduler62 = strComparableTimedAction41.scheduler;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean63 = strComparableTimedAction41.isCancelled;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction41.isCancelled;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>> strComparableTimedActionTimedAction65 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>>(testScheduler0, 100L, schedulerFunc2_10, strComparableTimedAction41);
        rx.util.functions.Action0 action0_66 = null;
        rx.Subscription subscription67 = testScheduler0.schedule(action0_66);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_68 = null;
        java.util.concurrent.TimeUnit timeUnit71 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription72 = testScheduler0.schedulePeriodically(schedulerFunc1_68, (long) (byte) 10, (long) (short) 100, timeUnit71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(subscription8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(testScheduler56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_58);
        org.junit.Assert.assertNull(schedulerFunc2_59);
        org.junit.Assert.assertNotNull(atomicBoolean60);
        org.junit.Assert.assertNull(schedulerFunc2_61);
        org.junit.Assert.assertNotNull(testScheduler62);
        org.junit.Assert.assertNotNull(atomicBoolean63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertNotNull(subscription67);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        strComparableTimedAction10.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean13 = strComparableTimedAction10.getisCancelled();
        long long14 = strComparableTimedAction10.time;
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction10.getscheduler();
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction10.scheduler;
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction10.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = strComparableTimedAction10.action;
        rx.concurrency.TestScheduler testScheduler19 = strComparableTimedAction10.scheduler;
        long long20 = testScheduler19.gettime();
        testScheduler19.time = ' ';
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "" + "'", strComparable17, "");
        org.junit.Assert.assertNull(schedulerFunc2_18);
        org.junit.Assert.assertNotNull(testScheduler19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 100L, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "hi!");
        strComparableTimedAction15.cancel();
        rx.concurrency.TestScheduler testScheduler17 = strComparableTimedAction15.scheduler;
        testScheduler17.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 0, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler17.queue;
        long long24 = testScheduler17.time;
        testScheduler17.time = 97L;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler17);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator27 = compareActionsByTime26.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator28 = compareActionsByTime25.thenComparing(wildcardTimedActionComparator27);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator29 = wildcardTimedActionComparator27.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime30 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler36 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction40 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler36, (long) (byte) 10, schedulerFunc2_38, (java.lang.Comparable<java.lang.String>) "");
        int int41 = compareActionsByTime30.compare(strComparableTimedAction35, strComparableTimedAction40);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator42 = wildcardTimedActionComparator27.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime30);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator43 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator42);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime44 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime45 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator46 = compareActionsByTime45.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator47 = compareActionsByTime44.thenComparing(wildcardTimedActionComparator46);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = wildcardTimedActionComparator24.thenComparing(wildcardTimedActionComparator46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = wildcardTimedActionComparator24.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime49);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime49.reversed();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator27);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator28);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator42);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator43);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator46);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator47);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction16.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler23 = strComparableTimedAction22.scheduler;
        long long24 = strComparableTimedAction22.gettime();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(testScheduler23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        rx.concurrency.TestScheduler testScheduler0 = null;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) ' ', schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean5 = strComparableTimedAction4.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableTimedAction4.getstate();
        rx.concurrency.TestScheduler testScheduler7 = strComparableTimedAction4.getscheduler();
        long long8 = strComparableTimedAction4.gettime();
        rx.concurrency.TestScheduler testScheduler9 = strComparableTimedAction4.getscheduler();
        java.lang.Comparable<java.lang.String> strComparable10 = strComparableTimedAction4.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = strComparableTimedAction4.getaction();
        org.junit.Assert.assertNotNull(atomicBoolean5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6, "hi!");
        org.junit.Assert.assertNull(testScheduler7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertNull(testScheduler9);
        org.junit.Assert.assertEquals("'" + strComparable10 + "' != '" + "hi!" + "'", strComparable10, "hi!");
        org.junit.Assert.assertNull(schedulerFunc2_11);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.lang.Comparable<java.lang.String> strComparable12 = strComparableTimedAction10.getstate();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.getscheduler();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        rx.Subscription subscription16 = testScheduler13.schedule(subscriptionFunc0_15);
        long long17 = testScheduler13.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(schedulerFunc1_18);
        long long20 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.reflect.GenericDeclaration, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime23.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean37 = strComparableTimedAction35.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_38 = strComparableTimedAction35.getaction();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean39 = strComparableTimedAction35.isCancelled;
        java.lang.Comparable<java.lang.String> strComparable40 = strComparableTimedAction35.getstate();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime41 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler47 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_49 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction51 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler47, (long) (byte) 10, schedulerFunc2_49, (java.lang.Comparable<java.lang.String>) "");
        int int52 = compareActionsByTime41.compare(strComparableTimedAction46, strComparableTimedAction51);
        strComparableTimedAction51.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean54 = strComparableTimedAction51.getisCancelled();
        strComparableTimedAction51.cancel();
        long long56 = strComparableTimedAction51.gettime();
        int int57 = compareActionsByTime23.compare(strComparableTimedAction35, strComparableTimedAction51);
        java.lang.Class<?> wildcardClass58 = strComparableTimedAction51.getClass();
        rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration> genericDeclarationTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.reflect.GenericDeclaration>(testScheduler13, (long) (byte) 1, schedulerFunc2_22, (java.lang.reflect.GenericDeclaration) wildcardClass58);
        long long60 = testScheduler13.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Object, rx.Subscription> schedulerFunc2_62 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime63 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler64 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_66 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction68 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler64, (long) (byte) 10, schedulerFunc2_66, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler69 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_71 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction73 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler69, (long) (byte) 10, schedulerFunc2_71, (java.lang.Comparable<java.lang.String>) "");
        int int74 = compareActionsByTime63.compare(strComparableTimedAction68, strComparableTimedAction73);
        strComparableTimedAction73.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean76 = strComparableTimedAction73.getisCancelled();
        long long77 = strComparableTimedAction73.time;
        rx.concurrency.TestScheduler testScheduler78 = strComparableTimedAction73.getscheduler();
        rx.concurrency.TestScheduler testScheduler79 = strComparableTimedAction73.scheduler;
        java.lang.Comparable<java.lang.String> strComparable80 = strComparableTimedAction73.state;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_81 = strComparableTimedAction73.action;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Object> objTimedAction82 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Object>(testScheduler13, (long) (short) 100, schedulerFunc2_62, (java.lang.Object) strComparableTimedAction73);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_84 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction86 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (short) 10, schedulerFunc2_84, (java.lang.Comparable<java.lang.String>) "");
        long long87 = strComparableTimedAction86.gettime();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + strComparable12 + "' != '" + "" + "'", strComparable12, "");
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean37);
        org.junit.Assert.assertNull(schedulerFunc2_38);
        org.junit.Assert.assertNotNull(atomicBoolean39);
        org.junit.Assert.assertEquals("'" + strComparable40 + "' != '" + "" + "'", strComparable40, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10L + "'", long77 == 10L);
        org.junit.Assert.assertNotNull(testScheduler78);
        org.junit.Assert.assertNotNull(testScheduler79);
        org.junit.Assert.assertEquals("'" + strComparable80 + "' != '" + "" + "'", strComparable80, "");
        org.junit.Assert.assertNull(schedulerFunc2_81);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        long long10 = testScheduler0.now();
        long long11 = testScheduler0.gettime();
        long long12 = testScheduler0.now();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(subscriptionFunc0_13);
        // The following exception was thrown during execution in test generation
        try {
            testScheduler0.triggerActions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(subscription14);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        testScheduler49.time = (short) -1;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue52 = testScheduler49.getqueue();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue52);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator2 = compareActionsByTime1.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator3 = compareActionsByTime0.thenComparing(wildcardTimedActionComparator2);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator4 = compareActionsByTime0.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime5 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator6 = compareActionsByTime5.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator7 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime5);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator8 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator9 = compareActionsByTime0.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = wildcardTimedActionComparator9.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime11 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler12 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler12, (long) (byte) 10, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler17 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction21 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler17, (long) (byte) 10, schedulerFunc2_19, (java.lang.Comparable<java.lang.String>) "");
        int int22 = compareActionsByTime11.compare(strComparableTimedAction16, strComparableTimedAction21);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime23 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler24 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_26 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction28 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler24, (long) (byte) 10, schedulerFunc2_26, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler29 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_31 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction33 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler29, (long) (byte) 10, schedulerFunc2_31, (java.lang.Comparable<java.lang.String>) "");
        int int34 = compareActionsByTime23.compare(strComparableTimedAction28, strComparableTimedAction33);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator35 = compareActionsByTime11.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime23);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime36 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler37 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_39 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction41 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler37, (long) (byte) 10, schedulerFunc2_39, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler42 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_44 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction46 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler42, (long) (byte) 10, schedulerFunc2_44, (java.lang.Comparable<java.lang.String>) "");
        int int47 = compareActionsByTime36.compare(strComparableTimedAction41, strComparableTimedAction46);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime48 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator50 = compareActionsByTime49.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator51 = compareActionsByTime48.thenComparing(wildcardTimedActionComparator50);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator52 = compareActionsByTime36.thenComparing(wildcardTimedActionComparator51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator53 = compareActionsByTime11.thenComparing(wildcardTimedActionComparator51);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator54 = wildcardTimedActionComparator53.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator55 = wildcardTimedActionComparator54.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime56 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime57 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator58 = compareActionsByTime57.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator59 = compareActionsByTime56.thenComparing(wildcardTimedActionComparator58);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator60 = compareActionsByTime56.reversed();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime61 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator62 = compareActionsByTime61.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator63 = compareActionsByTime56.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime61);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime64 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler65 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_67 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction69 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler65, (long) (byte) 10, schedulerFunc2_67, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler70 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_72 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction74 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler70, (long) (byte) 10, schedulerFunc2_72, (java.lang.Comparable<java.lang.String>) "");
        int int75 = compareActionsByTime64.compare(strComparableTimedAction69, strComparableTimedAction74);
        strComparableTimedAction74.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean77 = strComparableTimedAction74.getisCancelled();
        strComparableTimedAction74.cancel();
        java.lang.Comparable<java.lang.String> strComparable79 = strComparableTimedAction74.state;
        rx.concurrency.TestScheduler testScheduler80 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_82 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction84 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler80, (long) (byte) 10, schedulerFunc2_82, (java.lang.Comparable<java.lang.String>) "");
        int int85 = compareActionsByTime61.compare(strComparableTimedAction74, strComparableTimedAction84);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator86 = compareActionsByTime61.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator87 = wildcardTimedActionComparator86.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator88 = wildcardTimedActionComparator54.thenComparing(wildcardTimedActionComparator87);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator89 = wildcardTimedActionComparator10.thenComparing(wildcardTimedActionComparator87);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator90 = wildcardTimedActionComparator89.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator91 = wildcardTimedActionComparator89.reversed();
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator2);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator3);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator4);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator6);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator7);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator8);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator9);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator50);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator51);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator52);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator53);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator54);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator55);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator58);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator59);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator60);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator62);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator63);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean77);
        org.junit.Assert.assertEquals("'" + strComparable79 + "' != '" + "" + "'", strComparable79, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator86);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator87);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator88);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator89);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator90);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator91);
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime25 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler26 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler26, (long) (byte) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler31 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_33 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction35 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler31, (long) (byte) 10, schedulerFunc2_33, (java.lang.Comparable<java.lang.String>) "");
        int int36 = compareActionsByTime25.compare(strComparableTimedAction30, strComparableTimedAction35);
        rx.concurrency.TestScheduler testScheduler37 = strComparableTimedAction30.getscheduler();
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction30.getscheduler();
        strComparableTimedAction30.cancel();
        rx.concurrency.TestScheduler testScheduler40 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_42 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction44 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler40, (long) (byte) 10, schedulerFunc2_42, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction44.getscheduler();
        int int46 = compareActionsByTime0.compare(strComparableTimedAction30, strComparableTimedAction44);
        rx.concurrency.TestScheduler testScheduler47 = strComparableTimedAction44.getscheduler();
        long long48 = strComparableTimedAction44.time;
        long long49 = strComparableTimedAction44.gettime();
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction44.getstate();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_51 = strComparableTimedAction44.getaction();
        rx.concurrency.TestScheduler testScheduler52 = strComparableTimedAction44.scheduler;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_54 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction56 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler52, 1L, schedulerFunc2_54, (java.lang.Comparable<java.lang.String>) "");
        long long57 = testScheduler52.now();
        testScheduler52.settime(35L);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue60 = testScheduler52.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_61 = null;
        rx.Subscription subscription62 = testScheduler52.schedule(subscriptionFunc0_61);
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_63 = null;
        java.util.concurrent.TimeUnit timeUnit66 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription67 = testScheduler52.schedulePeriodically(subscriptionFunc0_63, (long) (short) -1, (long) (-1), timeUnit66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(testScheduler37);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(testScheduler47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertNull(schedulerFunc2_51);
        org.junit.Assert.assertNotNull(testScheduler52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue60);
        org.junit.Assert.assertNotNull(subscription62);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.triggerActions();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue12 = testScheduler0.queue;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_14 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction16 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 0, schedulerFunc2_14, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable17 = strComparableTimedAction16.getstate();
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction16.getscheduler();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_19 = null;
        rx.Subscription subscription20 = testScheduler18.schedule(subscriptionFunc0_19);
        long long21 = testScheduler18.now();
        testScheduler18.time = (short) 100;
        // The following exception was thrown during execution in test generation
        try {
            testScheduler18.triggerActions((long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue12);
        org.junit.Assert.assertEquals("'" + strComparable17 + "' != '" + "hi!" + "'", strComparable17, "hi!");
        org.junit.Assert.assertNotNull(testScheduler18);
        org.junit.Assert.assertNotNull(subscription20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        long long5 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler.CompareActionsByTime, rx.Subscription> schedulerFunc2_7 = null;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime8 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime9 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator10 = compareActionsByTime9.reversed();
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator11 = compareActionsByTime8.thenComparing(wildcardTimedActionComparator10);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator12 = compareActionsByTime8.reversed();
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime> compareActionsByTimeTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler.CompareActionsByTime>(testScheduler0, (long) 10, schedulerFunc2_7, compareActionsByTime8);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime14 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler15 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler15, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_22 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction24 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (byte) 10, schedulerFunc2_22, (java.lang.Comparable<java.lang.String>) "");
        int int25 = compareActionsByTime14.compare(strComparableTimedAction19, strComparableTimedAction24);
        strComparableTimedAction24.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean27 = strComparableTimedAction24.getisCancelled();
        strComparableTimedAction24.cancel();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = strComparableTimedAction24.getaction();
        java.lang.Comparable<java.lang.String> strComparable30 = strComparableTimedAction24.getstate();
        long long31 = strComparableTimedAction24.gettime();
        rx.concurrency.TestScheduler testScheduler32 = strComparableTimedAction24.scheduler;
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime33 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler34 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_36 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction38 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler34, (long) (byte) 10, schedulerFunc2_36, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler39 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_41 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction43 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler39, (long) (byte) 10, schedulerFunc2_41, (java.lang.Comparable<java.lang.String>) "");
        int int44 = compareActionsByTime33.compare(strComparableTimedAction38, strComparableTimedAction43);
        strComparableTimedAction43.cancel();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean46 = strComparableTimedAction43.getisCancelled();
        long long47 = strComparableTimedAction43.time;
        rx.concurrency.TestScheduler testScheduler48 = strComparableTimedAction43.getscheduler();
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction43.scheduler;
        java.lang.Comparable<java.lang.String> strComparable50 = strComparableTimedAction43.state;
        long long51 = strComparableTimedAction43.time;
        strComparableTimedAction43.cancel();
        java.lang.Comparable<java.lang.String> strComparable53 = strComparableTimedAction43.getstate();
        int int54 = compareActionsByTime8.compare(strComparableTimedAction24, strComparableTimedAction43);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = strComparableTimedAction24.action;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator10);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator11);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator12);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean27);
        org.junit.Assert.assertNull(schedulerFunc2_29);
        org.junit.Assert.assertEquals("'" + strComparable30 + "' != '" + "" + "'", strComparable30, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(testScheduler32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(testScheduler48);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertEquals("'" + strComparable50 + "' != '" + "" + "'", strComparable50, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertEquals("'" + strComparable53 + "' != '" + "" + "'", strComparable53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(schedulerFunc2_55);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        long long8 = testScheduler0.now();
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_11 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction13 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_11, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 1, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_19 = null;
        rx.concurrency.TestScheduler testScheduler20 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_21 = null;
        rx.Subscription subscription22 = testScheduler20.schedule(schedulerFunc1_21);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue23 = testScheduler20.getqueue();
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        rx.Subscription subscription25 = testScheduler20.schedule(subscriptionFunc0_24);
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction26 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) (-1), schedulerFunc2_19, testScheduler20);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_28 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction30 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler20, (long) (short) 10, schedulerFunc2_28, (java.lang.Comparable<java.lang.String>) "hi!");
        testScheduler20.settime((long) 10);
        long long33 = testScheduler20.now();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_34 = null;
        rx.Subscription subscription35 = testScheduler20.schedule(schedulerFunc1_34);
        rx.util.functions.Action0 action0_36 = null;
        rx.Subscription subscription37 = testScheduler20.schedule(action0_36);
        java.lang.Class<?> wildcardClass38 = testScheduler20.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(subscription22);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue23);
        org.junit.Assert.assertNotNull(subscription25);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(subscription35);
        org.junit.Assert.assertNotNull(subscription37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime1 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler2 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_4 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction6 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler2, (long) (byte) 10, schedulerFunc2_4, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        int int12 = compareActionsByTime1.compare(strComparableTimedAction6, strComparableTimedAction11);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime13 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler14 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_16 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction18 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler14, (long) (byte) 10, schedulerFunc2_16, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler19 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler19, (long) (byte) 10, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        int int24 = compareActionsByTime13.compare(strComparableTimedAction18, strComparableTimedAction23);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator25 = compareActionsByTime1.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime13);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime26 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler27 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler27, (long) (byte) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler32 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_34 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction36 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler32, (long) (byte) 10, schedulerFunc2_34, (java.lang.Comparable<java.lang.String>) "");
        int int37 = compareActionsByTime26.compare(strComparableTimedAction31, strComparableTimedAction36);
        rx.concurrency.TestScheduler testScheduler38 = strComparableTimedAction31.getscheduler();
        rx.concurrency.TestScheduler testScheduler39 = strComparableTimedAction31.getscheduler();
        strComparableTimedAction31.cancel();
        rx.concurrency.TestScheduler testScheduler41 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_43 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction45 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler41, (long) (byte) 10, schedulerFunc2_43, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler46 = strComparableTimedAction45.getscheduler();
        int int47 = compareActionsByTime1.compare(strComparableTimedAction31, strComparableTimedAction45);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator48 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime1);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime49 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler50 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_52 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction54 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler50, (long) (byte) 10, schedulerFunc2_52, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler55 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_57 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction59 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler55, (long) (byte) 10, schedulerFunc2_57, (java.lang.Comparable<java.lang.String>) "");
        int int60 = compareActionsByTime49.compare(strComparableTimedAction54, strComparableTimedAction59);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean61 = strComparableTimedAction59.isCancelled;
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_62 = strComparableTimedAction59.action;
        rx.concurrency.TestScheduler testScheduler63 = strComparableTimedAction59.getscheduler();
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean64 = strComparableTimedAction59.getisCancelled();
        long long65 = strComparableTimedAction59.gettime();
        rx.concurrency.TestScheduler testScheduler66 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_68 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction70 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler66, (long) (byte) 10, schedulerFunc2_68, (java.lang.Comparable<java.lang.String>) "");
        int int71 = compareActionsByTime1.compare(strComparableTimedAction59, strComparableTimedAction70);
        rx.concurrency.TestScheduler testScheduler72 = strComparableTimedAction70.scheduler;
        long long73 = testScheduler72.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_75 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction77 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler72, (long) 10, schedulerFunc2_75, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_78 = strComparableTimedAction77.getaction();
        long long79 = strComparableTimedAction77.time;
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(testScheduler38);
        org.junit.Assert.assertNotNull(testScheduler39);
        org.junit.Assert.assertNotNull(testScheduler46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean61);
        org.junit.Assert.assertNull(schedulerFunc2_62);
        org.junit.Assert.assertNotNull(testScheduler63);
        org.junit.Assert.assertNotNull(atomicBoolean64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(testScheduler72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction10.getisCancelled();
        rx.concurrency.TestScheduler testScheduler13 = strComparableTimedAction10.scheduler;
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler13.getqueue();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue15 = testScheduler13.queue;
        testScheduler13.triggerActions((long) (byte) 1);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_18 = null;
        rx.Subscription subscription19 = testScheduler13.schedule(schedulerFunc1_18);
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_20 = null;
        rx.Subscription subscription21 = testScheduler13.schedule(schedulerFunc1_20);
        rx.util.functions.Action0 action0_22 = null;
        rx.Subscription subscription23 = testScheduler13.schedule(action0_22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertNotNull(testScheduler13);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue15);
        org.junit.Assert.assertNotNull(subscription19);
        org.junit.Assert.assertNotNull(subscription21);
        org.junit.Assert.assertNotNull(subscription23);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, rx.Scheduler, rx.Subscription> schedulerFunc2_6 = null;
        rx.concurrency.TestScheduler testScheduler7 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler7, (long) (byte) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler7.triggerActions((long) (byte) 100);
        long long14 = testScheduler7.gettime();
        rx.concurrency.TestScheduler.TimedAction<rx.Scheduler> schedulerTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<rx.Scheduler>(testScheduler0, (long) '4', schedulerFunc2_6, (rx.Scheduler) testScheduler7);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_17 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction19 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_17, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction23 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 100, schedulerFunc2_21, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_24 = null;
        java.util.concurrent.TimeUnit timeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription27 = testScheduler0.schedule(subscriptionFunc0_24, (-1L), timeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime12 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler13 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler13, (long) (byte) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler18 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (long) (byte) 10, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "");
        int int23 = compareActionsByTime12.compare(strComparableTimedAction17, strComparableTimedAction22);
        java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionComparator24 = compareActionsByTime0.thenComparing((java.util.Comparator<rx.concurrency.TestScheduler.TimedAction<?>>) compareActionsByTime12);
        rx.concurrency.TestScheduler testScheduler25 = new rx.concurrency.TestScheduler();
        rx.util.functions.Action0 action0_26 = null;
        rx.Subscription subscription27 = testScheduler25.schedule(action0_26);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_29 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction31 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler25, (long) (short) 10, schedulerFunc2_29, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime32 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler33 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_35 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction37 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler33, (long) (byte) 10, schedulerFunc2_35, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler38 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_40 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction42 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler38, (long) (byte) 10, schedulerFunc2_40, (java.lang.Comparable<java.lang.String>) "");
        int int43 = compareActionsByTime32.compare(strComparableTimedAction37, strComparableTimedAction42);
        rx.concurrency.TestScheduler testScheduler44 = strComparableTimedAction37.getscheduler();
        rx.concurrency.TestScheduler testScheduler45 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_46 = strComparableTimedAction37.action;
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean47 = strComparableTimedAction37.getisCancelled();
        int int48 = compareActionsByTime0.compare(strComparableTimedAction31, strComparableTimedAction37);
        rx.concurrency.TestScheduler testScheduler49 = strComparableTimedAction37.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_50 = null;
        rx.Subscription subscription51 = testScheduler49.schedule(schedulerFunc1_50);
        testScheduler49.settime((long) 10);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_55 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction57 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) 1, schedulerFunc2_55, (java.lang.Comparable<java.lang.String>) "");
        long long58 = testScheduler49.now();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_60 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction62 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler49, (long) (byte) 0, schedulerFunc2_60, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_63 = strComparableTimedAction62.action;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardTimedActionComparator24);
        org.junit.Assert.assertNotNull(subscription27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(testScheduler44);
        org.junit.Assert.assertNotNull(testScheduler45);
        org.junit.Assert.assertNull(schedulerFunc2_46);
        org.junit.Assert.assertNotNull(atomicBoolean47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(testScheduler49);
        org.junit.Assert.assertNotNull(subscription51);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNull(schedulerFunc2_63);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        rx.concurrency.TestScheduler.CompareActionsByTime compareActionsByTime0 = new rx.concurrency.TestScheduler.CompareActionsByTime();
        rx.concurrency.TestScheduler testScheduler1 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler1, (long) (byte) 10, schedulerFunc2_3, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler6 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_8 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction10 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler6, (long) (byte) 10, schedulerFunc2_8, (java.lang.Comparable<java.lang.String>) "");
        int int11 = compareActionsByTime0.compare(strComparableTimedAction5, strComparableTimedAction10);
        java.util.concurrent.atomic.AtomicBoolean atomicBoolean12 = strComparableTimedAction5.getisCancelled();
        java.lang.Comparable<java.lang.String> strComparable13 = strComparableTimedAction5.getstate();
        long long14 = strComparableTimedAction5.gettime();
        rx.concurrency.TestScheduler testScheduler15 = strComparableTimedAction5.getscheduler();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(atomicBoolean12);
        org.junit.Assert.assertEquals("'" + strComparable13 + "' != '" + "" + "'", strComparable13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(testScheduler15);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        long long1 = testScheduler0.now();
        rx.util.functions.Func2<rx.Scheduler, rx.concurrency.TestScheduler, rx.Subscription> schedulerFunc2_3 = null;
        rx.concurrency.TestScheduler testScheduler4 = null;
        rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler> testSchedulerTimedAction5 = new rx.concurrency.TestScheduler.TimedAction<rx.concurrency.TestScheduler>(testScheduler0, (long) 'a', schedulerFunc2_3, testScheduler4);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue6 = testScheduler0.queue;
        testScheduler0.triggerActions();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, 0L, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_12 = null;
        rx.Subscription subscription13 = testScheduler0.schedule(subscriptionFunc0_12);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_15 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction17 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_15, (java.lang.Comparable<java.lang.String>) "hi!");
        rx.concurrency.TestScheduler testScheduler18 = strComparableTimedAction17.getscheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler18, (-1L), schedulerFunc2_20, strComparable21);
        testScheduler18.time = 0L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue6);
        org.junit.Assert.assertNotNull(subscription13);
        org.junit.Assert.assertNotNull(testScheduler18);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions();
        long long13 = testScheduler0.gettime();
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue14 = testScheduler0.queue;
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_15 = null;
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            rx.Subscription subscription18 = testScheduler0.schedule(subscriptionFunc0_15, 10L, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue14);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_9 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction11 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_9, (java.lang.Comparable<java.lang.String>) "");
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_13 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction15 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_13, (java.lang.Comparable<java.lang.String>) "");
        rx.concurrency.TestScheduler testScheduler16 = strComparableTimedAction15.getscheduler();
        rx.util.functions.Func1<rx.Scheduler, rx.Subscription> schedulerFunc1_17 = null;
        rx.Subscription subscription18 = testScheduler16.schedule(schedulerFunc1_17);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_20 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction22 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler16, (long) (byte) 1, schedulerFunc2_20, (java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            testScheduler16.triggerActions((long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(testScheduler16);
        org.junit.Assert.assertNotNull(subscription18);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        rx.concurrency.TestScheduler testScheduler0 = new rx.concurrency.TestScheduler();
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_2 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction4 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (byte) 10, schedulerFunc2_2, (java.lang.Comparable<java.lang.String>) "");
        testScheduler0.triggerActions((long) (byte) 100);
        long long7 = testScheduler0.gettime();
        testScheduler0.triggerActions((long) (byte) -1);
        java.util.Queue<rx.concurrency.TestScheduler.TimedAction<?>> wildcardTimedActionQueue10 = testScheduler0.queue;
        testScheduler0.settime((-1L));
        rx.util.functions.Func0<rx.Subscription> subscriptionFunc0_13 = null;
        rx.Subscription subscription14 = testScheduler0.schedule(subscriptionFunc0_13);
        rx.util.functions.Action0 action0_15 = null;
        rx.Subscription subscription16 = testScheduler0.schedule(action0_15);
        rx.util.functions.Func2<rx.Scheduler, java.lang.Comparable<java.lang.String>, rx.Subscription> schedulerFunc2_18 = null;
        rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>> strComparableTimedAction20 = new rx.concurrency.TestScheduler.TimedAction<java.lang.Comparable<java.lang.String>>(testScheduler0, (long) (short) 10, schedulerFunc2_18, (java.lang.Comparable<java.lang.String>) "");
        long long21 = strComparableTimedAction20.time;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardTimedActionQueue10);
        org.junit.Assert.assertNotNull(subscription14);
        org.junit.Assert.assertNotNull(subscription16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
    }
}

