/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 12:18:30 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Comparator;
import java.util.Date;
import java.util.Queue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.NewThreadScheduler;
import rx.concurrency.SleepingAction;
import rx.concurrency.TestScheduler;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.AtomicObservableSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func0;
import rx.util.functions.Func1;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = (-1L);
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, testScheduler0.time, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      long long1 = (-424L);
      testScheduler_TimedAction0.scheduler.settime(long1);
      assertEquals((-424L), testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-424L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals((-424L), testScheduler1.gettime());
      assertEquals((-424L), testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      testScheduler1.settime(testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long1);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(queue0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long1);
      
      testScheduler0.settime(testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      assertFalse(long0 == long1);
      
      TestScheduler.TimedAction<TestScheduler> testScheduler_TimedAction1 = (TestScheduler.TimedAction<TestScheduler>) mock(TestScheduler.TimedAction.class, new ViolatedAssumptionAnswer());
      TestScheduler.TimedAction<TestScheduler.TimedAction<TestScheduler>> testScheduler_TimedAction2 = new TestScheduler.TimedAction<TestScheduler.TimedAction<TestScheduler>>(testScheduler1, testScheduler_TimedAction0.time, testScheduler_TimedAction0.action, testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long1);
      
      long long2 = testScheduler_TimedAction2.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = (-1L);
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction3 = new TestScheduler.TimedAction<Integer>(testScheduler_TimedAction2.scheduler, long3, testScheduler_TimedAction2.action, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction3.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      Integer integer1 = testScheduler_TimedAction3.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction3.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertEquals(1, (int)integer1);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertNotNull(integer1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Subscription subscription0 = null;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription0, subscription0).when(func2_0).call(any(rx.Scheduler.class) , any(rx.subscriptions.BooleanSubscription.class));
      long long1 = (-1L);
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0, int0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler_TimedAction0.scheduler, testScheduler_TimedAction0.time, testScheduler_TimedAction0.action, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      testScheduler_TimedAction0.scheduler.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      String string0 = testScheduler_TimedAction1.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      String string1 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(string1.equals((Object)string0));
      
      CurrentThreadScheduler currentThreadScheduler1 = testScheduler_TimedAction1.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(currentThreadScheduler1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertSame(currentThreadScheduler1, currentThreadScheduler0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription1);
      assertFalse(long1 == long0);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler_TimedAction1.scheduler.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(queue0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction2 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler_TimedAction1.scheduler, long1, testScheduler_TimedAction1.action, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      AtomicObservableSubscription atomicObservableSubscription1 = testScheduler_TimedAction2.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(atomicObservableSubscription1);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      NewThreadScheduler newThreadScheduler0 = NewThreadScheduler.getInstance();
      assertNotNull(newThreadScheduler0);
      
      Subscription subscription2 = testScheduler_TimedAction1.scheduler.schedule(newThreadScheduler0, (Func2<Scheduler, NewThreadScheduler, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(subscription2);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      AtomicObservableSubscription atomicObservableSubscription2 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertNotNull(atomicObservableSubscription2);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction3 = new TestScheduler.TimedAction<Object>(testScheduler0, testScheduler0.time, testScheduler_TimedAction1.action, atomicObservableSubscription2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction3);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      
      long long2 = 1L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      testScheduler_TimedAction3.scheduler.advanceTimeBy(long2, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription1);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      Func2<Scheduler, Object, Subscription> func2_1 = testScheduler_TimedAction3.getaction();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(func2_1);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription1);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      
      long long3 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long3);
      assertEquals(0L, testScheduler0.time);
      assertFalse(long3 == long2);
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      
      TestScheduler testScheduler1 = new TestScheduler();
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      
      long long4 = (-2415L);
      int int1 = (-1);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = null;
      Subscription subscription0 = null;
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription0);
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, testScheduler0.time, func2_0, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      long long0 = 3143L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule(immediateScheduler0, (Func2<Scheduler, ImmediateScheduler, Subscription>) testScheduler_TimedAction0.action, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      String string0 = "d'e5t{/A*tygjE";
      long long0 = (-1L);
      Func2<Scheduler, String, Subscription> func2_0 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , anyString());
      long long1 = (-814L);
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      String string1 = "tR/dy";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, long0, sleepingAction0, string1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      
      Func2<Scheduler, String, Subscription> func2_1 = testScheduler_TimedAction0.action;
      assertNotNull(func2_1);
      assertFalse(func2_1.equals((Object)func2_0));
      
      long long2 = 961L;
      MockDate mockDate0 = new MockDate(long2);
      assertNotNull(mockDate0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      Subscription subscription0 = testScheduler0.schedule(string0, func2_1, (Date) mockDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(subscription0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(func2_1.equals((Object)func2_0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      DiscardableAction<CurrentThreadScheduler> discardableAction0 = new DiscardableAction<CurrentThreadScheduler>(currentThreadScheduler0, testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(discardableAction0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      
      Subscription subscription1 = discardableAction0.call((Scheduler) testScheduler_TimedAction0.scheduler);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNull(subscription1);
      assertNotSame(string1, string0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      
      Subscription subscription2 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(subscription2);
      assertNotSame(string1, string0);
      assertNotSame(subscription2, subscription0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(subscription2.equals((Object)subscription0));
      
      long long3 = 0L;
      testScheduler0.settime(long3);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      long long4 = 387L;
      System.setCurrentTimeMillis(long4);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1L;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long1 = 3301L;
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_1 = null;
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, long0, func2_1, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      assertFalse(long0 == long1);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription0 = testScheduler_TimedAction1.scheduler.schedule(func0_0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertFalse(long0 == long1);
      
      testScheduler_TimedAction1.scheduler.settime(testScheduler1.time);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(booleanSubscription0);
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      atomicObservableSubscription0.unsubscribe();
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction2 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, testScheduler0.time, testScheduler_TimedAction1.action, atomicObservableSubscription0);
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long1);
      
      long long2 = testScheduler_TimedAction2.scheduler.time;
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = 0L;
      testScheduler_TimedAction1.scheduler.settime(long3);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Scheduler, Delayed, Subscription> func2_0 = (Func2<Scheduler, Delayed, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<Delayed> sleepingAction0 = new SleepingAction<Delayed>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      Delayed delayed0 = null;
      TestScheduler.TimedAction<Delayed> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Delayed>(testScheduler0, testScheduler0.time, sleepingAction0, delayed0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler testScheduler1 = new TestScheduler();
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_0 = (Func2<Scheduler, CurrentThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long1 = (-2787188000000000L);
      long long2 = (-509L);
      long long3 = (-2522L);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      long long4 = (-838L);
      TimeUnit timeUnit3 = TimeUnit.SECONDS;
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(queue0);
      assertNotSame(testScheduler0, testScheduler1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      
      Queue<TestScheduler.TimedAction<?>> queue1 = testScheduler0.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(queue1);
      assertSame(queue1, queue0);
      assertNotSame(testScheduler0, testScheduler1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      
      Func2<Scheduler, NewThreadScheduler, Subscription> func2_1 = (Func2<Scheduler, NewThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long5 = 7L;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = (-1L);
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long1 = 0L;
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      CurrentThreadScheduler currentThreadScheduler0 = null;
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_1 = (Func2<Scheduler, CurrentThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(currentThreadScheduler0, func2_1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      AtomicObservableSubscription atomicObservableSubscription1 = atomicObservableSubscription0.wrap(subscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(atomicObservableSubscription1);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      
      atomicObservableSubscription1.unsubscribe();
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, long0, sleepingAction0, atomicObservableSubscription1);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler_TimedAction0.scheduler.advanceTimeTo(testScheduler_TimedAction0.time, timeUnit0);
      assertEquals((-86400000000000L), testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals((-86400000000000L), testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      AtomicBoolean atomicBoolean0 = testScheduler_TimedAction0.getisCancelled();
      assertEquals((-86400000000000L), testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertEquals((-86400000000000L), testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(atomicBoolean0);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      Comparator<TestScheduler.TimedAction<?>> comparator0 = testScheduler_CompareActionsByTime0.reversed();
      assertNotNull(comparator0);
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals((-86400000000000L), testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0, int0);
      assertEquals((-86400000000000L), testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = testScheduler0.now();
      assertEquals((-86400000000000L), testScheduler0.gettime());
      assertEquals((-86400000L), long2);
      assertEquals((-86400000000000L), testScheduler0.time);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = 0L;
      testScheduler0.triggerActions(long3);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      
      long long4 = 3671L;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(integer0);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long4);
      assertTrue(integer0.equals((Object)int0));
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Integer>(testScheduler_TimedAction0.scheduler, long4, testScheduler_TimedAction0.action, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(3671L, testScheduler_TimedAction1.gettime());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(3671L, testScheduler_TimedAction1.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction1);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long4);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = testScheduler_TimedAction1.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(3671L, testScheduler_TimedAction1.gettime());
      assertTrue(atomicObservableSubscription1.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(3671L, testScheduler_TimedAction1.time);
      assertEquals((-1L), testScheduler_TimedAction0.time);
      assertNotNull(string0);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertFalse(long0 == long4);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long4);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      testScheduler0.triggerActions(testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long0 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long0);
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1L;
      String string0 = "";
      Func2<Scheduler, String, Subscription> func2_0 = null;
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, long0, func2_0, string0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      Func2<Scheduler, String, Subscription> func2_1 = testScheduler_TimedAction0.action;
      assertNull(func2_1);
      
      long long1 = 0L;
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_1, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedule(string0, (Func2<Scheduler, String, Subscription>) sleepingAction0, long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(subscription0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeTo(long0, timeUnit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_0 = null;
      long long1 = (-1L);
      SleepingAction<ImmediateScheduler> sleepingAction0 = new SleepingAction<ImmediateScheduler>(func2_0, immediateScheduler0, long1);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(immediateScheduler0, (Func2<Scheduler, ImmediateScheduler, Subscription>) sleepingAction0, long1, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      long long0 = 0L;
      testScheduler0.settime(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long0);
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1L;
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = null;
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, long0, func2_0, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = (TestScheduler.TimedAction<Object>) mock(TestScheduler.TimedAction.class, new ViolatedAssumptionAnswer());
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction1);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(1, int0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler_TimedAction0.scheduler.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(1L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1L, testScheduler_TimedAction0.time);
      assertNotNull(queue0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_0 = null;
      SleepingAction<CurrentThreadScheduler> sleepingAction0 = new SleepingAction<CurrentThreadScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      long long1 = (-622L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeTo(long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertFalse(long1 == long0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, long0, sleepingAction0, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      
      String string0 = "=b#JJgD#B";
      long long2 = 2908L;
      String string1 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(string1.equals((Object)string0));
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule(string0, (Func2<Scheduler, String, Subscription>) testScheduler_TimedAction0.action, long2, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription0);
      assertNotSame(string0, string1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      String string2 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      
      long long3 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long3);
      assertEquals(0L, testScheduler0.time);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      
      testScheduler_TimedAction0.scheduler.settime(long2);
      assertEquals(2908L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(2908L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long0 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      
      testScheduler0.triggerActions(long2);
      assertEquals(2908L, testScheduler0.gettime());
      assertEquals(2908L, testScheduler0.time);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      testScheduler0.triggerActions(long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      AtomicObservableSubscription atomicObservableSubscription0 = null;
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, long0, sleepingAction0, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = testScheduler1.now();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(long1 == long0);
      
      long long2 = 580L;
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      testScheduler1.settime(long2);
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler1, long0, testScheduler_TimedAction0.action, immediateScheduler0);
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      testScheduler_TimedAction1.scheduler.triggerActions(testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      testScheduler_TimedAction1.cancel();
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      testScheduler_TimedAction1.scheduler.triggerActions();
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      long long3 = testScheduler_TimedAction1.scheduler.gettime();
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, long3);
      assertEquals(580L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      
      int int0 = (-3017);
      Integer integer0 = new Integer(int0);
      assertEquals((-3017), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction2 = new TestScheduler.TimedAction<Integer>(testScheduler_TimedAction1.scheduler, long2, testScheduler_TimedAction0.action, integer0);
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(580L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(580L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long3);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      TestScheduler testScheduler2 = testScheduler_TimedAction2.getscheduler();
      assertEquals(580L, testScheduler0.gettime());
      assertEquals(580L, testScheduler_TimedAction2.gettime());
      assertEquals(580L, testScheduler2.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(580L, testScheduler1.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(580L, testScheduler0.time);
      assertEquals(580L, testScheduler_TimedAction2.time);
      assertEquals(580L, testScheduler2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(580L, testScheduler1.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler2);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler2, testScheduler1);
      assertSame(testScheduler2, testScheduler0);
      assertSame(testScheduler1, testScheduler2);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long3);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 84L;
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(84L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(84L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(84L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(84L, testScheduler_TimedAction0.time);
      assertNotNull(subscription0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(84L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(84L, testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(84L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(84L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(queue0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      String string0 = "rx.concurrency.TestScheduler$TimedAction";
      Subscription subscription1 = testScheduler0.schedule(string0, (Func2<Scheduler, String, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(84L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(84L, testScheduler_TimedAction0.time);
      assertNotNull(subscription1);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription1, subscription0);
      assertFalse(subscription1.equals((Object)subscription0));
      
      long long1 = testScheduler0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      assertSame(testScheduler0, testScheduler1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = null;
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, testScheduler0.time, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler1.schedule(testScheduler0, (Func2<Scheduler, TestScheduler, Subscription>) testScheduler_TimedAction0.action, testScheduler0.time, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long0 = (-2539L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      testScheduler1.advanceTimeTo(long0, timeUnit1);
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler1.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-219369600000000000L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0, int0);
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      
      testScheduler_TimedAction0.scheduler.triggerActions();
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      int int1 = 0;
      MockDate mockDate0 = new MockDate(int1, int0, int0);
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(mockDate0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule((Object) currentThreadScheduler0, (Func2<Scheduler, Object, Subscription>) testScheduler_TimedAction0.action, (Date) mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription1);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(subscription1, subscription0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler1, testScheduler0.time, testScheduler_TimedAction0.action, immediateScheduler0);
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler1.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-219369600000000000L), testScheduler1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_1 = testScheduler_TimedAction1.getaction();
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler1.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-219369600000000000L), testScheduler1.time);
      assertNotNull(func2_1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = (-1L);
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction2 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler_TimedAction1.scheduler, long1, testScheduler_TimedAction0.action, currentThreadScheduler0);
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler1.gettime());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-219369600000000000L), testScheduler1.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long1 == long0);
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_2 = testScheduler_TimedAction2.getaction();
      assertEquals((-219369600000000000L), testScheduler0.gettime());
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-219369600000000000L), testScheduler1.gettime());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertEquals((-219369600000000000L), testScheduler0.time);
      assertEquals((-219369600000000000L), testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-219369600000000000L), testScheduler1.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertNotNull(func2_2);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        testScheduler_TimedAction1.scheduler.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.SleepingAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = (-587L);
      Func2<Scheduler, Object, Subscription> func2_0 = (Func2<Scheduler, Object, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long1 = 0L;
      SleepingAction<Object> sleepingAction0 = new SleepingAction<Object>(func2_0, testScheduler0, long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Object>(testScheduler0, long0, sleepingAction0, sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-587L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-587L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      Object object0 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-587L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-587L), testScheduler_TimedAction0.time);
      assertNotNull(object0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      long long0 = (-1077L);
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, sleepingAction0, integer0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertTrue(integer0.equals((Object)int0));
      
      long long1 = testScheduler_TimedAction0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, long1);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      
      int int1 = 0;
      Integer integer1 = new Integer(int1);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler_TimedAction0.scheduler, int0, testScheduler_TimedAction0.action, integer1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      testScheduler_TimedAction1.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      TestScheduler.TimedAction<Delayed> testScheduler_TimedAction2 = new TestScheduler.TimedAction<Delayed>(testScheduler_TimedAction1.scheduler, testScheduler_TimedAction1.time, testScheduler_TimedAction0.action, delayed0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(1L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertEquals(1L, testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      TestScheduler testScheduler1 = testScheduler_TimedAction2.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(1L, testScheduler_TimedAction1.gettime());
      assertEquals(1L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(1L, testScheduler_TimedAction1.time);
      assertEquals(1L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_0 = (Func2<Scheduler, ImmediateScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.concurrency.ImmediateScheduler.class));
      SleepingAction<ImmediateScheduler> sleepingAction0 = new SleepingAction<ImmediateScheduler>(func2_0, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      ImmediateScheduler immediateScheduler1 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler1);
      assertSame(immediateScheduler1, immediateScheduler0);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      long long1 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription0 = immediateScheduler0.schedule(func0_0, long1, timeUnit0);
      assertNull(subscription0);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long1 == long0);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, immediateScheduler1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription1);
      assertSame(immediateScheduler1, immediateScheduler0);
      assertFalse(long0 == long1);
      
      Subscription subscription2 = sleepingAction0.call((Scheduler) testScheduler0, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription2);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long0 == long1);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler0, long0, sleepingAction0, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      
      testScheduler_TimedAction0.cancel();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long0 == long1);
      
      Func0<Subscription> func0_1 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func0_1).call();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      Subscription subscription3 = testScheduler_TimedAction0.scheduler.schedulePeriodically(func0_1, long1, testScheduler_TimedAction0.time, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription3);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      ImmediateScheduler immediateScheduler2 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(immediateScheduler2);
      assertSame(immediateScheduler2, immediateScheduler0);
      assertSame(immediateScheduler2, immediateScheduler1);
      assertSame(immediateScheduler0, immediateScheduler2);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long0 == long1);
      
      long long2 = testScheduler_TimedAction0.scheduler.now();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, long2);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertSame(immediateScheduler0, immediateScheduler2);
      assertSame(immediateScheduler0, immediateScheduler1);
      assertFalse(long0 == long1);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = 0L;
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      testScheduler0.advanceTimeTo(long3, timeUnit2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      TestScheduler testScheduler1 = null;
      Func2<Scheduler, TestScheduler, Subscription> func2_0 = null;
      Subscription subscription0 = testScheduler0.schedule(testScheduler1, func2_0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_1 = null;
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, long0, func2_1, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_2 = testScheduler_TimedAction0.getaction();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNull(func2_2);
      
      AtomicObservableSubscription atomicObservableSubscription1 = testScheduler_TimedAction0.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(atomicObservableSubscription1);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule(func0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription1);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertNotSame(subscription1, subscription0);
      assertFalse(subscription1.equals((Object)subscription0));
      
      // Undeclared exception!
      try { 
        testScheduler_TimedAction0.scheduler.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
          assertNotNull(testScheduler_CompareActionsByTime0);
          
          TestScheduler testScheduler0 = new TestScheduler();
          assertEquals(0L, testScheduler0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertNotNull(testScheduler0);
          
          long long0 = 0L;
          Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_0 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
          doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
          NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
          assertNotNull(newThreadScheduler0);
          
          long long1 = 1L;
          Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
          doReturn((Object) null).when(func0_0).call();
          Subscription subscription0 = testScheduler0.schedule(func0_0);
          assertEquals(0L, testScheduler0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertNotNull(subscription0);
          
          SleepingAction<AtomicObservableSubscription> sleepingAction0 = new SleepingAction<AtomicObservableSubscription>(func2_0, newThreadScheduler0, long1);
          assertNotNull(sleepingAction0);
          assertFalse(long1 == long0);
          
          AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertNotNull(atomicObservableSubscription0);
          
          TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler0, long0, sleepingAction0, atomicObservableSubscription0);
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(testScheduler_TimedAction0);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          testScheduler_TimedAction0.cancel();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          testScheduler_TimedAction0.scheduler.triggerActions();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          String string0 = testScheduler_TimedAction0.toString();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(string0);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, atomicObservableSubscription0);
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler0.time);
          assertNull(subscription1);
          assertFalse(long1 == long0);
          
          String string1 = testScheduler_TimedAction0.toString();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(string1);
          assertNotSame(string1, string0);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          assertTrue(string1.equals((Object)string0));
          
          TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
          assertEquals(0L, testScheduler1.gettime());
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(testScheduler1);
          assertSame(testScheduler1, testScheduler0);
          assertSame(testScheduler0, testScheduler1);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
          assertNotNull(currentThreadScheduler0);
          
          TimeUnit timeUnit0 = TimeUnit.DAYS;
          Subscription subscription2 = testScheduler1.schedulePeriodically(currentThreadScheduler0, (Func2<Scheduler, CurrentThreadScheduler, Subscription>) testScheduler_TimedAction0.action, testScheduler_TimedAction0.time, testScheduler0.time, timeUnit0);
          assertEquals(0L, testScheduler1.gettime());
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(subscription2);
          assertSame(testScheduler1, testScheduler0);
          assertSame(testScheduler0, testScheduler1);
          assertFalse(long0 == long1);
          assertFalse(subscription2.equals((Object)subscription0));
          assertFalse(long1 == long0);
          
          testScheduler_TimedAction0.cancel();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertSame(testScheduler0, testScheduler1);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          String string2 = testScheduler_TimedAction0.toString();
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(string2);
          assertSame(testScheduler0, testScheduler1);
          assertNotSame(string2, string0);
          assertNotSame(string2, string1);
          assertFalse(long0 == long1);
          assertTrue(string2.equals((Object)string1));
          assertTrue(string2.equals((Object)string0));
          assertFalse(long1 == long0);
          
          Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler1.getqueue();
          assertEquals(0L, testScheduler1.gettime());
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(queue0);
          assertSame(testScheduler1, testScheduler0);
          assertSame(testScheduler0, testScheduler1);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          
          CompositeSubscription compositeSubscription0 = null;
          TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
          Subscription subscription3 = testScheduler_TimedAction0.scheduler.schedule(compositeSubscription0, (Func2<Scheduler, CompositeSubscription, Subscription>) testScheduler_TimedAction0.action, testScheduler_TimedAction0.time, timeUnit1);
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(subscription3);
          assertSame(testScheduler0, testScheduler1);
          assertNotSame(subscription3, subscription0);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          assertFalse(timeUnit1.equals((Object)timeUnit0));
          assertFalse(subscription3.equals((Object)subscription0));
          assertFalse(subscription3.equals((Object)subscription2));
          
          long long2 = testScheduler1.now();
          assertEquals(0L, testScheduler1.gettime());
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, long2);
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertSame(testScheduler1, testScheduler0);
          assertSame(testScheduler0, testScheduler1);
          assertFalse(long0 == long1);
          assertFalse(long1 == long0);
          assertTrue(long2 == long0);
          assertFalse(long2 == long1);
          
          Queue<TestScheduler.TimedAction<?>> queue1 = testScheduler1.getqueue();
          assertEquals(0L, testScheduler1.gettime());
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertEquals(0L, testScheduler1.time);
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(queue1);
          assertSame(testScheduler1, testScheduler0);
          assertSame(testScheduler0, testScheduler1);
          assertSame(queue1, queue0);
          assertTrue(long0 == long2);
          assertFalse(long0 == long1);
          assertFalse(long1 == long2);
          assertFalse(long1 == long0);
          
          AtomicObservableSubscription atomicObservableSubscription1 = atomicObservableSubscription0.wrap(subscription3);
          assertEquals(0L, testScheduler0.gettime());
          assertFalse(atomicObservableSubscription0.isUnsubscribed());
          assertEquals(0L, testScheduler_TimedAction0.gettime());
          assertFalse(atomicObservableSubscription1.isUnsubscribed());
          assertEquals(0L, testScheduler0.time);
          assertEquals(0L, testScheduler_TimedAction0.time);
          assertNotNull(atomicObservableSubscription1);
          assertSame(testScheduler0, testScheduler1);
          assertNotSame(subscription3, subscription0);
          assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
          assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
          assertTrue(long0 == long2);
          assertFalse(long0 == long1);
          assertFalse(long1 == long2);
          assertFalse(long1 == long0);
          assertFalse(timeUnit1.equals((Object)timeUnit0));
          assertFalse(subscription3.equals((Object)subscription0));
          assertFalse(subscription3.equals((Object)subscription2));
          
          long long3 = 0L;
          // Undeclared exception!
          testScheduler1.advanceTimeBy(long3, timeUnit1);
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_0 = (Func2<Scheduler, CurrentThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.concurrency.CurrentThreadScheduler.class));
      long long1 = (-509L);
      SleepingAction<CurrentThreadScheduler> sleepingAction0 = new SleepingAction<CurrentThreadScheduler>(func2_0, currentThreadScheduler0, long1);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long0);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription1);
      assertFalse(long1 == long0);
      
      DiscardableAction<CurrentThreadScheduler> discardableAction0 = new DiscardableAction<CurrentThreadScheduler>(currentThreadScheduler0, sleepingAction0);
      assertNotNull(discardableAction0);
      assertFalse(long1 == long0);
      
      long long2 = (-2522L);
      Subscription subscription2 = sleepingAction0.call((Scheduler) testScheduler0, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      discardableAction0.unsubscribe();
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      
      currentThreadScheduler0.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, long2, long1, timeUnit1);
      sleepingAction0.call((Scheduler) currentThreadScheduler0, currentThreadScheduler0);
      sleepingAction0.call((Scheduler) testScheduler0, currentThreadScheduler0);
      sleepingAction0.call((Scheduler) testScheduler0, currentThreadScheduler0);
      sleepingAction0.call((Scheduler) testScheduler0, currentThreadScheduler0);
      discardableAction0.call((Scheduler) testScheduler0);
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      testScheduler0.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, long1, long1, timeUnit2);
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func0_0).call();
      long long3 = (-838L);
      TimeUnit timeUnit3 = TimeUnit.SECONDS;
      testScheduler0.schedulePeriodically(func0_0, long3, long3, timeUnit3);
      testScheduler0.getqueue();
      testScheduler0.getqueue();
      Func2<Scheduler, NewThreadScheduler, Subscription> func2_1 = (Func2<Scheduler, NewThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long4 = 7L;
      SleepingAction<NewThreadScheduler> sleepingAction1 = new SleepingAction<NewThreadScheduler>(func2_1, testScheduler0, long4);
      NewThreadScheduler newThreadScheduler0 = NewThreadScheduler.getInstance();
      TestScheduler.TimedAction<NewThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<NewThreadScheduler>(testScheduler0, long2, sleepingAction1, newThreadScheduler0);
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      // Undeclared exception!
      testScheduler1.triggerActions(long3);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      assertNotNull(thaiBuddhistDate0);
      
      Func2<Scheduler, ChronoLocalDate, Subscription> func2_0 = (Func2<Scheduler, ChronoLocalDate, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(java.time.chrono.ChronoLocalDate.class));
      SleepingAction<ChronoLocalDate> sleepingAction0 = new SleepingAction<ChronoLocalDate>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      DiscardableAction<ChronoLocalDate> discardableAction0 = new DiscardableAction<ChronoLocalDate>(thaiBuddhistDate0, sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(discardableAction0);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, (ChronoLocalDate) thaiBuddhistDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription1);
      
      Func2<Scheduler, DiscardableAction<ChronoLocalDate>, Subscription> func2_1 = (Func2<Scheduler, DiscardableAction<ChronoLocalDate>, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription2 = testScheduler0.schedule(discardableAction0, func2_1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription2);
      assertNotSame(subscription2, subscription0);
      assertFalse(subscription2.equals((Object)subscription0));
      
      long long1 = (-411L);
      testScheduler0.settime(long1);
      assertEquals((-411L), testScheduler0.gettime());
      assertEquals((-411L), testScheduler0.time);
      assertFalse(long1 == long0);
      
      long long2 = testScheduler0.gettime();
      assertEquals((-411L), testScheduler0.gettime());
      assertEquals((-411L), long2);
      assertEquals((-411L), testScheduler0.time);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      int int0 = (-1653);
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func0_0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription0 = testScheduler0.schedulePeriodically(func0_0, (long) int0, (long) int0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Integer integer0 = new Integer(int0);
      assertEquals((-1653), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Func2<Scheduler, Integer, Subscription> func2_0 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , anyInt());
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      Integer integer1 = new Integer(int0);
      assertEquals((-1653), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, integer1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNull(subscription1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      Func2<Scheduler, CurrentThreadScheduler, Subscription> func2_1 = (Func2<Scheduler, CurrentThreadScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = (-979L);
      SleepingAction<CurrentThreadScheduler> sleepingAction1 = new SleepingAction<CurrentThreadScheduler>(func2_1, testScheduler0, long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction1);
      
      DiscardableAction<CurrentThreadScheduler> discardableAction0 = new DiscardableAction<CurrentThreadScheduler>(currentThreadScheduler0, sleepingAction1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(discardableAction0);
      
      Subscription subscription2 = testScheduler0.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription2);
      assertNotSame(subscription2, subscription0);
      assertFalse(subscription2.equals((Object)subscription0));
      
      Subscription subscription3 = testScheduler0.schedule(integer0, (Func2<Scheduler, Integer, Subscription>) sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription3);
      assertFalse(subscription3.equals((Object)subscription2));
      assertFalse(subscription3.equals((Object)subscription0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      String string0 = "";
      long long1 = 370L;
      NewThreadScheduler newThreadScheduler0 = new NewThreadScheduler();
      assertNotNull(newThreadScheduler0);
      
      Func2<Scheduler, NewThreadScheduler, Subscription> func2_0 = null;
      SleepingAction<NewThreadScheduler> sleepingAction0 = new SleepingAction<NewThreadScheduler>(func2_0, testScheduler0, testScheduler0.time);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      
      Subscription subscription0 = testScheduler0.schedule(newThreadScheduler0, (Func2<Scheduler, NewThreadScheduler, Subscription>) sleepingAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Func2<Scheduler, String, Subscription> func2_1 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long2 = 915L;
      SleepingAction<String> sleepingAction1 = new SleepingAction<String>(func2_1, testScheduler0, long2);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string1 = "Viw2(9E";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, long1, sleepingAction1, string1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(370L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(370L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(string1.equals((Object)string0));
      
      Func2<Scheduler, String, Subscription> func2_2 = testScheduler_TimedAction0.action;
      assertNotNull(func2_2);
      assertFalse(func2_2.equals((Object)func2_1));
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Subscription subscription1 = testScheduler0.schedule(string0, func2_2, long0, timeUnit1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(370L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(370L, testScheduler_TimedAction0.time);
      assertNotNull(subscription1);
      assertNotSame(subscription1, subscription0);
      assertNotSame(string0, string1);
      assertNotSame(subscription0, subscription1);
      assertNotSame(string1, string0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(func2_2.equals((Object)func2_1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeBy(long0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      long long1 = (-187074720000000000L);
      long long2 = (-570L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(func0_0, long1, long2, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription0, subscription0).when(func2_0).call(any(rx.Scheduler.class) , any(rx.subscriptions.BooleanSubscription.class));
      long long3 = (-1L);
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long3);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(sleepingAction0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler0, long0, sleepingAction0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      int int0 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0, int0);
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler_TimedAction0.scheduler, testScheduler_TimedAction0.time, testScheduler_TimedAction0.action, currentThreadScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      testScheduler_TimedAction0.scheduler.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      String string0 = testScheduler_TimedAction1.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(string0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      String string1 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      CurrentThreadScheduler currentThreadScheduler1 = testScheduler_TimedAction1.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(currentThreadScheduler1);
      assertSame(currentThreadScheduler1, currentThreadScheduler0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      Subscription subscription1 = sleepingAction0.call((Scheduler) testScheduler0, booleanSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription1);
      assertSame(subscription1, subscription0);
      assertSame(subscription0, subscription1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler_TimedAction1.scheduler.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(queue0);
      assertSame(subscription0, subscription1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      TestScheduler.TimedAction<AtomicObservableSubscription> testScheduler_TimedAction2 = new TestScheduler.TimedAction<AtomicObservableSubscription>(testScheduler_TimedAction1.scheduler, long3, testScheduler_TimedAction1.action, atomicObservableSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      AtomicObservableSubscription atomicObservableSubscription1 = testScheduler_TimedAction2.getstate();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertFalse(atomicObservableSubscription1.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(atomicObservableSubscription1);
      assertSame(atomicObservableSubscription0, atomicObservableSubscription1);
      assertSame(subscription0, subscription1);
      assertSame(atomicObservableSubscription1, atomicObservableSubscription0);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      NewThreadScheduler newThreadScheduler0 = NewThreadScheduler.getInstance();
      assertNotNull(newThreadScheduler0);
      
      Subscription subscription2 = testScheduler_TimedAction1.scheduler.schedule(newThreadScheduler0, (Func2<Scheduler, NewThreadScheduler, Subscription>) testScheduler_TimedAction0.action);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(subscription2);
      assertSame(subscription0, subscription1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      
      AtomicObservableSubscription atomicObservableSubscription2 = new AtomicObservableSubscription();
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertNotNull(atomicObservableSubscription2);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction3 = new TestScheduler.TimedAction<Object>(testScheduler0, testScheduler0.time, testScheduler_TimedAction1.action, atomicObservableSubscription2);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      
      long long4 = 1L;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      testScheduler_TimedAction3.scheduler.advanceTimeBy(long4, timeUnit1);
      assertEquals(60000000000L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(60000000000L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertSame(subscription0, subscription1);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription0);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long4);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long4);
      assertFalse(long2 == long1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long4);
      assertFalse(long3 == long1);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      Func2<Scheduler, Object, Subscription> func2_1 = testScheduler_TimedAction3.getaction();
      assertEquals(60000000000L, testScheduler0.gettime());
      assertFalse(atomicObservableSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(60000000000L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(func2_1);
      assertSame(subscription0, subscription1);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription0);
      assertNotSame(atomicObservableSubscription2, atomicObservableSubscription1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long4);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long4);
      assertFalse(long2 == long1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long4);
      assertFalse(long3 == long1);
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription0));
      assertFalse(atomicObservableSubscription2.equals((Object)atomicObservableSubscription1));
      
      long long5 = testScheduler0.now();
      assertEquals(60000000000L, testScheduler0.gettime());
      assertEquals(60000L, long5);
      assertEquals(60000000000L, testScheduler0.time);
      assertFalse(long5 == long2);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long4);
      assertFalse(long5 == long3);
  }
}
