/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 05:55:00 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ExecutorScheduler;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.NewThreadScheduler;
import rx.concurrency.SleepingAction;
import rx.concurrency.TestScheduler;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.AtomicObservableSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func0;
import rx.util.functions.Func1;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      testScheduler0.triggerActions();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Func2<CompositeSubscription, AtomicObservableSubscription, BooleanSubscription> func2_0 = (Func2<CompositeSubscription, AtomicObservableSubscription, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule((Callable<DiscardableAction>) callable0, (Func2<Scheduler, Callable<DiscardableAction>, Subscription>) func2_0);
      assertNotNull(subscription0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      int int0 = 2447;
      Integer integer0 = new Integer(int0);
      assertEquals(2447, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, int0);
      assertNotNull(sleepingAction0);
      
      DiscardableAction<Integer> discardableAction0 = new DiscardableAction<Integer>(integer0, sleepingAction0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(discardableAction0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0, long0, timeUnit0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(subscription0);
      
      AtomicObservableSubscription atomicObservableSubscription0 = new AtomicObservableSubscription(subscription0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(atomicObservableSubscription0);
      
      atomicObservableSubscription0.unsubscribe();
      assertTrue(integer0.equals((Object)int0));
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_1 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(discardableAction0).when(func2_1).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      Subscription subscription1 = testScheduler0.schedule(atomicObservableSubscription0, func2_1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription0, subscription1);
      assertNotSame(subscription1, subscription0);
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertNotNull(subscription1);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_2 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(booleanSubscription0).when(func2_2).call(any(rx.Scheduler.class) , any(rx.subscriptions.BooleanSubscription.class));
      booleanSubscription0.unsubscribe();
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      long long1 = 1699L;
      SleepingAction<BooleanSubscription> sleepingAction1 = new SleepingAction<BooleanSubscription>(func2_2, testScheduler0, long1);
      assertFalse(long1 == long0);
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(sleepingAction1);
      
      Subscription subscription2 = testScheduler0.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) sleepingAction1);
      assertFalse(long1 == long0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription0);
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription2);
      
      Func2<Scheduler, AtomicObservableSubscription, Subscription> func2_3 = (Func2<Scheduler, AtomicObservableSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription2, (Object) null).when(func2_3).call(any(rx.Scheduler.class) , any(rx.util.AtomicObservableSubscription.class));
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      assertNotNull(executorScheduler0);
      
      SleepingAction<AtomicObservableSubscription> sleepingAction2 = new SleepingAction<AtomicObservableSubscription>(func2_3, executorScheduler0, long0);
      assertFalse(long1 == long0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(long0 == long1);
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(sleepingAction2);
      
      Subscription subscription3 = sleepingAction2.call((Scheduler) executorScheduler0, atomicObservableSubscription0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long1 == long0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription3.equals((Object)subscription0));
      assertFalse(subscription3.equals((Object)subscription1));
      assertNotSame(subscription0, subscription3);
      assertNotSame(subscription0, subscription1);
      assertNotSame(subscription0, subscription2);
      assertSame(subscription2, subscription3);
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription0);
      assertNotSame(subscription3, subscription0);
      assertSame(subscription3, subscription2);
      assertNotSame(subscription3, subscription1);
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription3);
      
      Subscription subscription4 = testScheduler0.schedule(atomicObservableSubscription0, (Func2<Scheduler, AtomicObservableSubscription, Subscription>) sleepingAction2);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(long1 == long0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription4.equals((Object)subscription0));
      assertFalse(subscription4.equals((Object)subscription2));
      assertFalse(subscription4.equals((Object)subscription1));
      assertFalse(subscription4.equals((Object)subscription3));
      assertNotSame(subscription0, subscription3);
      assertNotSame(subscription0, subscription4);
      assertNotSame(subscription0, subscription1);
      assertNotSame(subscription0, subscription2);
      assertSame(subscription2, subscription3);
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription4);
      assertNotSame(subscription2, subscription0);
      assertNotSame(subscription4, subscription0);
      assertNotSame(subscription4, subscription2);
      assertNotSame(subscription4, subscription1);
      assertNotSame(subscription4, subscription3);
      assertTrue(atomicObservableSubscription0.isUnsubscribed());
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription4);
      
      testScheduler0.triggerActions();
      String string0 = "nTho";
      Func2<Scheduler, String, Subscription> func2_4 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(subscription0).when(func2_4).call(any(rx.Scheduler.class) , anyString());
      SleepingAction<String> sleepingAction3 = new SleepingAction<String>(func2_4, testScheduler0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(subscription0.equals((Object)subscription4));
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertNotNull(sleepingAction3);
      
      Subscription subscription5 = sleepingAction3.call((Scheduler) testScheduler0, string0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(subscription0.equals((Object)subscription4));
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription5.equals((Object)subscription1));
      assertFalse(subscription5.equals((Object)subscription4));
      assertFalse(subscription5.equals((Object)subscription3));
      assertFalse(subscription5.equals((Object)subscription2));
      assertNotSame(subscription0, subscription3);
      assertNotSame(subscription0, subscription4);
      assertNotSame(subscription0, subscription1);
      assertSame(subscription0, subscription5);
      assertNotSame(subscription0, subscription2);
      assertNotSame(subscription5, subscription1);
      assertNotSame(subscription5, subscription4);
      assertNotSame(subscription5, subscription3);
      assertSame(subscription5, subscription0);
      assertNotSame(subscription5, subscription2);
      assertNotNull(subscription5);
      
      Subscription subscription6 = testScheduler0.schedule(string0, (Func2<Scheduler, String, Subscription>) sleepingAction3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long0 == long1);
      assertFalse(subscription0.equals((Object)subscription3));
      assertFalse(subscription0.equals((Object)subscription4));
      assertFalse(subscription0.equals((Object)subscription1));
      assertFalse(subscription0.equals((Object)subscription2));
      assertFalse(subscription6.equals((Object)subscription2));
      assertFalse(subscription6.equals((Object)subscription3));
      assertFalse(subscription6.equals((Object)subscription5));
      assertFalse(subscription6.equals((Object)subscription4));
      assertFalse(subscription6.equals((Object)subscription0));
      assertFalse(subscription6.equals((Object)subscription1));
      assertNotSame(subscription0, subscription3);
      assertNotSame(subscription0, subscription4);
      assertNotSame(subscription0, subscription6);
      assertNotSame(subscription0, subscription1);
      assertSame(subscription0, subscription5);
      assertNotSame(subscription0, subscription2);
      assertNotSame(subscription6, subscription2);
      assertNotSame(subscription6, subscription3);
      assertNotSame(subscription6, subscription5);
      assertNotSame(subscription6, subscription4);
      assertNotSame(subscription6, subscription0);
      assertNotSame(subscription6, subscription1);
      assertNotNull(subscription6);
      
      long long2 = testScheduler0.now();
      assertEquals(0L, long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = (-1L);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeTo(long3, timeUnit1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = (-2392L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = testScheduler0.now();
      assertEquals(0L, long0);
      
      long long1 = testScheduler0.now();
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertTrue(long0 == long1);
      assertNotNull(subscription0);
      
      long long2 = testScheduler0.now();
      assertEquals(0L, long2);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      // Undeclared exception!
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = null;
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertNotNull(subscription0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeTo(long0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$5", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Subscription subscription0 = testScheduler0.schedule(func0_0);
      assertNotNull(subscription0);
      
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      String string0 = "Jf";
      Func2<Scheduler, String, Subscription> func2_0 = null;
      Subscription subscription0 = testScheduler0.schedule(string0, func2_0);
      assertNotNull(subscription0);
      
      long long0 = (-192L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      Func2<Scheduler, ImmediateScheduler, Subscription> func2_1 = null;
      long long1 = 1L;
      Subscription subscription1 = testScheduler0.schedule(immediateScheduler0, func2_1, long1, timeUnit0);
      assertFalse(long1 == long0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = 1419L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      DiscardableAction<Integer> discardableAction0 = new DiscardableAction<Integer>(integer0, func2_0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(discardableAction0);
      
      long long1 = 0L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0, long1, timeUnit1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(subscription0);
      
      long long2 = testScheduler0.now();
      assertEquals(0L, long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.DiscardableAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      testScheduler0.triggerActions();
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      long long0 = (-998L);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler0.schedule(integer0, func2_0, long0, timeUnit0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(subscription0);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Object object0 = null;
      Func2<Scheduler, Object, Subscription> func2_0 = null;
      long long0 = (-191L);
      SleepingAction<Object> sleepingAction0 = new SleepingAction<Object>(func2_0, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      
      Subscription subscription0 = testScheduler0.schedule(object0, (Func2<Scheduler, Object, Subscription>) sleepingAction0);
      assertNotNull(subscription0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Integer integer0 = null;
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      long long0 = (-1L);
      SleepingAction<Integer> sleepingAction0 = new SleepingAction<Integer>(func2_0, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule(integer0, (Func2<Scheduler, Integer, Subscription>) sleepingAction0, long0, timeUnit0);
      assertNotNull(subscription0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func0_0).call();
      long long0 = (-407L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(func0_0, long0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      testScheduler0.triggerActions();
      long long1 = (-1240L);
      testScheduler0.triggerActions();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeBy(long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      long long2 = testScheduler0.now();
      assertEquals((-74400000L), long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      testScheduler0.triggerActions();
      long long3 = testScheduler0.now();
      assertEquals((-74400000L), long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      
      long long4 = (-1819L);
      testScheduler0.advanceTimeBy(long4, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long4);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = 840L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      long long1 = testScheduler0.now();
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      String string0 = "done starting TestMultiThreadedObservable thread";
      Func2<Scheduler, String, Subscription> func2_0 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any(rx.Scheduler.class) , anyString());
      long long0 = (-2896L);
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_0, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(string0, (Func2<Scheduler, String, Subscription>) sleepingAction0, long0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      long long1 = (-3844L);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription1 = testScheduler0.schedule(func0_0, long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      
      long long2 = 0L;
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_1 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long3 = 35L;
      SleepingAction<Integer> sleepingAction1 = new SleepingAction<Integer>(func2_1, testScheduler0, long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertNotNull(sleepingAction1);
      
      DiscardableAction<Integer> discardableAction0 = new DiscardableAction<Integer>(integer0, sleepingAction1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertNotNull(discardableAction0);
      
      long long4 = 0L;
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      Subscription subscription2 = testScheduler0.schedulePeriodically((Func1<Scheduler, Subscription>) discardableAction0, long2, long4, timeUnit2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long4);
      assertSame(timeUnit2, timeUnit1);
      assertNotSame(subscription2, subscription0);
      assertNotNull(subscription2);
      
      TimeUnit timeUnit3 = TimeUnit.MINUTES;
      // Undeclared exception!
      testScheduler0.advanceTimeTo(long2, timeUnit3);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      assertNotNull(executorScheduler0);
      
      Func2<Scheduler, ExecutorScheduler, Subscription> func2_0 = (Func2<Scheduler, ExecutorScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any(rx.Scheduler.class) , any(rx.concurrency.ExecutorScheduler.class));
      String string0 = "U1Yl>uD%#?3VRpN";
      Func2<Scheduler, String, Subscription> func2_1 = (Func2<Scheduler, String, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_1).call(any(rx.Scheduler.class) , anyString());
      long long0 = 1L;
      SleepingAction<String> sleepingAction0 = new SleepingAction<String>(func2_1, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      
      CompositeSubscription compositeSubscription0 = (CompositeSubscription)executorScheduler0.schedule(string0, (Func2<Scheduler, String, Subscription>) sleepingAction0);
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      long long1 = 0L;
      int int0 = 11;
      Integer integer0 = new Integer(int0);
      assertEquals(11, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_2 = (Func2<Scheduler, Integer, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_2).call(any(rx.Scheduler.class) , anyInt());
      long long2 = 672L;
      SleepingAction<Integer> sleepingAction1 = new SleepingAction<Integer>(func2_2, testScheduler0, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotNull(sleepingAction1);
      
      DiscardableAction<Integer> discardableAction0 = new DiscardableAction<Integer>(integer0, sleepingAction1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotNull(discardableAction0);
      
      CompositeSubscription compositeSubscription1 = (CompositeSubscription)executorScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0);
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(compositeSubscription1, compositeSubscription0);
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertNotNull(compositeSubscription1);
      
      SleepingAction<ExecutorScheduler> sleepingAction2 = new SleepingAction<ExecutorScheduler>(func2_0, executorScheduler0, long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertNotNull(sleepingAction2);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long1, long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertSame(timeUnit1, timeUnit0);
      assertNotNull(subscription0);
      
      Subscription subscription1 = testScheduler0.schedule(executorScheduler0, (Func2<Scheduler, ExecutorScheduler, Subscription>) sleepingAction2, long1, timeUnit0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertSame(timeUnit0, timeUnit1);
      assertNotNull(subscription1);
      
      long long3 = testScheduler0.now();
      assertEquals(0L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      
      TimeUnit timeUnit2 = TimeUnit.HOURS;
      // Undeclared exception!
      testScheduler0.advanceTimeBy(long3, timeUnit2);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      int int0 = (-2429);
      Integer integer0 = new Integer(int0);
      assertEquals((-2429), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Scheduler, Integer, Subscription> func2_0 = null;
      DiscardableAction<Integer> discardableAction0 = new DiscardableAction<Integer>(integer0, func2_0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(discardableAction0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule((Func1<Scheduler, Subscription>) discardableAction0, (long) int0, timeUnit0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(subscription0);
      
      long long0 = (-1988L);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeBy(long0, timeUnit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.DiscardableAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertNotNull(subscription0);
      
      long long0 = (-2077L);
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription1 = testScheduler0.schedule(func0_0, long0, timeUnit0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotSame(subscription1, subscription0);
      assertNotNull(subscription1);
      
      Subscription[] subscriptionArray0 = new Subscription[4];
      subscriptionArray0[0] = subscription0;
      subscriptionArray0[1] = subscription0;
      subscriptionArray0[2] = subscription0;
      subscriptionArray0[3] = subscription0;
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(subscriptionArray0);
      assertEquals(4, subscriptionArray0.length);
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      compositeSubscription0.unsubscribe();
      assertEquals(4, subscriptionArray0.length);
      assertTrue(compositeSubscription0.isUnsubscribed());
      
      Func2<Scheduler, CompositeSubscription, Subscription> func2_0 = (Func2<Scheduler, CompositeSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<CompositeSubscription> sleepingAction0 = new SleepingAction<CompositeSubscription>(func2_0, testScheduler0, long0);
      assertNotNull(sleepingAction0);
      
      Subscription subscription2 = testScheduler0.schedule(compositeSubscription0, (Func2<Scheduler, CompositeSubscription, Subscription>) sleepingAction0);
      assertEquals(4, subscriptionArray0.length);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription0);
      assertTrue(compositeSubscription0.isUnsubscribed());
      assertNotNull(subscription2);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      testScheduler0.advanceTimeBy(long0, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      long long1 = testScheduler0.now();
      assertEquals((-179452800000L), long1);
      assertFalse(long1 == long0);
      
      long long2 = 1L;
      testScheduler0.advanceTimeBy(long2, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      TestScheduler testScheduler1 = new TestScheduler();
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertNotNull(testScheduler1);
      
      Func2<Scheduler, TestScheduler, Subscription> func2_1 = (Func2<Scheduler, TestScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SleepingAction<TestScheduler> sleepingAction1 = new SleepingAction<TestScheduler>(func2_1, testScheduler0, long1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertNotNull(sleepingAction1);
      
      Subscription subscription3 = testScheduler0.schedule(testScheduler1, (Func2<Scheduler, TestScheduler, Subscription>) sleepingAction1);
      assertFalse(testScheduler0.equals((Object)testScheduler1));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(testScheduler1.equals((Object)testScheduler0));
      assertFalse(subscription3.equals((Object)subscription0));
      assertFalse(subscription3.equals((Object)subscription2));
      assertFalse(subscription3.equals((Object)subscription1));
      assertNotSame(testScheduler0, testScheduler1);
      assertNotSame(testScheduler1, testScheduler0);
      assertNotSame(subscription3, subscription0);
      assertNotSame(subscription3, subscription2);
      assertNotSame(subscription3, subscription1);
      assertNotNull(subscription3);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Func2<Scheduler, BooleanSubscription, Subscription> func2_0 = (Func2<Scheduler, BooleanSubscription, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(booleanSubscription0, booleanSubscription0).when(func2_0).call(any(rx.Scheduler.class) , any(rx.subscriptions.BooleanSubscription.class));
      long long0 = 1716L;
      SleepingAction<BooleanSubscription> sleepingAction0 = new SleepingAction<BooleanSubscription>(func2_0, testScheduler0, long0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(sleepingAction0);
      
      BooleanSubscription booleanSubscription1 = new BooleanSubscription();
      assertFalse(booleanSubscription1.equals((Object)booleanSubscription0));
      assertFalse(booleanSubscription1.isUnsubscribed());
      assertNotNull(booleanSubscription1);
      
      int int0 = 2265;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Func0<Subscription> func0_0 = (Func0<Subscription>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription subscription0 = testScheduler0.schedule(func0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(executorScheduler0);
      
      Func2<Scheduler, ExecutorScheduler, Subscription> func2_1 = (Func2<Scheduler, ExecutorScheduler, Subscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn(booleanSubscription0, (Object) null).when(func2_1).call(any(rx.Scheduler.class) , any(rx.concurrency.ExecutorScheduler.class));
      SleepingAction<ExecutorScheduler> sleepingAction1 = new SleepingAction<ExecutorScheduler>(func2_1, testScheduler0, int0);
      assertFalse(booleanSubscription0.equals((Object)booleanSubscription1));
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(sleepingAction1);
      
      BooleanSubscription booleanSubscription2 = (BooleanSubscription)sleepingAction1.call((Scheduler) testScheduler0, executorScheduler0);
      assertFalse(booleanSubscription2.equals((Object)booleanSubscription1));
      assertFalse(booleanSubscription0.equals((Object)booleanSubscription1));
      assertSame(booleanSubscription2, booleanSubscription0);
      assertNotSame(booleanSubscription2, booleanSubscription1);
      assertSame(booleanSubscription0, booleanSubscription2);
      assertNotSame(booleanSubscription0, booleanSubscription1);
      assertFalse(booleanSubscription2.isUnsubscribed());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription2);
      
      long long1 = 0L;
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      Subscription subscription1 = testScheduler0.schedule(executorScheduler0, (Func2<Scheduler, ExecutorScheduler, Subscription>) sleepingAction1, long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(booleanSubscription0.equals((Object)booleanSubscription1));
      assertFalse(subscription1.equals((Object)subscription0));
      assertSame(booleanSubscription0, booleanSubscription2);
      assertNotSame(booleanSubscription0, booleanSubscription1);
      assertSame(timeUnit1, timeUnit0);
      assertNotSame(subscription1, subscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription1);
      
      booleanSubscription1.unsubscribe();
      assertFalse(booleanSubscription1.equals((Object)booleanSubscription0));
      assertFalse(booleanSubscription1.equals((Object)booleanSubscription2));
      assertNotSame(booleanSubscription1, booleanSubscription0);
      assertNotSame(booleanSubscription1, booleanSubscription2);
      assertTrue(booleanSubscription1.isUnsubscribed());
      
      BooleanSubscription booleanSubscription3 = (BooleanSubscription)sleepingAction0.call((Scheduler) testScheduler0, booleanSubscription1);
      assertFalse(booleanSubscription0.equals((Object)booleanSubscription1));
      assertFalse(long0 == long1);
      assertFalse(booleanSubscription3.equals((Object)booleanSubscription1));
      assertFalse(booleanSubscription1.equals((Object)booleanSubscription0));
      assertFalse(booleanSubscription1.equals((Object)booleanSubscription2));
      assertSame(booleanSubscription0, booleanSubscription3);
      assertSame(booleanSubscription0, booleanSubscription2);
      assertNotSame(booleanSubscription0, booleanSubscription1);
      assertSame(booleanSubscription3, booleanSubscription2);
      assertNotSame(booleanSubscription3, booleanSubscription1);
      assertSame(booleanSubscription3, booleanSubscription0);
      assertNotSame(booleanSubscription1, booleanSubscription0);
      assertNotSame(booleanSubscription1, booleanSubscription2);
      assertNotSame(booleanSubscription1, booleanSubscription3);
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertFalse(booleanSubscription3.isUnsubscribed());
      assertTrue(booleanSubscription1.isUnsubscribed());
      assertNotNull(booleanSubscription3);
      
      long long2 = (-2954L);
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      Subscription subscription2 = testScheduler0.schedule(booleanSubscription0, (Func2<Scheduler, BooleanSubscription, Subscription>) sleepingAction0, long2, timeUnit2);
      assertFalse(booleanSubscription0.equals((Object)booleanSubscription1));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertFalse(subscription2.equals((Object)subscription0));
      assertSame(booleanSubscription0, booleanSubscription3);
      assertSame(booleanSubscription0, booleanSubscription2);
      assertNotSame(booleanSubscription0, booleanSubscription1);
      assertSame(timeUnit2, timeUnit0);
      assertSame(timeUnit2, timeUnit1);
      assertNotSame(subscription2, subscription1);
      assertNotSame(subscription2, subscription0);
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription2);
      
      TimeUnit timeUnit3 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeBy(long0, timeUnit3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(timeUnit3.equals((Object)timeUnit2));
      assertFalse(timeUnit3.equals((Object)timeUnit1));
      assertFalse(timeUnit3.equals((Object)timeUnit0));
      
      TimeUnit timeUnit4 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeBy(long2, timeUnit4);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(timeUnit4.equals((Object)timeUnit2));
      assertFalse(timeUnit4.equals((Object)timeUnit0));
      assertFalse(timeUnit4.equals((Object)timeUnit3));
      assertFalse(timeUnit4.equals((Object)timeUnit1));
      
      long long3 = testScheduler0.now();
      assertEquals(1716L, long3);
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
  }
}
