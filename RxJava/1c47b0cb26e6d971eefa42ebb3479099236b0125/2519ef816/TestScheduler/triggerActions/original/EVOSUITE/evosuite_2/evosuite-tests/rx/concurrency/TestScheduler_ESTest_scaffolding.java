/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Nov 08 05:55:00 GMT 2021
 */

package rx.concurrency;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class TestScheduler_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 10000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "rx.concurrency.TestScheduler"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/RxJava/1c47b0cb26e6d971eefa42ebb3479099236b0125/evosuite_2"); 
    java.lang.System.setProperty("user.home", "/home/CIN/lmps2"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "lmps2"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TestScheduler_ESTest_scaffolding.class.getClassLoader() ,
      "rx.util.AtomicObservableSubscription",
      "rx.Scheduler$3",
      "rx.Scheduler$4",
      "rx.Scheduler$1",
      "rx.Scheduler$2",
      "rx.Scheduler$8",
      "rx.Scheduler$5",
      "rx.Scheduler$6",
      "rx.Scheduler$9",
      "rx.subscriptions.Subscriptions",
      "rx.util.functions.Action0",
      "rx.concurrency.ExecutorScheduler",
      "rx.concurrency.TestScheduler$1",
      "rx.util.functions.Func1",
      "rx.util.functions.Func2",
      "rx.concurrency.SleepingAction",
      "rx.concurrency.ImmediateScheduler",
      "rx.util.functions.Func0",
      "rx.Scheduler$10",
      "rx.concurrency.ExecutorScheduler$4",
      "rx.Scheduler$11",
      "rx.concurrency.DiscardableAction",
      "rx.Scheduler",
      "rx.util.functions.Functions",
      "rx.concurrency.TestScheduler",
      "rx.subscriptions.CompositeSubscription",
      "rx.concurrency.TestScheduler$TimedAction",
      "rx.subscriptions.Subscriptions$1",
      "rx.util.functions.Function",
      "rx.concurrency.TestScheduler$CompareActionsByTime",
      "rx.subscriptions.Subscriptions$4",
      "rx.subscriptions.Subscriptions$2",
      "rx.util.AtomicObservableSubscription$1",
      "rx.concurrency.NewThreadScheduler",
      "rx.Subscription",
      "rx.Scheduler$1$1",
      "rx.subscriptions.BooleanSubscription",
      "rx.concurrency.CurrentThreadScheduler"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.concurrent.Callable", false, TestScheduler_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.concurrent.ThreadFactory", false, TestScheduler_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.util.functions.Action0", false, TestScheduler_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.util.functions.Func0", false, TestScheduler_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.util.functions.Func2", false, TestScheduler_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TestScheduler_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "rx.Scheduler",
      "rx.concurrency.TestScheduler",
      "rx.concurrency.TestScheduler$CompareActionsByTime",
      "rx.concurrency.TestScheduler$TimedAction",
      "rx.concurrency.TestScheduler$1",
      "rx.concurrency.CurrentThreadScheduler",
      "rx.concurrency.SleepingAction",
      "rx.concurrency.DiscardableAction",
      "rx.util.AtomicObservableSubscription$1",
      "rx.util.AtomicObservableSubscription",
      "rx.Scheduler$3",
      "rx.concurrency.CurrentThreadScheduler$TimedAction",
      "rx.concurrency.ExecutorScheduler",
      "rx.subscriptions.CompositeSubscription",
      "rx.Scheduler$6",
      "rx.concurrency.NewThreadScheduler",
      "rx.Scheduler$1",
      "rx.Scheduler$2",
      "rx.subscriptions.Subscriptions$4",
      "rx.subscriptions.Subscriptions",
      "rx.subscriptions.Subscriptions$1",
      "rx.Scheduler$4",
      "rx.Scheduler$9",
      "rx.Scheduler$8",
      "rx.Scheduler$1$1",
      "rx.Scheduler$5",
      "rx.Scheduler$10",
      "rx.subscriptions.BooleanSubscription",
      "rx.concurrency.ImmediateScheduler",
      "rx.concurrency.GenericScheduledExecutorService$1",
      "rx.concurrency.GenericScheduledExecutorService",
      "rx.concurrency.ExecutorScheduler$3",
      "rx.subscriptions.Subscriptions$2",
      "rx.Scheduler$11",
      "rx.Scheduler$7",
      "rx.concurrency.ExecutorScheduler$4",
      "rx.concurrency.NewThreadScheduler$2",
      "rx.concurrency.NewThreadScheduler$1",
      "rx.concurrency.ExecutorScheduler$1",
      "rx.concurrency.ExecutorScheduler$2"
    );
  }
}
