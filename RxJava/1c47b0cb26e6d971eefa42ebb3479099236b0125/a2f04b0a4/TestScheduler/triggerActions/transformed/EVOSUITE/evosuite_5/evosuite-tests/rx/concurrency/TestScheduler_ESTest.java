/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 12:11:51 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ExecutorScheduler;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.TestScheduler;
import rx.operators.SafeObservableSubscription;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      TestScheduler testScheduler2 = new TestScheduler();
      assertFalse(testScheduler2.equals((Object)testScheduler1));
      assertFalse(testScheduler2.equals((Object)testScheduler0));
      assertEquals(0L, testScheduler2.gettime());
      assertEquals(0L, testScheduler2.time);
      assertNotNull(testScheduler2);
      
      long long1 = 0L;
      Func2<Object, Object, SafeObservableSubscription> func2_1 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      long long2 = (-1343L);
      testScheduler2.settime(long2);
      assertFalse(testScheduler2.equals((Object)testScheduler1));
      assertFalse(testScheduler2.equals((Object)testScheduler0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1343L), testScheduler2.gettime());
      assertEquals((-1343L), testScheduler2.time);
      assertNotSame(testScheduler2, testScheduler1);
      assertNotSame(testScheduler2, testScheduler0);
      
      TestScheduler.TimedAction<String> testScheduler_TimedAction1 = new TestScheduler.TimedAction<String>(testScheduler2, long1, func2_1, string0);
      assertFalse(testScheduler2.equals((Object)testScheduler1));
      assertFalse(testScheduler2.equals((Object)testScheduler0));
      assertFalse(long1 == long2);
      assertEquals((-1343L), testScheduler2.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals((-1343L), testScheduler2.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      Func2<Object, Object, SafeObservableSubscription> func2_2 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long3 = (-5804L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler1.schedule(testScheduler_TimedAction1, (Func2<? super Scheduler, ? super TestScheduler.TimedAction<String>, ? extends Subscription>) func2_2, long3, timeUnit0);
      assertFalse(testScheduler0.equals((Object)testScheduler2));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(testScheduler1.equals((Object)testScheduler2));
      assertFalse(testScheduler2.equals((Object)testScheduler1));
      assertFalse(testScheduler2.equals((Object)testScheduler0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals((-1343L), testScheduler2.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertEquals((-1343L), testScheduler2.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(subscription0);
      assertNotSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(testScheduler1, testScheduler2);
      assertSame(testScheduler1, testScheduler0);
      assertNotSame(testScheduler2, testScheduler1);
      assertNotSame(testScheduler2, testScheduler0);
      
      Func2<Object, Object, CompositeSubscription> func2_3 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction2 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler_TimedAction0.scheduler, testScheduler1.time, func2_3, booleanSubscription0);
      assertFalse(testScheduler0.equals((Object)testScheduler2));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(testScheduler1.equals((Object)testScheduler2));
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler_TimedAction2);
      
      BooleanSubscription booleanSubscription1 = testScheduler_TimedAction2.getstate();
      assertFalse(testScheduler0.equals((Object)testScheduler2));
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(testScheduler1.equals((Object)testScheduler2));
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction2.gettime());
      assertFalse(booleanSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction2.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(booleanSubscription1);
      assertNotSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertSame(booleanSubscription0, booleanSubscription1);
      assertSame(booleanSubscription1, booleanSubscription0);
      assertNotSame(testScheduler1, testScheduler2);
      assertSame(testScheduler1, testScheduler0);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler2.getqueue();
      assertFalse(testScheduler2.equals((Object)testScheduler1));
      assertFalse(testScheduler2.equals((Object)testScheduler0));
      assertEquals((-1343L), testScheduler2.gettime());
      assertEquals((-1343L), testScheduler2.time);
      assertNotNull(queue0);
      assertNotSame(testScheduler2, testScheduler1);
      assertNotSame(testScheduler2, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = null;
      int int0 = 2090;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2090, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = 568L;
      testScheduler1.triggerActions(long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      assertEquals(568L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(568L, testScheduler1.gettime());
      assertEquals(568L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(568L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = "w5vse#";
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = new TestScheduler.TimedAction<String>(testScheduler0, testScheduler0.time, func2_0, string0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      long long0 = testScheduler_TimedAction0.gettime();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, CompositeSubscription> func2_0 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(func2_0).toString();
      int int0 = (-751);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<TestScheduler.TimedAction<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super TestScheduler.TimedAction<String>>) toIntFunction0);
      assertNotNull(comparator0);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-751), (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      String string0 = testScheduler_TimedAction0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(string0);
      
      int int1 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0, int1);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      testScheduler_TimedAction0.scheduler.advanceTimeBy(int1, timeUnit0);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      Func2<Object, BooleanSubscription, SafeObservableSubscription> func2_1 = (Func2<Object, BooleanSubscription, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<BooleanSubscription> testScheduler_TimedAction1 = new TestScheduler.TimedAction<BooleanSubscription>(testScheduler_TimedAction0.scheduler, testScheduler0.time, func2_1, booleanSubscription0);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      int int2 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction1, testScheduler_TimedAction1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0, int2);
      
      testScheduler0.triggerActions();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      Func2<Object, Object, SafeObservableSubscription> func2_2 = null;
      long long0 = 3527L;
      Subscription subscription0 = testScheduler_TimedAction1.scheduler.schedule(integer0, (Func2<? super Scheduler, ? super Integer, ? extends Subscription>) func2_2, long0, timeUnit0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(subscription0);
      
      Func2<? super Scheduler, ? super Integer, ? extends Subscription> func2_3 = testScheduler_TimedAction0.getaction();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(func2_3);
      
      long long1 = (-1970L);
      testScheduler_TimedAction0.scheduler.triggerActions(long1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1970L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-1970L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      
      long long2 = (-2571L);
      testScheduler_TimedAction1.scheduler.settime(long2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-2571L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals((-2571L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      testScheduler_TimedAction1.scheduler.settime(testScheduler_TimedAction1.time);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      
      TestScheduler testScheduler1 = null;
      long long3 = (-1L);
      TestScheduler.TimedAction<Object> testScheduler_TimedAction2 = new TestScheduler.TimedAction<Object>(testScheduler1, long3, func2_2, func2_3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction2);
      
      long long4 = testScheduler_TimedAction2.gettime();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long4 == long2);
      assertTrue(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler_TimedAction2.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler_TimedAction2.time);
      assertEquals((-1L), long4);
      
      ImmediateScheduler immediateScheduler0 = null;
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction3 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler_TimedAction1.scheduler, testScheduler_TimedAction0.time, func2_2, immediateScheduler0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertNotNull(testScheduler_TimedAction3);
      
      long long5 = testScheduler_TimedAction3.gettime();
      assertFalse(long5 == long3);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler_TimedAction3.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, testScheduler_TimedAction3.time);
      assertEquals(0L, long5);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeTo(long1, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<String> testScheduler_TimedAction0 = (TestScheduler.TimedAction<String>) mock(TestScheduler.TimedAction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Object, CompositeSubscription, CompositeSubscription> func2_0 = (Func2<Object, CompositeSubscription, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      CompositeSubscription compositeSubscription0 = null;
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      long long1 = 103L;
      testScheduler0.triggerActions(long1);
      assertFalse(long1 == long0);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(103L, testScheduler0.time);
      assertSame(testScheduler0, testScheduler1);
      
      Func2<Object, Object, SafeObservableSubscription> func2_1 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler1.schedule(integer0, (Func2<? super Scheduler, ? super Integer, ? extends Subscription>) func2_1);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(103L, testScheduler1.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long2 = testScheduler0.gettime();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(103L, testScheduler0.time);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(103L, long2);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      Func2<Object, Object, CompositeSubscription> func2_2 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription1 = testScheduler1.schedule(delayed0, (Func2<? super Scheduler, ? super Delayed, ? extends Subscription>) func2_2, long1, timeUnit0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(103L, testScheduler1.time);
      assertNotNull(subscription1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(subscription1, subscription0);
      assertSame(testScheduler1, testScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_3 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertNotNull(safeObservableSubscription0);
      
      SafeObservableSubscription safeObservableSubscription1 = safeObservableSubscription0.wrap(subscription0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(103L, testScheduler1.time);
      assertNotNull(safeObservableSubscription1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertSame(testScheduler1, testScheduler0);
      assertSame(subscription0, subscription1);
      
      TestScheduler.TimedAction<SafeObservableSubscription> testScheduler_TimedAction1 = new TestScheduler.TimedAction<SafeObservableSubscription>(testScheduler1, long0, func2_3, safeObservableSubscription1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(103L, testScheduler1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      long long3 = testScheduler_TimedAction1.scheduler.now();
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(103L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertSame(testScheduler1, testScheduler0);
      assertSame(subscription0, subscription1);
      assertEquals(0L, long3);
      
      TestScheduler testScheduler2 = testScheduler_TimedAction1.getscheduler();
      assertTrue(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(103L, testScheduler1.gettime());
      assertEquals(103L, testScheduler2.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(103L, testScheduler1.time);
      assertEquals(103L, testScheduler2.time);
      assertNotNull(testScheduler2);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertSame(testScheduler1, testScheduler2);
      assertSame(testScheduler1, testScheduler0);
      assertSame(testScheduler2, testScheduler1);
      assertSame(testScheduler2, testScheduler0);
      assertSame(subscription0, subscription1);
      
      long long4 = 178L;
      Func2<Object, Integer, CompositeSubscription> func2_4 = null;
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction2 = new TestScheduler.TimedAction<Integer>(testScheduler0, long4, func2_4, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(178L, testScheduler_TimedAction2.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(178L, testScheduler_TimedAction2.time);
      assertNotNull(testScheduler_TimedAction2);
      
      Integer integer1 = testScheduler_TimedAction2.getstate();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(178L, testScheduler_TimedAction2.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals(178L, testScheduler_TimedAction2.time);
      assertNotNull(integer1);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(1, (int)integer1);
      
      long long5 = testScheduler0.now();
      assertFalse(long5 == long4);
      assertTrue(long5 == long3);
      assertFalse(long5 == long2);
      assertFalse(long5 == long1);
      assertTrue(long5 == long0);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals(103L, testScheduler0.time);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0L, long5);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      long long6 = (-2607L);
      Func2<Object, Object, BooleanSubscription> func2_5 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = "S";
      TestScheduler.TimedAction<String> testScheduler_TimedAction3 = new TestScheduler.TimedAction<String>(testScheduler0, long6, func2_5, string0);
      assertFalse(long6 == long3);
      assertFalse(long6 == long2);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long1);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals((-2607L), testScheduler_TimedAction3.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals((-2607L), testScheduler_TimedAction3.time);
      assertNotNull(testScheduler_TimedAction3);
      
      int int1 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction3, testScheduler_TimedAction2);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(long4 == long5);
      assertFalse(long4 == long6);
      assertFalse(long6 == long3);
      assertFalse(long6 == long2);
      assertFalse(long6 == long5);
      assertFalse(long6 == long0);
      assertFalse(long6 == long4);
      assertFalse(long6 == long1);
      assertEquals(103L, testScheduler0.gettime());
      assertEquals((-2607L), testScheduler_TimedAction3.gettime());
      assertEquals(178L, testScheduler_TimedAction2.gettime());
      assertEquals(103L, testScheduler0.time);
      assertEquals((-2607L), testScheduler_TimedAction3.time);
      assertEquals(178L, testScheduler_TimedAction2.time);
      assertSame(testScheduler0, testScheduler2);
      assertSame(testScheduler0, testScheduler1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      Action0 action0_0 = null;
      long long0 = 0L;
      long long1 = (-3315L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      CompositeSubscription compositeSubscription0 = null;
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, testScheduler0.time, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertNotNull(safeObservableSubscription0);
      
      Subscription subscription1 = testScheduler1.schedule(safeObservableSubscription0, (Func2<? super Scheduler, ? super SafeObservableSubscription, ? extends Subscription>) func2_0);
      assertFalse(subscription1.equals((Object)subscription0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(subscription1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = testScheduler0.now();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, long0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1058L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertEquals(3808800000000000L, testScheduler0.gettime());
      assertEquals(3808800000000000L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 4546L;
      testScheduler0.triggerActions(long0);
      assertEquals(4546L, testScheduler0.gettime());
      assertEquals(4546L, testScheduler0.time);
      
      Func2<Object, CompositeSubscription, SafeObservableSubscription> func2_0 = null;
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, testScheduler0.time, func2_0, compositeSubscription0);
      assertEquals(4546L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(4546L, testScheduler_TimedAction0.gettime());
      assertEquals(4546L, testScheduler0.time);
      assertEquals(4546L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(4546L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(4546L, testScheduler_TimedAction0.gettime());
      assertEquals(4546L, testScheduler1.gettime());
      assertEquals(4546L, testScheduler0.time);
      assertEquals(4546L, testScheduler_TimedAction0.time);
      assertEquals(4546L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = testScheduler1.gettime();
      assertTrue(long1 == long0);
      assertEquals(4546L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(4546L, testScheduler_TimedAction0.gettime());
      assertEquals(4546L, testScheduler1.gettime());
      assertEquals(4546L, testScheduler0.time);
      assertEquals(4546L, testScheduler_TimedAction0.time);
      assertEquals(4546L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(4546L, long1);
      
      testScheduler0.settime(long1);
      assertTrue(long1 == long0);
      assertEquals(4546L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(4546L, testScheduler_TimedAction0.gettime());
      assertEquals(4546L, testScheduler1.gettime());
      assertEquals(4546L, testScheduler0.time);
      assertEquals(4546L, testScheduler_TimedAction0.time);
      assertEquals(4546L, testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      ExecutorScheduler executorScheduler0 = null;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      long long0 = (-1942L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(executorScheduler0, (Func2<? super Scheduler, ? super ExecutorScheduler, ? extends Subscription>) func2_0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      long long1 = 0L;
      Func2<Object, Object, BooleanSubscription> func2_1 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TestScheduler.TimedAction<Object> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Object>(testScheduler0, long1, func2_1, func2_1);
      assertFalse(long1 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      // Undeclared exception!
      testScheduler_TimedAction0.scheduler.triggerActions(long0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1933L;
      Func2<Object, Integer, SafeObservableSubscription> func2_0 = (Func2<Object, Integer, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(1933L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(1933L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = (-1635L);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler1.advanceTimeBy(long1, timeUnit0);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      assertEquals((-1635000000000L), testScheduler0.gettime());
      assertEquals(1933L, testScheduler_TimedAction0.gettime());
      assertEquals((-1635000000000L), testScheduler1.gettime());
      assertEquals((-1635000000000L), testScheduler0.time);
      assertEquals(1933L, testScheduler_TimedAction0.time);
      assertEquals((-1635000000000L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      Func2<Object, Object, CompositeSubscription> func2_1 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler1, long0, func2_1, booleanSubscription0);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1635000000000L), testScheduler0.gettime());
      assertEquals(1933L, testScheduler_TimedAction0.gettime());
      assertEquals((-1635000000000L), testScheduler1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(1933L, testScheduler_TimedAction1.gettime());
      assertEquals((-1635000000000L), testScheduler0.time);
      assertEquals(1933L, testScheduler_TimedAction0.time);
      assertEquals((-1635000000000L), testScheduler1.time);
      assertEquals(1933L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      long long2 = testScheduler_TimedAction1.gettime();
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1635000000000L), testScheduler0.gettime());
      assertEquals(1933L, testScheduler_TimedAction0.gettime());
      assertEquals((-1635000000000L), testScheduler1.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(1933L, testScheduler_TimedAction1.gettime());
      assertEquals((-1635000000000L), testScheduler0.time);
      assertEquals(1933L, testScheduler_TimedAction0.time);
      assertEquals((-1635000000000L), testScheduler1.time);
      assertEquals(1933L, testScheduler_TimedAction1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(1933L, long2);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime1 = new TestScheduler.CompareActionsByTime();
      assertFalse(testScheduler_CompareActionsByTime1.equals((Object)testScheduler_CompareActionsByTime0));
      assertNotNull(testScheduler_CompareActionsByTime1);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Object, CompositeSubscription, SafeObservableSubscription> func2_0 = (Func2<Object, CompositeSubscription, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      CompositeSubscription compositeSubscription0 = null;
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Func2<Object, Object, BooleanSubscription> func2_1 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler1.schedule(comparable0, (Func2<? super Scheduler, ? super Comparable<Object>, ? extends Subscription>) func2_1, testScheduler_TimedAction0.time, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any() , any());
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<? super Scheduler, ? super BooleanSubscription, ? extends Subscription>) func2_0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(queue0);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Object, CompositeSubscription, SafeObservableSubscription> func2_0 = (Func2<Object, CompositeSubscription, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any() , any(rx.subscriptions.CompositeSubscription.class));
      Subscription subscription0 = testScheduler0.schedule(compositeSubscription0, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(linkedList0.contains(subscription0));
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      long long0 = 907L;
      testScheduler0.triggerActions(long0);
      assertEquals(907L, testScheduler0.gettime());
      assertEquals(907L, testScheduler0.time);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TestScheduler testScheduler0 = null;
      long long0 = (-264L);
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, long0, func2_0, currentThreadScheduler0);
      assertEquals((-264L), testScheduler_TimedAction0.gettime());
      assertEquals((-264L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      CurrentThreadScheduler currentThreadScheduler1 = testScheduler_TimedAction0.getstate();
      assertEquals((-264L), testScheduler_TimedAction0.gettime());
      assertEquals((-264L), testScheduler_TimedAction0.time);
      assertNotNull(currentThreadScheduler1);
      assertSame(currentThreadScheduler0, currentThreadScheduler1);
      assertSame(currentThreadScheduler1, currentThreadScheduler0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime1 = new TestScheduler.CompareActionsByTime();
      assertFalse(testScheduler_CompareActionsByTime1.equals((Object)testScheduler_CompareActionsByTime0));
      assertNotNull(testScheduler_CompareActionsByTime1);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription[] subscriptionArray0 = new Subscription[0];
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(subscriptionArray0);
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertEquals(0, subscriptionArray0.length);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, testScheduler0.time, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(0, subscriptionArray0.length);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(0, subscriptionArray0.length);
      
      Action0 action0_0 = null;
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subscription subscription0 = testScheduler_TimedAction0.scheduler.schedulePeriodically(action0_0, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0, subscriptionArray0.length);
      
      long long1 = 1322L;
      // Undeclared exception!
      try { 
        testScheduler1.triggerActions(long1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$5", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler(forkJoinPool0);
      assertNotNull(executorScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      long long0 = (-831L);
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(executorScheduler0, (Func2<? super Scheduler, ? super ExecutorScheduler, ? extends Subscription>) func2_0, long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Queue<TestScheduler.TimedAction<?>> queue0 = testScheduler0.getqueue();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(queue0);
      
      // Undeclared exception!
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      int int0 = 435;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(435, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, testScheduler0.time, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long0 = (-1L);
      testScheduler1.settime(long0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler1.gettime());
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = testScheduler1.gettime();
      assertTrue(integer0.equals((Object)int0));
      assertTrue(long1 == long0);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals((-1L), testScheduler1.gettime());
      assertEquals((-1L), testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals((-1L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals((-1L), long1);
      
      long long2 = testScheduler0.now();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1L), testScheduler0.gettime());
      assertEquals((-1L), testScheduler0.time);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0L, long2);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      Func2<Object, CompositeSubscription, CompositeSubscription> func2_0 = (Func2<Object, CompositeSubscription, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription[] subscriptionArray0 = new Subscription[1];
      Func2<Object, Object, CompositeSubscription> func2_1 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_1).call(any() , any());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically((Object) func2_0, (Func2<? super Scheduler, ? super Object, ? extends Subscription>) func2_1, long0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      subscriptionArray0[0] = subscription0;
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(subscriptionArray0);
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      assertEquals(1, subscriptionArray0.length);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = new TestScheduler.TimedAction<CompositeSubscription>(testScheduler0, long0, func2_0, compositeSubscription0);
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      assertEquals(1, subscriptionArray0.length);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.getscheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction0.time);
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      assertEquals(1, subscriptionArray0.length);
      
      // Undeclared exception!
      testScheduler1.triggerActions();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 2111L;
      Func2<Object, ImmediateScheduler, SafeObservableSubscription> func2_0 = (Func2<Object, ImmediateScheduler, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      ImmediateScheduler immediateScheduler0 = ImmediateScheduler.getInstance();
      assertNotNull(immediateScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      TestScheduler.TimedAction<ImmediateScheduler> testScheduler_TimedAction0 = new TestScheduler.TimedAction<ImmediateScheduler>(testScheduler0, long0, func2_0, immediateScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(2111L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(2111L, testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      String string0 = testScheduler_TimedAction0.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(2111L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(2111L, testScheduler_TimedAction0.time);
      assertNotNull(string0);
      
      long long1 = testScheduler_TimedAction0.scheduler.gettime();
      assertFalse(long1 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(2111L, testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(2111L, testScheduler_TimedAction0.time);
      assertEquals(0L, long1);
      
      long long2 = 0L;
      Func2<Object, CurrentThreadScheduler, BooleanSubscription> func2_1 = (Func2<Object, CurrentThreadScheduler, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      TestScheduler.TimedAction<CurrentThreadScheduler> testScheduler_TimedAction1 = new TestScheduler.TimedAction<CurrentThreadScheduler>(testScheduler0, long2, func2_1, currentThreadScheduler0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      long long3 = testScheduler_TimedAction1.gettime();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertEquals(0L, long3);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      TestScheduler.TimedAction<CompositeSubscription> testScheduler_TimedAction0 = null;
      Func2<Object, Object, BooleanSubscription> func2_0 = null;
      Subscription subscription0 = testScheduler0.schedule(testScheduler_TimedAction0, (Func2<? super Scheduler, ? super TestScheduler.TimedAction<CompositeSubscription>, ? extends Subscription>) func2_0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      Func2<Object, Object, CompositeSubscription> func2_1 = (Func2<Object, Object, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription1 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription1);
      assertSame(subscription1, subscription0);
      
      TestScheduler.TimedAction<Object> testScheduler_TimedAction1 = new TestScheduler.TimedAction<Object>(testScheduler0, testScheduler0.time, func2_1, testScheduler0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      String string0 = testScheduler_TimedAction1.toString();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler_TimedAction1.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals(0L, testScheduler_TimedAction1.time);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        testScheduler_TimedAction1.scheduler.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 1L;
      int int0 = 0;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, (long) int0, timeUnit0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = null;
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      String string0 = "";
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, string0, testScheduler0.time);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0L, testScheduler0.time);
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(mockThread1, string0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertEquals(0L, testScheduler0.time);
      assertNotNull(mockThread2);
      
      MockThread mockThread3 = new MockThread(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertEquals(0L, testScheduler0.time);
      assertNotNull(mockThread3);
      
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertNotNull(safeObservableSubscription0);
      
      Future<SafeObservableSubscription> future0 = scheduledThreadPoolExecutor0.submit((Runnable) mockThread3, safeObservableSubscription0);
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(future0);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread3, mockThread1);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread3, mockThread2);
      
      RejectedExecutionHandler rejectedExecutionHandler0 = scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      assertNotNull(rejectedExecutionHandler0);
      assertSame(rejectedExecutionHandler0, threadPoolExecutor_CallerRunsPolicy0);
      assertSame(threadPoolExecutor_CallerRunsPolicy0, rejectedExecutionHandler0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(executorScheduler0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      boolean boolean0 = scheduledThreadPoolExecutor0.getRemoveOnCancelPolicy();
      assertSame(threadPoolExecutor_CallerRunsPolicy0, rejectedExecutionHandler0);
      assertFalse(boolean0);
      
      long long1 = 0L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      Subscription subscription1 = testScheduler0.schedulePeriodically(executorScheduler0, (Func2<? super Scheduler, ? super ExecutorScheduler, ? extends Subscription>) func2_0, (long) int0, long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription1);
      assertSame(threadPoolExecutor_CallerRunsPolicy0, rejectedExecutionHandler0);
      
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      // Undeclared exception!
      testScheduler0.advanceTimeTo(long0, timeUnit2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Callable<TestScheduler.TimedAction<Integer>> callable0 = (Callable<TestScheduler.TimedAction<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long1 = 0L;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long2 = (-2995L);
      long long3 = (-1735L);
      Subscription subscription0 = testScheduler0.schedulePeriodically(action0_0, long2, long3, timeUnit0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      testScheduler0.settime(long0);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      
      Subscription subscription1 = testScheduler0.schedulePeriodically(callable0, (Func2<? super Scheduler, ? super Callable<TestScheduler.TimedAction<Integer>>, ? extends Subscription>) func2_0, long1, long0, timeUnit0);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(subscription1.equals((Object)subscription0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription1);
      assertNotSame(subscription1, subscription0);
      
      // Undeclared exception!
      testScheduler0.advanceTimeBy(long0, timeUnit0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      long long0 = 4352L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler0.schedule(compositeSubscription0, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_0, (Date) mockDate0);
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertFalse(linkedList0.contains(subscription0));
      assertEquals(0L, testScheduler0.time);
      assertNotNull(subscription0);
      
      long long1 = 565L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeTo(long1, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertEquals(0L, testScheduler0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertNotNull(testScheduler0);
      
      long long0 = (-1316L);
      Func2<Object, Integer, SafeObservableSubscription> func2_0 = null;
      int int0 = 518;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(518, (int)integer0);
      
      TestScheduler.TimedAction<Integer> testScheduler_TimedAction0 = new TestScheduler.TimedAction<Integer>(testScheduler0, long0, func2_0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals(0L, testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertNotNull(testScheduler_TimedAction0);
      
      TestScheduler testScheduler1 = testScheduler_TimedAction0.scheduler;
      assertEquals(0L, testScheduler1.gettime());
      assertEquals(0L, testScheduler1.time);
      assertNotNull(testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      testScheduler1.settime(testScheduler_TimedAction0.time);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-1316L), testScheduler1.gettime());
      assertEquals((-1316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals((-1316L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler1.schedule(action0_0, testScheduler0.time, timeUnit0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-1316L), testScheduler1.gettime());
      assertEquals((-1316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals((-1316L), testScheduler1.time);
      assertNotNull(subscription0);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      long long1 = (-2969L);
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      testScheduler1.advanceTimeBy(long1, timeUnit1);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-10688400000001316L), testScheduler1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals((-10688400000001316L), testScheduler1.time);
      assertSame(testScheduler0, testScheduler1);
      assertSame(testScheduler1, testScheduler0);
      
      TestScheduler.CompareActionsByTime testScheduler_CompareActionsByTime0 = new TestScheduler.CompareActionsByTime();
      assertNotNull(testScheduler_CompareActionsByTime0);
      
      int int1 = testScheduler_CompareActionsByTime0.compare(testScheduler_TimedAction0, testScheduler_TimedAction0);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertSame(testScheduler0, testScheduler1);
      assertEquals(0, int1);
      
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription();
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertNotNull(safeObservableSubscription0);
      
      SafeObservableSubscription safeObservableSubscription1 = safeObservableSubscription0.wrap(subscription0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-10688400000001316L), testScheduler1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals((-10688400000001316L), testScheduler1.time);
      assertNotNull(safeObservableSubscription1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertSame(testScheduler1, testScheduler0);
      
      Func2<Object, SafeObservableSubscription, CompositeSubscription> func2_1 = (Func2<Object, SafeObservableSubscription, CompositeSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Subscription subscription1 = testScheduler_TimedAction0.scheduler.schedule(safeObservableSubscription1, (Func2<? super Scheduler, ? super SafeObservableSubscription, ? extends Subscription>) func2_1, (long) int1, timeUnit2);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit0.equals((Object)timeUnit2));
      assertFalse(int1 == int0);
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertFalse(safeObservableSubscription1.isUnsubscribed());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals((-10688400000001316L), testScheduler1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals((-10688400000001316L), testScheduler1.time);
      assertNotNull(subscription1);
      assertSame(safeObservableSubscription0, safeObservableSubscription1);
      assertSame(testScheduler0, testScheduler1);
      assertSame(safeObservableSubscription1, safeObservableSubscription0);
      assertSame(subscription1, subscription0);
      assertSame(testScheduler1, testScheduler0);
      assertSame(subscription0, subscription1);
      
      long long2 = 3022L;
      Func2<Object, Object, BooleanSubscription> func2_2 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      String string0 = "f38";
      DiscardableAction<String> discardableAction0 = new DiscardableAction<String>(string0, func2_2);
      assertNotNull(discardableAction0);
      
      TestScheduler.TimedAction<DiscardableAction<String>> testScheduler_TimedAction1 = new TestScheduler.TimedAction<DiscardableAction<String>>(testScheduler_TimedAction0.scheduler, long2, func2_2, discardableAction0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals(3022L, testScheduler_TimedAction1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals(3022L, testScheduler_TimedAction1.time);
      assertNotNull(testScheduler_TimedAction1);
      
      String string1 = testScheduler_TimedAction1.toString();
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals(3022L, testScheduler_TimedAction1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals(3022L, testScheduler_TimedAction1.time);
      assertNotNull(string1);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long3 = testScheduler0.now();
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertSame(testScheduler0, testScheduler1);
      assertEquals((-10688400000L), long3);
      
      Func2<Object, Object, BooleanSubscription> func2_3 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription2 = testScheduler_TimedAction1.scheduler.schedule(string1, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-10688400000001316L), testScheduler0.gettime());
      assertEquals((-1316L), testScheduler_TimedAction0.gettime());
      assertEquals(3022L, testScheduler_TimedAction1.gettime());
      assertEquals((-10688400000001316L), testScheduler0.time);
      assertEquals((-1316L), testScheduler_TimedAction0.time);
      assertEquals(3022L, testScheduler_TimedAction1.time);
      assertNotNull(subscription2);
      assertSame(testScheduler0, testScheduler1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(subscription2, subscription0);
      assertSame(subscription2, subscription1);
  }
}
