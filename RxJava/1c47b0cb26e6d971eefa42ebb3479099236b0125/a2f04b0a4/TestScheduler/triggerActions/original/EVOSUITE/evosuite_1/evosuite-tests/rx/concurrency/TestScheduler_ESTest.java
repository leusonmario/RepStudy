/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 05:48:19 GMT 2021
 */

package rx.concurrency;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.LinkedList;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import rx.Scheduler;
import rx.Subscription;
import rx.concurrency.CurrentThreadScheduler;
import rx.concurrency.DiscardableAction;
import rx.concurrency.ExecutorScheduler;
import rx.concurrency.ImmediateScheduler;
import rx.concurrency.NewThreadScheduler;
import rx.concurrency.TestScheduler;
import rx.operators.SafeObservableSubscription;
import rx.subscriptions.BooleanSubscription;
import rx.subscriptions.CompositeSubscription;
import rx.util.functions.Action0;
import rx.util.functions.Func2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestScheduler_ESTest extends TestScheduler_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = (-210L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      String string0 = "Oy7i3%&";
      Func2<Object, Object, BooleanSubscription> func2_0 = null;
      long long1 = 1L;
      long long2 = (-190L);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Subscription subscription1 = testScheduler0.schedulePeriodically(string0, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_0, long1, long2, timeUnit1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      
      testScheduler0.triggerActions();
      Subscription subscription2 = testScheduler0.schedule(string0, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_0);
      assertFalse(subscription2.equals((Object)subscription1));
      assertSame(subscription2, subscription0);
      assertNotNull(subscription2);
      
      int int0 = (-341);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      BooleanSubscription booleanSubscription0 = new BooleanSubscription();
      assertFalse(booleanSubscription0.isUnsubscribed());
      assertNotNull(booleanSubscription0);
      
      booleanSubscription0.unsubscribe();
      assertTrue(booleanSubscription0.isUnsubscribed());
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any() , any());
      long long0 = (-1L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Subscription subscription0 = testScheduler0.schedule(booleanSubscription0, (Func2<? super Scheduler, ? super BooleanSubscription, ? extends Subscription>) func2_0, long0, timeUnit0);
      assertTrue(booleanSubscription0.isUnsubscribed());
      assertNotNull(subscription0);
      
      long long1 = testScheduler0.now();
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Subscription subscription0 = testScheduler0.schedule(action0_0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      long long1 = testScheduler0.now();
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      testScheduler0.triggerActions();
      long long2 = 0L;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      testScheduler0.advanceTimeBy(long2, timeUnit1);
      assertTrue(long2 == long1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      SafeObservableSubscription safeObservableSubscription0 = null;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Action0 action0_1 = null;
      Subscription subscription1 = testScheduler0.schedule(action0_1);
      assertSame(subscription1, subscription0);
      assertNotNull(subscription1);
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_1 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long3 = 434L;
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      Subscription subscription2 = testScheduler0.schedulePeriodically((Object) integer0, (Func2<? super Scheduler, ? super Object, ? extends Subscription>) func2_1, long3, long3, timeUnit2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(subscription2.equals((Object)subscription0));
      assertFalse(subscription2.equals((Object)subscription1));
      assertTrue(integer0.equals((Object)int0));
      assertSame(timeUnit2, timeUnit1);
      assertNotNull(subscription2);
      
      long long4 = 2789L;
      TimeUnit timeUnit3 = TimeUnit.DAYS;
      Subscription subscription3 = testScheduler0.schedule(action0_1, long4, timeUnit3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(timeUnit3.equals((Object)timeUnit1));
      assertFalse(timeUnit3.equals((Object)timeUnit2));
      assertFalse(timeUnit3.equals((Object)timeUnit0));
      assertFalse(subscription3.equals((Object)subscription2));
      assertSame(subscription3, subscription1);
      assertSame(subscription3, subscription0);
      assertNotNull(subscription3);
      
      Subscription subscription4 = testScheduler0.schedule(safeObservableSubscription0, (Func2<? super Scheduler, ? super SafeObservableSubscription, ? extends Subscription>) func2_0, long2, timeUnit1);
      assertFalse(subscription4.equals((Object)subscription2));
      assertFalse(long2 == long3);
      assertTrue(long2 == long1);
      assertFalse(long2 == long4);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(timeUnit1.equals((Object)timeUnit3));
      assertSame(subscription4, subscription1);
      assertSame(subscription4, subscription0);
      assertSame(subscription4, subscription3);
      assertSame(timeUnit1, timeUnit2);
      assertNotNull(subscription4);
      
      long long5 = testScheduler0.now();
      assertEquals(0L, long5);
      assertTrue(long5 == long1);
      assertTrue(long5 == long0);
      assertFalse(long5 == long3);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      
      long long6 = testScheduler0.now();
      assertEquals(0L, long6);
      assertFalse(long6 == long4);
      assertFalse(long6 == long3);
      assertTrue(long6 == long2);
      assertTrue(long6 == long5);
      assertTrue(long6 == long1);
      assertTrue(long6 == long0);
      
      long long7 = testScheduler0.now();
      assertEquals(0L, long7);
      assertTrue(long7 == long5);
      assertTrue(long7 == long2);
      assertTrue(long7 == long6);
      assertTrue(long7 == long1);
      assertFalse(long7 == long3);
      assertFalse(long7 == long4);
      assertTrue(long7 == long0);
      
      long long8 = 1437L;
      TimeUnit timeUnit4 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeTo(long8, timeUnit4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.Scheduler$3", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Object, Object, SafeObservableSubscription> func2_0 = null;
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Subscription subscription0 = testScheduler0.schedule(compositeSubscription0, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_0, long0, timeUnit0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(linkedList0.contains(subscription0));
      assertNotNull(subscription0);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = testScheduler0.now();
      assertEquals(0L, long0);
      
      NewThreadScheduler newThreadScheduler0 = NewThreadScheduler.getInstance();
      assertNotNull(newThreadScheduler0);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Subscription[] subscriptionArray0 = new Subscription[2];
      int int0 = 1;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(executorScheduler0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Func2<Object, Object, BooleanSubscription> func2_0 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      CompositeSubscription compositeSubscription0 = (CompositeSubscription)executorScheduler0.schedule(integer0, (Func2<? super Scheduler, ? super Integer, ? extends Subscription>) func2_0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      subscriptionArray0[0] = (Subscription) compositeSubscription0;
      SafeObservableSubscription safeObservableSubscription0 = new SafeObservableSubscription(compositeSubscription0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(safeObservableSubscription0.isUnsubscribed());
      assertNotNull(safeObservableSubscription0);
      
      subscriptionArray0[1] = (Subscription) safeObservableSubscription0;
      CompositeSubscription compositeSubscription1 = new CompositeSubscription(subscriptionArray0);
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertEquals(2, subscriptionArray0.length);
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertNotNull(compositeSubscription1);
      
      compositeSubscription1.add(compositeSubscription0);
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(compositeSubscription0.equals((Object)compositeSubscription1));
      assertEquals(2, subscriptionArray0.length);
      assertNotSame(compositeSubscription1, compositeSubscription0);
      assertNotSame(compositeSubscription0, compositeSubscription1);
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertFalse(compositeSubscription0.isUnsubscribed());
      
      Func2<Object, Object, SafeObservableSubscription> func2_1 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(compositeSubscription1, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_1, (long) int0, timeUnit0);
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertEquals(2, subscriptionArray0.length);
      assertNotSame(compositeSubscription1, compositeSubscription0);
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertNotNull(subscription0);
      
      CompositeSubscription compositeSubscription2 = (CompositeSubscription)newThreadScheduler0.schedule(action0_0, long0, timeUnit0);
      assertFalse(compositeSubscription2.equals((Object)compositeSubscription1));
      assertFalse(compositeSubscription2.equals((Object)compositeSubscription0));
      assertNotSame(compositeSubscription2, compositeSubscription1);
      assertNotSame(compositeSubscription2, compositeSubscription0);
      assertFalse(compositeSubscription2.isUnsubscribed());
      assertNotNull(compositeSubscription2);
      
      Func2<Object, Object, SafeObservableSubscription> func2_2 = null;
      Subscription subscription1 = testScheduler0.schedule(newThreadScheduler0, (Func2<? super Scheduler, ? super NewThreadScheduler, ? extends Subscription>) func2_2);
      assertSame(subscription1, subscription0);
      assertNotNull(subscription1);
      
      CurrentThreadScheduler currentThreadScheduler0 = CurrentThreadScheduler.getInstance();
      assertNotNull(currentThreadScheduler0);
      
      DiscardableAction<CurrentThreadScheduler> discardableAction0 = new DiscardableAction<CurrentThreadScheduler>(currentThreadScheduler0, func2_2);
      assertNotNull(discardableAction0);
      
      Subscription subscription2 = testScheduler0.schedule(discardableAction0, (Func2<? super Scheduler, ? super DiscardableAction<CurrentThreadScheduler>, ? extends Subscription>) func2_2);
      assertSame(subscription2, subscription0);
      assertSame(subscription2, subscription1);
      assertNotNull(subscription2);
      
      long long1 = 2255L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        testScheduler0.advanceTimeBy(long1, timeUnit1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = (-593L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler0.advanceTimeBy(long0, timeUnit0);
      long long1 = testScheduler0.now();
      assertEquals((-51235200000L), long1);
      assertFalse(long1 == long0);
      
      long long2 = testScheduler0.now();
      assertEquals((-51235200000L), long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = (-1230L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      long long0 = 0L;
      testScheduler0.triggerActions();
      long long1 = testScheduler0.now();
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      String string0 = "tQ Yj wf";
      Func2<Object, String, BooleanSubscription> func2_0 = (Func2<Object, String, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , anyString());
      long long2 = 0L;
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription0 = testScheduler0.schedule(action0_0);
      assertNotNull(subscription0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long3 = 0L;
      testScheduler0.advanceTimeTo(long3, timeUnit0);
      assertTrue(long3 == long1);
      
      Subscription subscription1 = testScheduler0.schedulePeriodically(string0, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_0, long2, long0, timeUnit0);
      assertTrue(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(subscription1.equals((Object)subscription0));
      assertNotNull(subscription1);
      
      long long4 = 0L;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      // Undeclared exception!
      testScheduler0.advanceTimeTo(long4, timeUnit1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      String string0 = "rx.concurrency.TestScheduler$TimedAction";
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      long long0 = (-918L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(string0, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_0, long0, long0, timeUnit0);
      assertNotNull(subscription0);
      
      // Undeclared exception!
      testScheduler0.triggerActions();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      testScheduler0.triggerActions();
      long long0 = (-923L);
      String string0 = "";
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(func2_0).call(any() , any());
      long long1 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Subscription subscription0 = testScheduler0.schedulePeriodically(string0, (Func2<? super Scheduler, ? super String, ? extends Subscription>) func2_0, long0, long1, timeUnit0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(subscription0);
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      testScheduler0.advanceTimeBy(long0, timeUnit1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      LinkedList<Subscription> linkedList0 = new LinkedList<Subscription>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeSubscription compositeSubscription0 = new CompositeSubscription(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertNotNull(compositeSubscription0);
      
      Func2<Object, CompositeSubscription, SafeObservableSubscription> func2_0 = (Func2<Object, CompositeSubscription, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func2_0).call(any() , any(rx.subscriptions.CompositeSubscription.class));
      long long0 = (-364L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ExecutorScheduler executorScheduler0 = new ExecutorScheduler((ScheduledExecutorService) scheduledThreadPoolExecutor0);
      assertNotNull(executorScheduler0);
      
      Func2<Object, ExecutorScheduler, CompositeSubscription> func2_1 = null;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      
      Subscription subscription0 = testScheduler0.schedule(executorScheduler0, (Func2<? super Scheduler, ? super ExecutorScheduler, ? extends Subscription>) func2_1, (Date) mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(subscription0);
      
      Subscription subscription1 = testScheduler0.schedule(compositeSubscription0, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_0, long0, timeUnit0);
      assertSame(subscription1, subscription0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeSubscription0.isUnsubscribed());
      assertFalse(linkedList0.contains(subscription1));
      assertNotNull(subscription1);
      
      Action0 action0_0 = mock(Action0.class, new ViolatedAssumptionAnswer());
      long long1 = 1L;
      Action0 action0_1 = mock(Action0.class, new ViolatedAssumptionAnswer());
      Subscription subscription2 = testScheduler0.schedule(action0_1);
      assertSame(subscription2, subscription1);
      assertSame(subscription2, subscription0);
      assertNotNull(subscription2);
      
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      Subscription subscription3 = testScheduler0.schedule(action0_0, long1, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(long1 == long0);
      assertSame(subscription3, subscription1);
      assertSame(subscription3, subscription0);
      assertSame(subscription3, subscription2);
      assertNotNull(subscription3);
      
      LinkedList<Subscription> linkedList1 = new LinkedList<Subscription>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(subscription1));
      assertNotNull(linkedList1);
      
      CompositeSubscription compositeSubscription1 = new CompositeSubscription(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertEquals(0, linkedList1.size());
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertFalse(linkedList1.contains(subscription1));
      assertNotNull(compositeSubscription1);
      
      Func2<Object, Object, BooleanSubscription> func2_2 = (Func2<Object, Object, BooleanSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long2 = 569L;
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      Subscription subscription4 = testScheduler0.schedule(compositeSubscription1, (Func2<? super Scheduler, ? super CompositeSubscription, ? extends Subscription>) func2_2, long2, timeUnit2);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(compositeSubscription1.equals((Object)compositeSubscription0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(compositeSubscription1, compositeSubscription0);
      assertSame(subscription4, subscription3);
      assertSame(subscription4, subscription0);
      assertSame(subscription4, subscription1);
      assertSame(subscription4, subscription2);
      assertEquals(0, linkedList1.size());
      assertFalse(compositeSubscription1.isUnsubscribed());
      assertFalse(linkedList1.contains(subscription1));
      assertNotNull(subscription4);
      
      // Undeclared exception!
      try { 
        testScheduler0.triggerActions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("rx.concurrency.TestScheduler", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TestScheduler testScheduler0 = new TestScheduler();
      assertNotNull(testScheduler0);
      
      Integer integer0 = null;
      Func2<Object, Object, SafeObservableSubscription> func2_0 = (Func2<Object, Object, SafeObservableSubscription>) mock(Func2.class, new ViolatedAssumptionAnswer());
      long long0 = 1133L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      testScheduler0.advanceTimeTo(long0, timeUnit0);
      long long1 = 0L;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Subscription subscription0 = testScheduler0.schedule(integer0, (Func2<? super Scheduler, ? super Integer, ? extends Subscription>) func2_0, long1, timeUnit1);
      assertFalse(long1 == long0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(subscription0);
      
      long long2 = testScheduler0.now();
      assertEquals(97891200000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
  }
}
