/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 15:30:40 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection$Response_ESTest extends HttpConnection$Response_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      List<String> list0 = hashMap0.put(string1, linkedList1);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedList1.offer(string1);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(string1));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList1.add(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(string1));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList1.contains(string1));
      assertFalse(list1.contains(string1));
      
      String string2 = "6:";
      List<String> list2 = hashMap0.put(string2, list1);
      assertNull(list2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList1.contains(string2));
      assertTrue(linkedList1.contains(string1));
      assertFalse(list1.contains(string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      List<String> list3 = hashMap0.put(string0, list1);
      assertNull(list3);
      assertNotSame(string1, string2);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList1.contains(string2));
      assertTrue(linkedList1.contains(string1));
      assertFalse(list1.contains(string1));
      assertFalse(string1.equals((Object)string2));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "set-cookie";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      String string1 = "";
      boolean boolean0 = linkedList0.add(string1);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string1));
      assertFalse(linkedList0.contains(string0));
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string1 = httpConnection_Response0.statusMessage();
      assertNull(string1);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "set-coomie";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      assertTrue(boolean0);
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      Map<String, List<String>> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, int0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = "Xow'r6Q-";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      List<String> list0 = hashMap0.put(string1, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      int int0 = 4451;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(int0);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = hashMap1.put(string0, linkedList0);
      assertNull(list0);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      httpConnection_Response0.processResponseHeaders(hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "application/\\w+\\+xml.*";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      assertTrue(boolean0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList1.contains(string1));
      assertFalse(list0.contains(string1));
      
      List<String> list1 = hashMap0.put(string1, list0);
      assertNull(list1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList1.contains(string1));
      assertFalse(list0.contains(string1));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      LinkedList<String> linkedList3 = new LinkedList<String>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(string1));
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = hashMap0.put(string0, linkedList3);
      assertNull(list2);
      assertNotSame(linkedList3, linkedList1);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(string1));
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList3, locale_FilteringMode1);
      assertNotNull(list3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList3.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertFalse(linkedList3.contains(string1));
      assertFalse(list3.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list3.equals((Object)list0));
      
      List<String> list4 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list3, locale_FilteringMode1);
      assertNotNull(list4);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list4);
      assertNotSame(list4, list0);
      assertNotSame(list4, list3);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList3.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertFalse(linkedList3.contains(string1));
      assertFalse(list3.contains(string1));
      assertFalse(list4.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      
      String string2 = "";
      List<String> list5 = hashMap0.put(string2, list4);
      assertNull(list5);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list4);
      assertNotSame(list4, list0);
      assertNotSame(list4, list3);
      assertNotSame(string2, string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList3.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertFalse(linkedList3.contains(string2));
      assertFalse(list3.contains(string2));
      assertFalse(list4.contains(string2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertFalse(string2.equals((Object)string1));
      
      List<String> list6 = hashMap0.put(string0, list4);
      assertNotNull(list6);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list4);
      assertNotSame(list4, list0);
      assertNotSame(list4, list3);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(0, list6.size());
      assertTrue(list6.isEmpty());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList3.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertFalse(list6.contains(string2));
      assertFalse(linkedList3.contains(string2));
      assertFalse(list3.contains(string2));
      assertFalse(list4.contains(string2));
      assertTrue(list6.equals((Object)list0));
      assertTrue(list6.equals((Object)list3));
      assertTrue(list6.equals((Object)list4));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list3.equals((Object)list4));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(0, int0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = "Xow'r6Q-";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean1 = linkedList0.add(string0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<String> list0 = hashMap0.put(string1, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      List<String> list0 = hashMap0.put(string1, linkedList1);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      String string2 = null;
      boolean boolean0 = linkedList1.add(string2);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(boolean0);
      
      List<String> list1 = hashMap0.put(string0, linkedList1);
      assertNull(list1);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertNotNull(list2);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList1.contains(string1));
      assertFalse(list2.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2, locale_FilteringMode0);
      assertNotNull(list3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains(string1));
      assertFalse(list2.contains(string1));
      assertFalse(list3.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list3.equals((Object)list2));
      
      String string3 = "";
      List<String> list4 = hashMap0.put(string3, list3);
      assertNull(list4);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertNotSame(string3, string1);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains(string1));
      assertFalse(list2.contains(string1));
      assertFalse(list3.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      assertFalse(string3.equals((Object)string1));
      
      List<String> list5 = hashMap0.put(string0, list3);
      assertNotNull(list5);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertFalse(list5.isEmpty());
      assertEquals(1, list5.size());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(list5.contains(string1));
      assertFalse(linkedList1.contains(string1));
      assertFalse(list2.contains(string1));
      assertFalse(list3.contains(string1));
      assertFalse(list5.equals((Object)list2));
      assertFalse(list5.equals((Object)list3));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      List<String> list0 = hashMap0.put(string1, linkedList1);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      String string2 = null;
      String string3 = "kY$";
      boolean boolean0 = linkedList1.offer(string3);
      assertNotSame(string3, string1);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertTrue(boolean0);
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = linkedList1.add(string2);
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<String> list1 = hashMap0.put(string0, linkedList1);
      assertNull(list1);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertNotNull(list2);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(2, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertFalse(list2.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2, locale_FilteringMode0);
      assertNotNull(list3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertEquals(2, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertFalse(list2.contains(string1));
      assertFalse(list3.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list3.equals((Object)list2));
      
      String string4 = "";
      List<String> list4 = hashMap0.put(string4, list3);
      assertNull(list4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertFalse(list2.contains(string3));
      assertFalse(list3.contains(string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      
      List<String> list5 = hashMap0.put(string0, list3);
      assertNotNull(list5);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list2, list3);
      assertNotSame(list3, list2);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(list5.isEmpty());
      assertEquals(2, list5.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(2, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list5.contains(string3));
      assertFalse(list5.contains(string1));
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.contains(string3));
      assertFalse(list2.contains(string3));
      assertFalse(list3.contains(string3));
      assertFalse(list5.equals((Object)list3));
      assertFalse(list5.equals((Object)list2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList1);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string0));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedList1.offer(string0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(string0));
      assertTrue(boolean0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      assertNotNull(list1);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList1.contains(string0));
      assertFalse(list1.contains(string0));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      String string1 = "";
      boolean boolean1 = linkedList1.add(string1);
      assertNotSame(string1, string0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains(string0));
      assertTrue(boolean1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1, locale_FilteringMode0);
      assertNotNull(list2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertEquals(2, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList1.contains(string0));
      assertFalse(list1.contains(string0));
      assertFalse(list2.contains(string0));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list1));
      
      String string2 = "\"%exc(=/ckl";
      List<String> list3 = new LinkedList<String>();
      assertNotNull(list3);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertFalse(list3.contains(string0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList1);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(string0));
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      String string1 = "!5wx}=Z{<Ld.P=eGt??";
      boolean boolean0 = linkedList1.add(string1);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(string1));
      assertFalse(linkedList1.contains(string0));
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\"%exc(=/ckl";
      LinkedList<String> linkedList3 = new LinkedList<String>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(string2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
